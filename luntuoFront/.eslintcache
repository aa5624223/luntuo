[{"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\index.js":"1","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\App.js":"2","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\memoryUtils.js":"3","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\storageUtils.js":"4","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Login\\index.jsx":"5","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Admin\\index.jsx":"6","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\index.js":"7","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\api\\index.js":"8","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Deskop\\index.jsx":"9","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Matrial\\index.jsx":"10","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\AdminOptLog\\index.jsx":"11","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\MRP\\index.jsx":"12","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report1\\index.jsx":"13","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\OptRecord\\index.jsx":"14","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\AdminUserConfig\\index.jsx":"15","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service1\\index.jsx":"16","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report3\\index.jsx":"17","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report2\\index.jsx":"18","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\ExcelUp\\index.jsx":"19","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report4\\index.jsx":"20","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service4\\index.jsx":"21","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service3\\index.jsx":"22","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service2\\index.jsx":"23","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\left-nav\\index.jsx":"24","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\header\\index.jsx":"25","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\StaticSet.js":"26","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\api\\ajax.js":"27","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\form-Fields.js":"28","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\left-menu-list.js":"29","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\table-columns.js":"30","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\link-button\\index.jsx":"31","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\AdvancedSearchForm\\index.jsx":"32","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\anaData\\index.js":"33","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder\\index.jsx":"34","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrderExcel\\index.jsx":"35","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrderDet\\index.jsx":"36","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_CgInfo\\index.jsx":"37","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_JjInfo\\index.jsx":"38","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_BjInfo\\index.jsx":"39","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_BjInfo2\\index.jsx":"40","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report2_1\\index.jsx":"41","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report3_1\\index.jsx":"42","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report4_1\\index.jsx":"43","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Mobile_Login\\index.jsx":"44","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Mobile_Admin\\index.jsx":"45","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Mobile_DdOrder\\index.jsx":"46","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Mobile_DdOrderDet\\index.jsx":"47"},{"size":498,"mtime":1616814274150,"results":"48","hashOfConfig":"49"},{"size":1310,"mtime":1627367226787,"results":"50","hashOfConfig":"49"},{"size":105,"mtime":1615258349880,"results":"51","hashOfConfig":"49"},{"size":598,"mtime":1615259872910,"results":"52","hashOfConfig":"49"},{"size":5139,"mtime":1627345638783,"results":"53","hashOfConfig":"49"},{"size":6542,"mtime":1625039704333,"results":"54","hashOfConfig":"49"},{"size":9337,"mtime":1625019905263,"results":"55","hashOfConfig":"49"},{"size":10004,"mtime":1624870300265,"results":"56","hashOfConfig":"49"},{"size":4714,"mtime":1616398720994,"results":"57","hashOfConfig":"58"},{"size":11466,"mtime":1616915415406,"results":"59","hashOfConfig":"49"},{"size":246,"mtime":1615265222012,"results":"60","hashOfConfig":"49"},{"size":10717,"mtime":1616739732747,"results":"61","hashOfConfig":"49"},{"size":4700,"mtime":1616401626520,"results":"62","hashOfConfig":"49"},{"size":4923,"mtime":1616913610914,"results":"63","hashOfConfig":"49"},{"size":17492,"mtime":1626162730515,"results":"64","hashOfConfig":"49"},{"size":5729,"mtime":1616561290522,"results":"65","hashOfConfig":"49"},{"size":4156,"mtime":1617601715928,"results":"66","hashOfConfig":"49"},{"size":4170,"mtime":1619573597503,"results":"67","hashOfConfig":"49"},{"size":17574,"mtime":1627955028333,"results":"68","hashOfConfig":"49"},{"size":4298,"mtime":1618469761558,"results":"69","hashOfConfig":"49"},{"size":9652,"mtime":1619153574351,"results":"70","hashOfConfig":"49"},{"size":8009,"mtime":1619153534376,"results":"71","hashOfConfig":"49"},{"size":14120,"mtime":1624856924728,"results":"72","hashOfConfig":"49"},{"size":6385,"mtime":1616810301727,"results":"73","hashOfConfig":"49"},{"size":3009,"mtime":1625209875301,"results":"74","hashOfConfig":"49"},{"size":227,"mtime":1616561007617,"results":"75","hashOfConfig":"49"},{"size":789,"mtime":1616390277634,"results":"76","hashOfConfig":"49"},{"size":16673,"mtime":1625109004979,"results":"77","hashOfConfig":"49"},{"size":5569,"mtime":1622096219872,"results":"78","hashOfConfig":"49"},{"size":46875,"mtime":1625017407798,"results":"79","hashOfConfig":"49"},{"size":216,"mtime":1615258349843,"results":"80","hashOfConfig":"49"},{"size":3151,"mtime":1616220281414,"results":"81","hashOfConfig":"49"},{"size":10434,"mtime":1617677888483,"results":"82","hashOfConfig":"49"},{"size":28846,"mtime":1625216787667,"results":"83","hashOfConfig":"49"},{"size":12238,"mtime":1622441832654,"results":"84","hashOfConfig":"49"},{"size":11703,"mtime":1629781776678,"results":"85","hashOfConfig":"49"},{"size":22974,"mtime":1627865323887,"results":"86","hashOfConfig":"49"},{"size":16545,"mtime":1625213785283,"results":"87","hashOfConfig":"49"},{"size":15692,"mtime":1618619439632,"results":"88","hashOfConfig":"49"},{"size":20763,"mtime":1622787967927,"results":"89","hashOfConfig":"49"},{"size":19655,"mtime":1624857381945,"results":"90","hashOfConfig":"49"},{"size":13945,"mtime":1625274438536,"results":"91","hashOfConfig":"49"},{"size":20798,"mtime":1627523437481,"results":"92","hashOfConfig":"49"},{"size":4663,"mtime":1625022489848,"results":"93","hashOfConfig":"49"},{"size":5235,"mtime":1625203036598,"results":"94","hashOfConfig":"49"},{"size":5114,"mtime":1625129756904,"results":"95","hashOfConfig":"49"},{"size":8321,"mtime":1629781943270,"results":"96","hashOfConfig":"49"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},"1rdu52v",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"99"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"117"},"1vygspr",{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"99"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"99"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"99"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"99"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"99"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"99"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"99"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201"},"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\index.js",[],["202","203"],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\App.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\memoryUtils.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\storageUtils.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Login\\index.jsx",["204"],"import React, { Component } from \"react\";\r\nimport { Form, Input, Button, message } from \"antd\";\r\nimport { Redirect, withRouter } from \"react-router-dom\";\r\n\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport \"./login.less\";\r\nimport logo from \"../../assets/images/999.png\";\r\nimport QrCode from \"./images/联图二维码.png\";\r\nimport { reqLogin } from \"../../api\";\r\n\r\nimport memoryUtils from \"../../utils/memoryUtils\";\r\nimport storageUtils from \"../../utils/storageUtils\";\r\nconst Item = Form.Item;\r\nclass Login extends Component {\r\n  formRef = React.createRef();\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const form = this.formRef.current;\r\n    const { username, password } = form.getFieldsValue(true);\r\n    //redict\r\n    var formData = new FormData();\r\n    formData.append(\"username\", username);\r\n    formData.append(\"password\", password);\r\n    const error = form.getFieldsError();\r\n    if (error.find((item) => item.errors.length > 0)) {\r\n      return;\r\n    }\r\n    //{status:0,data:user}\r\n    const result = await reqLogin(formData);\r\n    if (result.status === 0) {\r\n      //登录成功\r\n      if (result.data == null || result.data.UserInfo.length === 0) {\r\n        message.warn(\"账号或密码错误\");\r\n        return;\r\n      }\r\n      if (\r\n        result.data.UserInfo[0].Roles === \"NULL\" ||\r\n        result.data.UserInfo[0].Roles === undefined ||\r\n        result.data.UserInfo[0].Roles === \"\"\r\n      ) {\r\n        message.warn(\"账号还没有设置权限\");\r\n        return;\r\n      }\r\n      message.success(\"登录成功\");\r\n      //保存user\r\n      var user;\r\n      for (var key in result.data) {\r\n        var temp = result.data[key][0];\r\n        if (typeof temp === \"object\") {\r\n          user = result.data[key][0];\r\n          break;\r\n        }\r\n      }\r\n      //const user = result.data.G_UserM[0];\r\n      //user.Roles = user.Roles.replaceAll('#','');\r\n      memoryUtils.user = user; //将当前登录用户保存到内存中\r\n      //保存到本地\r\n      storageUtils.saveUser(user);\r\n\r\n      this.props.history.replace(\"/Admin\");\r\n    } else if (result.status === 1) {\r\n      //没有找到账号密码\r\n      message.warn(\"账号密码错误\");\r\n    } else {\r\n      message.error(\"服务器无响应\");\r\n    }\r\n  };\r\n  render() {\r\n    //#1DA57A\r\n    const user = storageUtils.getUser();\r\n    //storageUtils.removeUser();\r\n    //console.log(user.ID);\r\n    var { redict } = this.props.location;\r\n    if (user && user.ID) {\r\n      if (redict !== true) {\r\n        memoryUtils.user = user; //将当前登录用户保存到内存中\r\n        return <Redirect to=\"/Admin\" />;\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"login\">\r\n        <div className=\"login-header\">\r\n          <img src={logo} alt=\"logo\" className=\"Loginlogo\"></img>\r\n          <h1>常发轮拖排产系统</h1> \r\n        </div>\r\n        <section className=\"login-content\">\r\n          <div style={{width:\"200px\",float:\"left\",textAlign:'center'}}>\r\n              <h2>手机版二维码</h2>\r\n              <img src={QrCode} style={{width:'150px',height:'150px',margin:\"auto\"}} ></img>\r\n          </div>\r\n          <div style={{ width: \"250px\", float: \"left\" }}>\r\n            <h2>用户登录</h2>\r\n            <Form ref={this.formRef} onSubmitCapture={this.handleSubmit}>\r\n              <Item\r\n                name=\"username\"\r\n                rules={[\r\n                  { required: true, message: \"请输入用户名\" },\r\n                  {\r\n                    pattern: /^[a-zA-Z0-9_]+$/,\r\n                    message: \"用户名必须是数字、字母、下划线、\",\r\n                  },\r\n                  { whitespace: true, message: \"账号不能为空格\" },\r\n                ]}\r\n              >\r\n                <Input\r\n                  placeholder=\"账号\"\r\n                  prefix={\r\n                    <UserOutlined\r\n                      style={{ color: \"rgba(0,0,0,0.25)\" }}\r\n                    ></UserOutlined>\r\n                  }\r\n                />\r\n              </Item>\r\n              <Item\r\n                name=\"password\"\r\n                rules={[\r\n                  { required: true, message: \"请输入密码\" },\r\n                  {\r\n                    pattern: /^[a-zA-Z0-9_@]+$/,\r\n                    message: \"密码名必须是数字、字母、下划线、@符号\",\r\n                  },\r\n                  { whitespace: true, message: \"密码不能为空格\" },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  placeholder=\"密码\"\r\n                  autoComplete=\"off\"\r\n                  prefix={\r\n                    <LockOutlined style={{ color: \"rgba(0,0,0,0.25)\" }} />\r\n                  }\r\n                />\r\n              </Item>\r\n              <Item>\r\n                <Button\r\n                  className=\"login-button\"\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                >\r\n                  登录\r\n                </Button>\r\n              </Item>\r\n            </Form>\r\n          </div>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Login);\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Admin\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\index.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\api\\index.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Deskop\\index.jsx",[],["205","206"],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Matrial\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\AdminOptLog\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\MRP\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report1\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\OptRecord\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\AdminUserConfig\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service1\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report3\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report2\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\ExcelUp\\index.jsx",["207"],"import React, { Component } from 'react'\r\nimport { Upload, message, Button,Table,Row,Col,Modal,DatePicker} from 'antd'\r\nimport { UploadOutlined,CheckCircleTwoTone,ArrowLeftOutlined} from '@ant-design/icons';\r\nimport XLSX from 'xlsx'\r\nimport moment from 'moment';\r\nimport LinkButton from '../../components/link-button';\r\n//api\r\nimport {submitBjImp,submitCgImp,submitJjImp,submitWBInfo} from '../../api'\r\nconst { confirm } = Modal;\r\n//用于处理 Excel 上传的页面\r\nexport default class ExcelUp extends Component {\r\n    //\r\n    dateFormat = 'YYYY-MM-DD';\r\n    state={\r\n        dataSource:[],\r\n        loading:false,\r\n        //0 等待上传，1已经提交未上传，2上传成功,等待重新提交\r\n        uploadState:0,\r\n        type:0,//页面展示类型\r\n        isBaseDate:false,\r\n        columns:[],\r\n        loadExcelUp1:false,\r\n        loadExcelUp2:false,\r\n        loadExcelUp3:false\r\n    }\r\n    key=0;\r\n    //读取文件\r\n    attes = {\r\n        name: 'file',\r\n        headers: { authorization: 'authorization-text' },\r\n        showUploadList:false,\r\n        beforeUpload:(file)=> {\r\n            if(file.name.lastIndexOf('.xls')===-1 && file.name.lastIndexOf('.xlsx') ===-1){\r\n                message.error(\"请上传Excel文件\");\r\n                return false;\r\n            }\r\n            const {columns} = this.state;\r\n            const fileReader = new FileReader();\r\n            fileReader.onload = (event,_this) => {\r\n                try {\r\n                    const { result } = event.target;\r\n                    const workbook = XLSX.read(result, { type: 'binary',cellDates:true});\r\n                    let data = []; // 存储获取到的数据\r\n                    // 遍历每张工作表进行读取（这里默认只读取第一张表）\r\n                    var flg = false;\r\n                    for (const sheet in workbook.Sheets) {\r\n                        if (workbook.Sheets.hasOwnProperty(sheet)) {\r\n                            \r\n                            // 利用 sheet_to_json 方法将 excel 转成 json 数据\r\n                            data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\r\n                            data = data.map((item,index)=>{\r\n                                let single ={}\r\n                                columns.forEach((item2,index2)=>{\r\n                                    if(item[item2.title]!==undefined){\r\n                                        if(item2.title.indexOf('日期')!==-1 || item2.title.indexOf('时间')!==-1){\r\n                                            if(item[item2.title] instanceof Date){\r\n                                                single[item2.dataIndex] = moment(item[item2.title]).format('YYYYMMDD');\r\n                                            }else{\r\n                                                if(typeof(item[item2.title])==='number'){\r\n                                                    single[item2.dataIndex] = item[item2.title];\r\n                                                }else if((item[item2.title]+\"\").indexOf('/') !== -1 ){\r\n                                                    var dts = item[item2.title].split('/');\r\n                                                    var YYYYMMDD = dts[0];\r\n                                                    if(dts[1].length===1){\r\n                                                        dts[1] = 0 + dts[1];\r\n                                                    }\r\n                                                    if(dts[2].length===1){\r\n                                                        dts[2] = 0 + dts[2];\r\n                                                    }\r\n                                                    YYYYMMDD +=dts[1] +dts[2]\r\n                                                    single[item2.dataIndex] = YYYYMMDD;\r\n                                                }else{\r\n                                                    \r\n                                                    if(item[item2.title].length===8){\r\n                                                        single[item2.dataIndex] = item[item2.title];\r\n                                                    }else{\r\n                                                        if((item[item2.title]+\"\").length!==8){\r\n                                                            message.error(\"日期位数不对,无法导入,发生在第\"+(index+1)+\"行，\"+index2+\"列\");\r\n                                                            flg = true;\r\n                                                        }\r\n                                                        single[item2.dataIndex] = item[item2.title];\r\n                                                    }\r\n                                                    \r\n                                                }\r\n                                                \r\n                                            }\r\n                                        }else{\r\n                                            single[item2.dataIndex] = item[item2.title]\r\n                                        }\r\n                                        \r\n                                    }\r\n                                })\r\n                                single.key=\"key\"+(this.key++)\r\n                                return single\r\n                            })\r\n                            if(flg){\r\n                                return;\r\n                            }\r\n                        }\r\n                        //只读一张表\r\n                        break;\r\n                    }\r\n                    \r\n                    for(let i=0;i<data.length;i++){\r\n                        if(data[i].find===true){\r\n                            continue;\r\n                        }\r\n                        for(let j=i+1;j<data.length;j++){\r\n                            if(data[j].find===true){\r\n                                continue;\r\n                            }\r\n                            if(data[i].Matnr === data[j].Matnr){\r\n                                data[i].Menge += data[j].Menge;\r\n                                data[j].find = true;\r\n                            }\r\n                        }\r\n                    }\r\n                    let new_Data  = data.filter(item=>{\r\n                        return item.find===undefined;\r\n                    })\r\n                    console.dir(new_Data);\r\n                    this.setState({dataSource:new_Data,uploadState:1});\r\n                } catch (e) {\r\n                    message.error(\"请上传Excel文件\");\r\n                    return false;\r\n                }\r\n            }\r\n            fileReader.readAsBinaryString(file,this);\r\n            return false;//拦截上传文件\r\n        }\r\n    }\r\n    //普通提交\r\n    handleSubmit = async ()=>{\r\n        if(this.state.loadExcelUp1){\r\n            message.warn('请勿重复提交');\r\n            return;\r\n        }\r\n        this.setState({loadExcelUp1:true},async ()=>{\r\n            const {dataSource} = this.state;\r\n            const {submitUrl} = this.props.location;\r\n            //移除key\r\n            const SubmitData = dataSource.map(item=>{\r\n                delete item.key;\r\n                return item;\r\n            })\r\n            //需要提交的内容\r\n            //console.dir(SubmitData);\r\n    \r\n            let formData = new FormData();\r\n            for(var i=0;i<SubmitData.length;i++){\r\n                formData.append(`list[${i}]`,JSON.stringify(SubmitData[i]));\r\n            }\r\n            formData.append(\"type\",0);\r\n            formData.append(\"Count\",i);\r\n            \r\n            let result;\r\n            try{\r\n                switch(submitUrl){\r\n                    case \"BjImp\":\r\n                        result = await submitBjImp(formData);\r\n                        break;\r\n                    case \"CgImp\":\r\n                        formData.append(\"BaseDate\",this.BaseDate);\r\n                        result = await submitCgImp(formData);\r\n                        break;\r\n                    case \"JjImp\":\r\n                        result = await submitJjImp(formData);\r\n                        break;\r\n                    case \"WBInfo\":\r\n                        result = await submitWBInfo(formData);\r\n                        break;\r\n                    default:\r\n                }\r\n                 \r\n                if(result.status === 0 ){\r\n                    confirm({\r\n                        icon:<CheckCircleTwoTone twoToneColor=\"#52c41a\" />,\r\n                        title: 'Excel上传成功，请勿重复上传',\r\n                        okText: '确认',\r\n                    })\r\n                }else{\r\n                    message.error(\"服务器无响应\");\r\n                }\r\n        \r\n        \r\n                this.setState({\r\n                    dataSource:[],\r\n                    uploadState:2\r\n                })\r\n            }catch{\r\n    \r\n            }finally{\r\n                this.setState({loadExcelUp1:false})\r\n            }\r\n        });\r\n    }\r\n    handleSubmit1 = async ()=>{//全新执行 追加参数 type = 0\r\n        if(this.state.loadExcelUp2){\r\n            message.warn(\"请勿重复提交\");\r\n            return;\r\n        }\r\n        this.setState({loadExcelUp2:true},async ()=>{\r\n        const {dataSource} = this.state;\r\n        const {submitUrl} = this.props.location;\r\n        //移除key\r\n        const SubmitData = dataSource.map(item=>{\r\n            delete item.key;\r\n            return item;\r\n        })\r\n        //需要提交的内容\r\n        let formData = new FormData();\r\n        for(var i=0;i<SubmitData.length;i++){\r\n            formData.append(`list[${i}]`,JSON.stringify(SubmitData[i]));\r\n        }\r\n        formData.append(\"type\",1);\r\n        formData.append(\"Count\",i);\r\n        try{\r\n            let result;\r\n        switch(submitUrl){\r\n            case \"BjImp\":\r\n                result = await submitBjImp(formData);\r\n                break;\r\n            case \"CgImp\":\r\n                formData.append(\"BaseDate\",this.BaseDate);\r\n                result = await submitCgImp(formData);\r\n                break;\r\n            case \"JjImp\":\r\n                result = await submitJjImp(formData);\r\n                break;\r\n            case \"WBInfo\":\r\n                result = await submitWBInfo(formData);\r\n                break;\r\n            default:\r\n        }\r\n\r\n        if(result.status === 0 ){\r\n            confirm({\r\n                icon:<CheckCircleTwoTone twoToneColor=\"#52c41a\" />,\r\n                title: 'Excel上传成功，请勿重复上传',\r\n                okText: '确认',\r\n            })\r\n        }else{\r\n            message.error(\"服务器无响应\");\r\n        }\r\n\r\n\r\n        this.setState({\r\n            dataSource:[],\r\n            uploadState:2\r\n        })\r\n        }catch{\r\n\r\n        }finally{\r\n            this.setState({loadExcelUp2:false});\r\n        }\r\n        });\r\n        \r\n        \r\n    }\r\n    handleSubmit2 = async ()=>{//追加执行 追加参数 type = 1\r\n        if(this.state.loadExcelUp3){\r\n            message.warn(\"请勿重复提交\");\r\n            return;\r\n        }\r\n        this.setState({loadExcelUp3:true},async ()=>{\r\n        \r\n        const {dataSource} = this.state;\r\n        const {submitUrl} = this.props.location;\r\n        //移除key\r\n        const SubmitData = dataSource.map(item=>{\r\n            delete item.key;\r\n            return item;\r\n        })\r\n        //需要提交的内容\r\n        let formData = new FormData();\r\n        for(var i=0;i<SubmitData.length;i++){\r\n            formData.append(`list[${i}]`,JSON.stringify(SubmitData[i]));\r\n        }\r\n        formData.append(\"type\",2);\r\n        formData.append(\"Count\",i);\r\n        try{\r\n            let result;\r\n        switch(submitUrl){\r\n            case \"BjImp\":\r\n                result = await submitBjImp(formData);\r\n                break;\r\n            case \"CgImp\":\r\n                formData.append(\"BaseDate\",this.BaseDate);\r\n                result = await submitCgImp(formData);\r\n                break;\r\n            case \"JjImp\":\r\n                result = await submitJjImp(formData);\r\n                break;\r\n            case \"WBInfo\":\r\n                result = await submitWBInfo(formData);\r\n                break;\r\n            default:\r\n        }\r\n\r\n        if(result.status === 0 ){\r\n            confirm({\r\n                icon:<CheckCircleTwoTone twoToneColor=\"#52c41a\" />,\r\n                title: 'Excel上传成功，请勿重复上传',\r\n                okText: '确认',\r\n            })\r\n        }else{\r\n            message.error(\"服务器无响应\");\r\n        }\r\n\r\n        this.setState({\r\n            dataSource:[],\r\n            uploadState:2\r\n        })\r\n        }catch{\r\n\r\n        }finally{\r\n            this.setState({loadExcelUp3:false});\r\n        }\r\n        });\r\n        \r\n        \r\n    }\r\n    handleBack = ()=>{\r\n        const {history} = this.props;\r\n        history.goBack();\r\n    }\r\n    DtChange = (date,dateString)=>{\r\n        this.BaseDate = dateString;\r\n    }\r\n    componentDidMount = ()=>{\r\n        const {type,submitUrl} = this.props.location;\r\n        let {columns} =  this.props.location;\r\n        if(columns!==undefined&& columns.length!==0){\r\n            columns = columns.filter(item=>item.dataIndex!==\"operation\")\r\n        }\r\n        if(type===undefined||type===0){\r\n            if(columns!==undefined&& columns.length!==0){\r\n                columns = columns.filter(item=>item.key!=='status')\r\n                this.setState({columns})\r\n            }\r\n            \r\n        }else{\r\n            if(columns!==undefined&& columns.length!==0){\r\n                columns = columns.filter(item=>item.key!=='status')\r\n                this.setState({columns,type})\r\n            }\r\n        }\r\n        \r\n        \r\n        if(submitUrl===\"CgImp\"){\r\n            this.setState({isBaseDate:true});\r\n        }\r\n        this.BaseDate = moment().format(this.dateFormat);\r\n    }\r\n    render() {\r\n        const {subTitle} = this.props.location;\r\n        const {dataSource,loading,columns,uploadState,type,isBaseDate,loadExcelUp1,loadExcelUp2,loadExcelUp3} = this.state;\r\n        let width;\r\n        let height = 600;\r\n        if(columns!==undefined){\r\n            width = columns.length>8?2600:1400;\r\n        }\r\n        return (\r\n            <div className=\"main\">\r\n                \r\n                <Row>\r\n                    <Col span={4} className=\"toolArea_left\">\r\n                        <LinkButton onClick={()=>this.handleBack()}>\r\n                            <ArrowLeftOutlined/>返回 {subTitle}\r\n                        </LinkButton>\r\n                    </Col>\r\n                    <Col span={19} className=\"toolArea\">\r\n                        {isBaseDate?<label style={{fontSize:\"18px\",fontWeight:600}}>历史库存基准日期：<DatePicker onChange={this.DtChange} defaultValue={moment(moment(), this.dateFormat)} showToday format={this.dateFormat} /></label>:\"\"}\r\n                        \r\n                        &emsp;\r\n                        <Upload {...this.attes}>\r\n                            <Button icon={<UploadOutlined/>} disabled={columns===undefined?\"disabled\":\"\"} >{columns===undefined?\"请返回重新提交\":\"提交预览\"}</Button>\r\n                        </Upload>\r\n                        &emsp;\r\n                        {//单纯的只有上传功能\r\n                            type===0?\r\n                            <Button\r\n                            disabled={uploadState===0?\"disabled\":\r\n                            uploadState===1?\"\":\"disabled\"} type=\"primary\" \r\n                            loading={loadExcelUp1}\r\n                            onClick={()=>this.handleSubmit()}>\r\n                                {uploadState===0?\"请先上传文件\":\r\n                                uploadState===1?\"确认提交\":\"上传成功,可再次上传\"\r\n                                }\r\n                            \r\n                            </Button>://有全新执行，追加执行的\r\n                            type===1?\r\n                            <>\r\n                                <Button type=\"primary\" \r\n                                disabled={uploadState===0?\"disabled\":uploadState===1?\"\":\"disabled\"}\r\n                                loading={loadExcelUp2}\r\n                                onClick={()=>this.handleSubmit1()}\r\n                                >\r\n                                    全新执行\r\n                                </Button>\r\n                                &emsp;\r\n                                <Button type=\"primary\" \r\n                                disabled={uploadState===0?\"disabled\":uploadState===1?\"\":\"disabled\"}\r\n                                loading={loadExcelUp3}\r\n                                onClick={()=>this.handleSubmit2()}\r\n                                >\r\n                                    追加执行\r\n                                </Button>\r\n                            </>\r\n                            \r\n                            :\"\"\r\n                        }\r\n                        \r\n                    </Col>\r\n                </Row>\r\n                <Table\r\n                    dataSource={dataSource}\r\n                    bordered\r\n                    rowKey=\"key\"\r\n                    sticky={true}\r\n                    scroll={{ x: width,y:height}} \r\n                    columns={columns}\r\n                    size=\"middle\"\r\n                    loading={loading}\r\n                    pagination={false}\r\n                >\r\n\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report4\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service4\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service3\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service2\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\left-nav\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\header\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\StaticSet.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\api\\ajax.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\form-Fields.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\left-menu-list.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\table-columns.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\link-button\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\AdvancedSearchForm\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\anaData\\index.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder\\index.jsx",["208"],"import React, { Component } from 'react'\r\nimport { Table, Button, message, Modal, Input, Form, DatePicker,Select} from 'antd'\r\nimport moment from 'moment'\r\nimport locale from 'antd/es/date-picker/locale/zh_CN';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport memoryUtils from '../../utils/memoryUtils'\r\n//引入配置\r\n\r\nimport { GetDdOrder_columns, GetDdOrder_Det_Status } from '../../config/table-columns'\r\n//引入工具\r\nimport { getPageRoles,isOpt,ConvertFomrData } from '../../utils'\r\n//引入api\r\nimport { getDdOrder, editDdOrder, DdOrder_DetExt, editDdOrder_status, delDdOrder, demantExe, getV_DdOrder_Det,updateCgBaseBum } from '../../api'\r\nconst { confirm } = Modal;\r\nexport default class DdOrder extends Component {\r\n    //对话框配置\r\n    formRef = React.createRef(); \r\n    formRef2 = React.createRef();\r\n    Modal_DID = 0;\r\n    statusDt = moment();\r\n    layout = {\r\n        labelCol: {\r\n            span: 4,\r\n        },\r\n        wrapperCol: {\r\n            span: 16,\r\n        },\r\n    };\r\n    //state配置\r\n    state = {\r\n        dataSource: [],\r\n        searchText: '',\r\n        searchedColumn: '',\r\n        selectedRowKeys: [],\r\n        //记录当前查询条件\r\n        SearchContation: {},\r\n        Fuc_Del: true,\r\n        loading: true,\r\n        current: 1,\r\n        dataTotal: 0,\r\n        ModalTitle: '编辑',\r\n        //编辑对话框是否显示\r\n        isModalEditShow: false,\r\n        //需求计划执行对话框是否显示\r\n        isModalExeShow: false,\r\n        isModalDetStatusShow: false,\r\n        isModalMsgShow: false,\r\n        DataSource_DetStatus: [],\r\n        isDetTools: true,\r\n        selectedRowKeys2: [],\r\n        Order: \"\",\r\n        SorterContation: '',//排序\r\n        Fuc_Edit:false,\r\n        Fuc_Exe:false,\r\n        Fuc_Bj:false,\r\n        Fuc_Jj:false,\r\n        Fuc_Cg:false,\r\n        //页面值绑定\r\n        CgBaseTime:'',\r\n        Btn_CgBaseload:false\r\n    }\r\n\r\n    handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n        confirm();\r\n        this.setState({\r\n            searchText: selectedKeys[0],\r\n            searchedColumn: dataIndex,\r\n        });\r\n    };\r\n    //删除\r\n    ModalDel = async (record, app) => {\r\n        if (record.status === '是') {\r\n            message.warn(\"生效调度单不可删除\");\r\n            return;\r\n        }\r\n        //delDdOrder \r\n        confirm({\r\n            title: '是否删除数据?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            okText: '是',\r\n            okType: 'danger',\r\n            cancelText: '否',\r\n            async onOk() {\r\n                //record.ID\r\n                const formData = new FormData();\r\n                formData.append(\"ID\", record.ID);\r\n                const result = await delDdOrder(formData);\r\n                if (result.status === 0) {\r\n                    message.success(\"删除成功\");\r\n                    Modal.destroyAll();\r\n                    const { current, SearchContation } = app.state;\r\n                    const pageSize = 20;\r\n                    app.handleTableChange({ current, pageSize }, SearchContation);\r\n                } else {\r\n                    message.error(\"服务器无响应\");\r\n                    Modal.destroyAll();\r\n                }\r\n            },\r\n            onCancel() {\r\n            },\r\n        })\r\n    }\r\n    //编辑对话框\r\n    ModalEdit = (record, _this) => {\r\n        _this.setState({ isModalEditShow: true, ModalTitle: '编辑' }, () => {\r\n            _this.formRef.current.setFieldsValue(record)\r\n        })\r\n    }\r\n    //更改生效状态\r\n    changeStatus = async (record, _this) => {\r\n        //record.status,record.UpTime,record.PlanDt,recored.\r\n        const formData = ConvertFomrData(record);\r\n        const result = await editDdOrder_status(formData);\r\n        if (result.status === 0) {\r\n            const { current, SearchContation } = this.state;\r\n            const pageSize = 20;\r\n            message.success(\"更改成功\");\r\n            this.handleTableChange({ current, pageSize }, SearchContation);\r\n        } else {\r\n            message.error(\"网络错误\");\r\n        }\r\n    }\r\n    //关闭对话框\r\n    ModalEditCancel = () => {\r\n        this.setState({ isModalEditShow: false });\r\n    }\r\n    //编辑\r\n    ModalEditOk = async () => {\r\n        const form = this.formRef.current;\r\n        try {\r\n            await form.validateFields();\r\n        } catch (errorInfo) {\r\n            message.warn('请检查数据的正确性')\r\n            return;\r\n        }\r\n        const formData = ConvertFomrData(form.getFieldsValue(true))\r\n        const result = await editDdOrder(formData);\r\n        if (result.status === 0) {\r\n            const { current, SearchContation } = this.state;\r\n            const pageSize = 20;\r\n            message.success(\"编辑成功\");\r\n            this.handleTableChange({ current, pageSize }, SearchContation);\r\n\r\n        } else {\r\n            message.error(\"服务器无响应\");\r\n        }\r\n        this.setState({ isModalEditShow: false })\r\n    }\r\n    //重置\r\n    handleReset = clearFilters => {\r\n        clearFilters();\r\n        this.setState({ searchText: '' });\r\n    };\r\n    //明细汇总\r\n    OrderDet = () => {\r\n        const { history } = this.props;\r\n        const { selectedRowKeys} = this.state;\r\n        //IDS\r\n        if (selectedRowKeys.length === 0) {\r\n            message.warn(\"请先选择要汇总的调度单\");\r\n            return;\r\n        }\r\n        //\r\n        history.push({ pathname: \"/Admin/DdOrder/DdOrderDet\", IDS: selectedRowKeys.join(',') });\r\n    }//表格更改时调用的方法 confirm({ closeDropdown: false }); =查询\r\n    handleTableChange = async (pagination = {}, filters = {}, sorter = {}) => {\r\n        const { SearchContation } = this.state;\r\n        let { SorterContation } = this.state;\r\n        if (pagination.current === undefined) {\r\n            SearchContation.page = 1;\r\n            SearchContation.pageSize = 20;\r\n        } else {\r\n            SearchContation.page = pagination.current;\r\n            SearchContation.pageSize = pagination.pageSize;\r\n        }\r\n        //翻页请求\r\n        if (filters !== {}) {\r\n            for (let key in filters) {\r\n                SearchContation[key] = filters[key];\r\n            }\r\n        }\r\n        \r\n        if (typeof (sorter) === \"object\") {\r\n            if(sorter.length!==undefined){\r\n                let Sorts = [];\r\n            sorter.forEach(item => {\r\n                if (item.order === \"descend\") {\r\n                    Sorts.push(\" \" + item.column.dataIndex + \" desc\");\r\n                } else {\r\n                    Sorts.push(\" \" + item.column.dataIndex + \" \");\r\n                }\r\n            })\r\n            SorterContation = Sorts.join(',');\r\n            }else if(sorter.column===undefined){\r\n\r\n            }else if (sorter.order === \"descend\") {\r\n                SorterContation = \" \" + sorter.column.dataIndex + \" desc\";\r\n            } else {\r\n                SorterContation = \" \" + sorter.column.dataIndex + \" \";\r\n            }\r\n        }\r\n    //用于提交到后台\r\n    const formData = new FormData();\r\n    for(let key in SearchContation) {\r\n    if (SearchContation[key] !== null) {\r\n        formData.append(key, SearchContation[key]);\r\n    }\r\n}\r\nformData.append('Order', SorterContation);\r\nthis.setState({ loading: true })\r\nlet result = await getDdOrder(formData);\r\ntry {\r\n    if (result.status === 0) {\r\n        console.dir(result);\r\n        const { V_DdOrder, V_DdOrder_Count } = result.data;\r\n        this.setState({ loading: false, dataSource: V_DdOrder, SearchContation, dataTotal: V_DdOrder_Count, current: SearchContation.page })\r\n    } else {\r\n        this.setState({ loading: false })\r\n        message.error(\"网络无响应\");\r\n    }\r\n} catch (error) {\r\n    this.setState({ loading: false })\r\n    message.error(\"网络无响应\");\r\n}\r\n        \r\n    }\r\n//查询点击\r\nSearchDet = async (DID, flg) => {\r\n    var formData = new FormData();\r\n    formData.append(\"IDS\", DID);\r\n    const result = await getV_DdOrder_Det(formData);\r\n    if (result.status === 0) {\r\n        const { V_DdOrder_Det } = result.data;\r\n        //console.dir(V_DdOrder_Det);\r\n        this.Modal_DID = DID;\r\n        let newData = [];\r\n        if (V_DdOrder_Det.length > 0) {\r\n            newData.push(V_DdOrder_Det[0]);\r\n            for (let i = 1; i < V_DdOrder_Det.length; i++) {\r\n                //Datetime1\r\n                let flg = newData.find(item => item.Datetime1 === V_DdOrder_Det[i].Datetime1);\r\n                if (flg === undefined) {\r\n                    newData.push(V_DdOrder_Det[i]);\r\n                }else{\r\n                    flg.ID +=\",\"+V_DdOrder_Det[i].ID\r\n                }\r\n            }\r\n        }\r\n        this.setState({ isModalDetStatusShow: true, DataSource_DetStatus: newData, isDetTools: flg, selectedRowKeys2: [] })\r\n        //GetDdOrder_Det_Status\r\n    } else {\r\n        message.error(\"网络错误\");\r\n    }\r\n    //getV_DdOrder_Det\r\n}\r\n//导入调度单\r\nExcelIn = () => {\r\n    const { history } = this.props;\r\n    history.push({ pathname: \"/Admin/DdOrder/DdOrderExcel\" });\r\n}\r\n//需求计划执行 对话框\r\ndemantExe = async () => {\r\n    const { selectedRowKeys, dataSource } = this.state;\r\n    if (selectedRowKeys.length !== 1) {\r\n        message.warn(\"一次只能选择一条调度单\");\r\n        return;\r\n    }\r\n    const record = dataSource.filter(item => {\r\n        if (item.ID === selectedRowKeys[0]) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    })\r\n    if (record[0].status !== '是') {\r\n        message.warn(\"不生效的调度单不可执行需求计划\");\r\n        return;\r\n    }\r\n    this.setState({ isModalExeShow: true }, () => {\r\n        const Year = record[0].PlanDt.substring(0, 4);\r\n        const Month = record[0].PlanDt.substring(4, 6);\r\n        const dt = new Date(Year + \"-\" + Month);\r\n        this.formRef2.current.setFieldsValue({ ID: selectedRowKeys[0], dt: moment(dt).startOf('Month') })\r\n    })\r\n}\r\n//需求计划明细执行\r\ndemantExe_Det = async (type) => {\r\n    //selectedRowKeys2\r\n    const { selectedRowKeys2} = this.state;\r\n    //console.dir(moment(this.statusDt).format(\"YYYYMMDD\"));\r\n    if (selectedRowKeys2.length === 0) {\r\n        message.warn(\"请选择先选择明细\");\r\n        return;\r\n    }\r\n    var formdata = new FormData();\r\n    let user = memoryUtils.user;\r\n    formdata.append(\"DID\", this.Modal_DID);\r\n    //let IDS = \"\";\r\n    //DataSource_DetStatus\r\n\r\n    formdata.append(\"IDS\", selectedRowKeys2.join(','));\r\n    formdata.append(\"type\", type);\r\n    formdata.append(\"dt\", moment(this.statusDt).format(\"YYYYMMDD\"));\r\n    formdata.append(\"UserName\",user.UserName);\r\n    message.success(\"需求计划执行中，请等待\");\r\n    const result = await DdOrder_DetExt(formdata);\r\n    if (result.status === 0) {\r\n        this.setState({ isModalMsgShow: true });\r\n    } else {\r\n        message.error(\"网络错误\");\r\n    }\r\n}\r\n//需求计划执行\r\nModalExeOk = async () => {\r\n    const form = this.formRef2.current;\r\n    try {\r\n        await form.validateFields();\r\n    } catch (errorInfo) {\r\n        message.warn('请检检查数据正确性')\r\n        return;\r\n    }\r\n    var data = form.getFieldsValue(true);\r\n    data.newdt = moment(data.dt).format(\"YYYYMMDD\");\r\n    let user = memoryUtils.user;\r\n    var formData = new FormData();\r\n    formData.append(\"ID\", data.ID);\r\n    formData.append(\"dt\", data.newdt);\r\n    formData.append(\"UserName\",user.UserName);\r\n    //\r\n    message.success(\"需求计划执行中，请等待\");\r\n    const result = await demantExe(formData);\r\n    if (result.status === 0) {\r\n        const { current, SearchContation } = this.state;\r\n        const pageSize = 20;\r\n        this.handleTableChange({ current, pageSize }, SearchContation);\r\n \r\n    } else if (result.status === 1) {\r\n        message.error(\"需求计划执行失败:\" + result.msg);\r\n    }\r\n    this.setState({ isModalExeShow: false });\r\n}\r\nModalExeCancel = async () => {\r\n    this.setState({ isModalExeShow: false })\r\n}\r\nModalDetStatusCancel = () => {\r\n    this.setState({ isModalDetStatusShow: false })\r\n}\r\nonSelectChange = selectedRowKeys => {\r\n    this.setState({ selectedRowKeys });\r\n}\r\nonSelectChange2 = selectedRowKeys => {\r\n    this.setState({ selectedRowKeys2: selectedRowKeys });\r\n}\r\nonSelectDet_Error = (record, key) => {\r\n    let newSelects = [];\r\n    record.forEach(item => {\r\n        if (item[key] !== \"已完成\") {\r\n            newSelects.push(item.ID);\r\n        }\r\n    })\r\n    this.setState({ selectedRowKeys2: newSelects })\r\n}\r\n//钣金需求\r\ndemantBj = () => {\r\n    //selectedRowKeys\r\n    //selectedRowKeys\r\n    const { dataSource, selectedRowKeys } = this.state;\r\n    var LTOrders = [];\r\n    var newRecord = dataSource.filter(item => {\r\n        for (let i = 0; i < selectedRowKeys.length; i++) {\r\n            if (selectedRowKeys[i] === item.ID) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    })\r\n    for (let i = 0; i < newRecord.length; i++) {\r\n        if (newRecord[i].BjStatus !== '已完成') {\r\n            message.warn(\"不能选择未完成的调度单\");\r\n            return;\r\n        }\r\n        LTOrders.push(newRecord[i].LTOrder);\r\n    }\r\n    for (let i = 0; i < newRecord.length; i++) {\r\n        for (let j = i + 1; j < newRecord.length; j++) {\r\n            if (newRecord[i].PlanDt !== newRecord[j].PlanDt) {\r\n                message.warn(\"不能选择计划月份不同的调度单\");\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    const { history } = this.props;\r\n    history.push({ pathname: \"/Admin/DdOrder/DdOrder_BjInfo2\", DIDS: selectedRowKeys.join(','), LTOrders: LTOrders.join(',') });\r\n\r\n}\r\n//机加需求\r\ndemantJj = () => {\r\n    //selectedRowKeys\r\n    const { dataSource, selectedRowKeys } = this.state;\r\n    var LTOrders = [];\r\n    var newRecord = dataSource.filter(item => {\r\n        for (let i = 0; i < selectedRowKeys.length; i++) {\r\n            if (selectedRowKeys[i] === item.ID) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    })\r\n    for (let i = 0; i < newRecord.length; i++) {\r\n        if (newRecord[i].JjStatus !== '已完成') {\r\n            message.warn(\"不能选择未完成的调度单\");\r\n            return;\r\n        }\r\n        LTOrders.push(newRecord[i].LTOrder);\r\n    }\r\n    for (let i = 0; i < newRecord.length; i++) {\r\n        for (let j = i + 1; j < newRecord.length; j++) {\r\n            if (newRecord[i].PlanDt !== newRecord[j].PlanDt) {\r\n                message.warn(\"不能选择计划月份不同的调度单\");\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    const { history } = this.props;\r\n    history.push({ pathname: \"/Admin/DdOrder/DdOrder_JjInfo\", DIDS: selectedRowKeys.join(','), LTOrders: LTOrders.join(',') });\r\n\r\n}\r\n//采购需求\r\ndemantCg = () => {\r\n    //selectedRowKeys\r\n    const { dataSource, selectedRowKeys } = this.state;\r\n    var LTOrders = [];\r\n    var newRecord = dataSource.filter(item => {\r\n        for (let i = 0; i < selectedRowKeys.length; i++) {\r\n            if (selectedRowKeys[i] === item.ID) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    })\r\n    for (let i = 0; i < newRecord.length; i++) {\r\n        if (newRecord[i].JjStatus !== '已完成') {\r\n            message.warn(\"不能选择<未完成>的调度单\");\r\n            return;\r\n        }\r\n        LTOrders.push(newRecord[i].LTOrder);\r\n    }\r\n    for (let i = 0; i < newRecord.length; i++) {\r\n        for (let j = i + 1; j < newRecord.length; j++) {\r\n            if (newRecord[i].PlanDt !== newRecord[j].PlanDt) {\r\n                message.warn(\"不能选择<计划月份>不同的调度单\");\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    for(let i=0;i<newRecord.length;i++){\r\n        if(newRecord[0].CgBaseTime!==newRecord[i].CgBaseTime){\r\n            message.warn(\"请选择<采购库存基准日期>相同的调度单\");\r\n            return;\r\n        }\r\n    }\r\n    let BaseTime = \"\";\r\n    if(newRecord[0].CgBaseTime!==\"\"){\r\n        BaseTime = moment(newRecord[0].CgBaseTime).format(\"YYYY/MM/DD\");\r\n    }\r\n    const { history } = this.props;\r\n    history.push({ pathname: \"/Admin/DdOrder/DdOrder_CgInfo\", DIDS: selectedRowKeys.join(','), LTOrders: LTOrders.join(','),BaseTime:BaseTime});\r\n\r\n}\r\n//更新采购需求基准日期\r\ndemantCgBaseTime = async ()=>{\r\n    //strKcDate YYYYMMDD\r\n    //strUserCode 不输入 \r\n    //iDID 1,2,3\r\n    const {CgBaseTime,selectedRowKeys,dataSource} = this.state;\r\n    if(CgBaseTime===\"\"){\r\n        message.warn(\"请选择采购库存基准日期\");\r\n        return;\r\n    }\r\n    if(selectedRowKeys===\"\" || selectedRowKeys.length===0){\r\n        message.warn(\"请选择要更新采购基准日期的调度单\");\r\n        return;\r\n    }\r\n    let datas = dataSource.filter(item=>selectedRowKeys.find(item2=>item2===item.ID));\r\n    const strKcDate = CgBaseTime.format(\"YYYYMMDD\");\r\n    datas = datas.find(item=>item.CgStatus!=='已完成');\r\n    if(datas!==undefined){\r\n        message.warn(\"请选择采购状态已完成的调度单\");\r\n        return;\r\n    }\r\n    let formData =  new FormData();\r\n    formData.append(\"strKcDate\",strKcDate);\r\n    formData.append(\"iDID\",selectedRowKeys.join(','));\r\n    this.setState({Btn_CgBaseload:true});\r\n    const result = await updateCgBaseBum(formData);\r\n    if(result.status === 0){\r\n        this.setState({Btn_CgBaseload:false});\r\n        message.success(\"库存更新成功\");\r\n    }else{\r\n        this.setState({Btn_CgBaseload:false});\r\n        message.error(\"服务器无响应\");\r\n    }\r\n}\r\nModalMsgHide = () => {\r\n    this.setState({ isModalMsgShow: false });\r\n\r\n}\r\n\r\ncomponentDidMount = async () => {\r\n    this.handleTableChange();\r\n    let Fuc_Edit=false,Fuc_Exe=false;\r\n        let Fuc_Bj=false,Fuc_Jj=false,Fuc_Cg=false;\r\n        let Fuc_BjExe,Fuc_JiExe,Fuc_CgExe;\r\n        const {pathname} = this.props.location;\r\n        this.Roles = await getPageRoles(pathname);\r\n        if(isOpt(this.Roles,\"编辑\")){\r\n            Fuc_Edit = true;\r\n        }\r\n        if(isOpt(this.Roles,\"需求计划执行\")){\r\n            Fuc_Exe = true;\r\n        }\r\n        if(isOpt(this.Roles,\"钣金需求报表\")){\r\n            Fuc_Bj = true;\r\n        }\r\n        if(isOpt(this.Roles,\"机加需求报表\")){\r\n            Fuc_Jj = true;\r\n        }\r\n        if(isOpt(this.Roles,\"采购需求报表\")){\r\n            Fuc_Cg = true;\r\n        }\r\n        if(isOpt(this.Roles,\"钣金执行\")){\r\n            Fuc_BjExe = true;\r\n        }\r\n        if(isOpt(this.Roles,\"机加执行\")){\r\n            Fuc_JiExe = true;\r\n        }\r\n        if(isOpt(this.Roles,\"采购执行\")){\r\n            Fuc_CgExe = true;\r\n        }\r\n        this.setState({Fuc_Edit,Fuc_Exe,Fuc_Bj,Fuc_Jj,Fuc_Cg,Fuc_BjExe,Fuc_JiExe,Fuc_CgExe});\r\n}\r\nrender() {\r\n    //判断权限\r\n\r\n    const DdOrder_columns = GetDdOrder_columns(this);\r\n    const { dataSource,Btn_CgBaseload, loading, SearchContation, ModalTitle, isModalEditShow, current, dataTotal, selectedRowKeys, selectedRowKeys2, isModalExeShow, isModalDetStatusShow, DataSource_DetStatus, isDetTools, isModalMsgShow ,Fuc_Edit,Fuc_Exe,Fuc_Bj,Fuc_Jj,Fuc_Cg,Fuc_BjExe,Fuc_JiExe,Fuc_CgExe} = this.state;\r\n    const rowSelection = {\r\n        selectedRowKeys,\r\n        columnWidth: 15,\r\n        onChange: this.onSelectChange,\r\n    }\r\n    const rowSelection2 = {\r\n        selectedRowKeys: selectedRowKeys2,\r\n        onChange: this.onSelectChange2,\r\n        selections: [\r\n            {\r\n                key: 'SELECT_ALL',\r\n                text: '全选',\r\n                onSelect: changableRowKeys => {\r\n                    this.setState({ selectedRowKeys2: changableRowKeys });\r\n                }\r\n            },\r\n            {\r\n                key: \"SELECT_INVERT\",\r\n                text: '反选',\r\n                onSelect: changableRowKeys => {\r\n                    const { selectedRowKeys2 } = this.state;\r\n                    let newSels = [];\r\n                    DataSource_DetStatus.forEach(item => {\r\n                        let flg = selectedRowKeys2.find(item2 => {\r\n                            return item2 === item.ID\r\n                        });\r\n                        if (flg === undefined) {\r\n                            newSels.push(item.ID);\r\n                        }\r\n                    })\r\n                    this.setState({ selectedRowKeys2: newSels });\r\n                }\r\n            },\r\n            {\r\n                key: 'SELECT_BJ',\r\n                text: '钣金异常全选',\r\n                onSelect: changableRowKeys => {\r\n                    this.onSelectDet_Error(DataSource_DetStatus, \"BjStatus\");\r\n                }\r\n            },\r\n            {\r\n                key: 'SELECT_JJ',\r\n                text: '机加异常全选',\r\n                onSelect: changableRowKeys => {\r\n                    this.onSelectDet_Error(DataSource_DetStatus, \"JjStatus\");\r\n                }\r\n            },\r\n            {\r\n                key: 'SELECT_CG',\r\n                text: '采购异常全选',\r\n                onSelect: changableRowKeys => {\r\n                    this.onSelectDet_Error(DataSource_DetStatus, \"CgStatus\");\r\n                }\r\n            }\r\n        ]\r\n    }\r\n    //selectedRowKeys2\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"toolArea\">\r\n                    {Fuc_Edit?<Button type=\"primary\" onClick={() => this.ExcelIn()}>导入调度单</Button>:\"\"}\r\n                    {Fuc_Edit?\" \":\"\"}\r\n                    <Button type=\"primary\" onClick={() => this.OrderDet()} >调度单明细</Button>\r\n                    &emsp;\r\n                    {Fuc_Exe?<Button type=\"primary\" onClick={() => this.demantExe()} >需求计划执行</Button>:\"\"}\r\n                    {Fuc_Exe?\" \":\"\"}\r\n                    {Fuc_Bj?<Button type=\"primary\" onClick={() => this.demantBj()} >钣金需求报表</Button>:\"\"}\r\n                    {Fuc_Bj?\" \":\"\"}\r\n                    {Fuc_Jj?<Button type=\"primary\" onClick={() => this.demantJj()} >机加需求报表</Button>:\"\"}\r\n                    {Fuc_Jj?\" \":\"\"}\r\n                    {Fuc_Cg?<Button type=\"primary\" onClick={() => this.demantCg()} >采购需求报表</Button>:\"\"}\r\n                    {/* {Fuc_Cg?\" \":\"\"}\r\n                    {Fuc_Cg?<Button type=\"primary\" loading={Btn_CgBaseload} onClick={() => this.demantCgBaseTime()} >更新采购库存基准日期</Button>:\"\"}\r\n                    {Fuc_Cg?\" \":\"\"}\r\n                    {Fuc_Cg?<DatePicker locale={locale}  format=\"YYYYMMDD\" onChange={(val)=>this.setState({CgBaseTime:val})}></DatePicker>:\"\"} */}\r\n                    <p style={{ textAlign: \"left\", fontSize: \"22px\" }}>\r\n                        当前查询条件:\r\n                        {SearchContation.LTOrder ? \"订单号:\" + SearchContation.LTOrder + \"\" : \"\"}\r\n                        &emsp;\r\n                        {SearchContation.Faline ? \"产线:\" + SearchContation.Faline + \"\" : \"\"}\r\n                        &emsp;\r\n                        {SearchContation.status ? \"是否生效:\" + SearchContation.status : \"\"}\r\n                </p>\r\n            </div>\r\n            <Table\r\n                rowSelection={rowSelection}\r\n                dataSource={dataSource}\r\n                bordered\r\n                rowKey=\"ID\"\r\n                sticky={true}\r\n                columns={DdOrder_columns}\r\n                size=\"middle\"\r\n                loading={loading}\r\n                pagination={{\r\n                    position: ['bottomCenter'],\r\n                    pageSizeOptions: [20],\r\n                    current: current,\r\n                    total: dataTotal,\r\n                    showTotal: (total, range) => `一共 ${total} 条数据`,\r\n                    pageSize: 20,\r\n                    // onChange:(page,pageSize)=>{\r\n                    //     this.handleTableChange({page:page,pageSize:pageSize});\r\n                    // }\r\n                }}\r\n                onChange={this.handleTableChange}\r\n            >\r\n            </Table>\r\n            <Modal title={ModalTitle} visible={isModalEditShow} onOk={() => this.ModalEditOk()} onCancel={() => this.ModalEditCancel()} >\r\n                <Form ref={this.formRef}  {...this.layout} >\r\n                    <Form.Item\r\n                        name=\"LTOrder\"\r\n                        label=\"调度单号\"\r\n                    >\r\n                        <Input readOnly />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        name=\"Faline\"\r\n                        label=\"产线\"\r\n                        defaultValue=\"南线\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: '请输入产线'\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Select>\r\n                            <Select.Option value=\"南线\">\r\n                                南线\r\n                            </Select.Option>\r\n                            <Select.Option value=\"北线\">\r\n                                北线\r\n                            </Select.Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                    {/* <Form.Item\r\n                            name=\"status\"\r\n                            label=\"生效\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: '请输入选择'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Select defaultValue=\"是\">\r\n                                <Option value=\"是\">是</Option>\r\n                                <Option value=\"否\">否</Option>\r\n                            </Select>\r\n                        </Form.Item> */}\r\n                </Form>\r\n            </Modal>\r\n            <Modal title=\"需求计划执行\" visible={isModalExeShow} onOk={() => this.ModalExeOk()} onCancel={() => this.ModalExeCancel()} >\r\n                <Form ref={this.formRef2}>\r\n                    <Form.Item\r\n                        name=\"dt\"\r\n                        label=\"期初库存日期\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: '请输入期初库存日期'\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <DatePicker locale={locale} format=\"YYYYMMDD\"  ></DatePicker>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n            <Modal title=\"\" width={1000} visible={isModalDetStatusShow} onOk={() => this.ModalDetStatusCancel()} onCancel={() => this.ModalDetStatusCancel()}>\r\n                <div style={{ maxHeight: \"700px\", overflowY: \"scroll\" }}>\r\n                    {\r\n                        isDetTools ?\r\n                            <div style={{ textAlign: \"right\", marginBottom: \"10px\", marginTop: \"10px\" }}>\r\n                                <DatePicker locale={locale} onChange={(val) => this.statusDt = val} format=\"YYYYMMDD\" defaultValue={moment()} placeholder=\"选择计划日期\" ></DatePicker>\r\n                            &nbsp;\r\n                            {Fuc_BjExe?<Button type=\"primary\" onClick={() => this.demantExe_Det(\"BJ\")} >钣金需求计划执行</Button>:\"\"}\r\n                            &nbsp;\r\n                            {Fuc_JiExe?<Button type=\"primary\" onClick={() => this.demantExe_Det(\"JJ\")}>机加需求计划执行</Button>:\"\"}\r\n                            &nbsp;\r\n                            {Fuc_CgExe?<Button type=\"primary\" onClick={() => this.demantExe_Det(\"CG\")}>采购需求计划执行</Button>:\"\"}\r\n                            &nbsp;\r\n                        </div>\r\n                            :\r\n                            <div style={{ textAlign: \"right\", marginBottom: \"10px\", marginTop: \"10px\" }}>\r\n                                <h1>需求计划执行中。</h1>\r\n                            </div>\r\n                    }\r\n\r\n                    <Table\r\n                        rowSelection={rowSelection2}\r\n                        sticky={true}\r\n                        rowKey=\"ID\"\r\n                        bordered\r\n                        dataSource={DataSource_DetStatus}\r\n                        columns={GetDdOrder_Det_Status(this)}\r\n                        size=\"middle\"\r\n                        pagination={false}\r\n                    >\r\n\r\n                    </Table>\r\n                </div>\r\n\r\n            </Modal>\r\n            <Modal visible={isModalMsgShow} onOk={() => this.ModalMsgHide()} onCancel={() => this.ModalMsgHide()} >\r\n            需求计划执行中\r\n                </Modal>\r\n        </div>\r\n    )\r\n}\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrderExcel\\index.jsx",["209"],"import React, { Component } from 'react'\r\nimport { Table, Form, DatePicker, Input, Select, Button, Upload, message, Modal, Spin} from 'antd'\r\nimport moment from 'moment'\r\nimport 'moment/locale/zh-cn';\r\nimport locale from 'antd/es/date-picker/locale/zh_CN';\r\nimport LinkButton from '../../components/link-button';\r\nimport XLSX from 'xlsx'\r\nimport { UploadOutlined, CheckCircleTwoTone, ArrowLeftOutlined } from '@ant-design/icons';\r\n//引入工具\r\nimport {downloadDemoFile} from '../../utils'\r\n//引入api\r\nimport { submitDdOrder } from '../../api'\r\n//引入配置\r\nimport { DdOrder_Det_columns } from '../../config/table-columns'\r\nconst { confirm } = Modal;\r\nexport default class DdOrderExcel extends Component {\r\n    formRef = React.createRef();\r\n    state = {\r\n        dataSource: [],\r\n        loading: false,\r\n        uploading: false,\r\n        uploadState: 0,\r\n    }\r\n    key = 0;\r\n    loadExcelUp = false\r\n    attes = {\r\n        name: 'file',\r\n        headers: { authorization: 'authorization-text' },\r\n        showUploadList: false,\r\n        beforeUpload: (file) => {\r\n            if (file.name.lastIndexOf('.xls') === -1 && file.name.lastIndexOf('.xlsx') === -1) {\r\n                message.error(\"请上传Excel文件\");\r\n                return false;\r\n            }\r\n            const columns = DdOrder_Det_columns();\r\n            const fileReader = new FileReader();\r\n            this.setState({ loading: true })\r\n            fileReader.onload = (event, _this) => {\r\n                try {\r\n                    const { result } = event.target;\r\n                    const workbook = XLSX.read(result, { type: 'binary', cellDates: true });\r\n                    let data = []; // 存储获取到的数据\r\n                    var flg = false;\r\n                    for (const sheet in workbook.Sheets) {\r\n                        if (workbook.Sheets.hasOwnProperty(sheet)) {\r\n                            // 利用 sheet_to_json 方法将 excel 转成 json 数据\r\n                            data = data.concat(XLSX.utils.sheet_to_json(workbook.Sheets[sheet]));\r\n                            \r\n                            data = data.map((item,index) => {\r\n                                let single = {}\r\n                                for(var key in item){\r\n                                    var newKey = key.replaceAll(' ','');\r\n                                    var newVal = item[key];\r\n                                    delete item[key];\r\n                                    item[newKey] = newVal;\r\n                                }\r\n                                columns.forEach((item2,index2) => {\r\n                                    if (item[item2.title] !== undefined) {\r\n                                        if (item2.title.indexOf('日期') !== -1 || item2.title.indexOf('时间') !== -1) {\r\n                                            if (item[item2.title] instanceof Date) {\r\n                                                single[item2.dataIndex] = moment(item[item2.title]).format('YYYYMMDD');\r\n                                            }else if((item[item2.title]+\"\").indexOf('/') !== -1 ){\r\n                                                var dts = item[item2.title].split('/');\r\n                                                var YYYYMMDD = dts[0];\r\n                                                if(dts[1].length===1){\r\n                                                    dts[1] = 0 + dts[1];\r\n                                                }\r\n                                                if(dts[2].length===1){\r\n                                                    dts[2] = 0 + dts[2];\r\n                                                }\r\n                                                YYYYMMDD +=dts[1] +dts[2]\r\n                                                single[item2.dataIndex] = YYYYMMDD;\r\n                                            }  else {\r\n                                                if((item[item2.title]+\"\").length!==8){\r\n                                                    console.dir(item[item2.title]+\",\"+index);\r\n                                                    message.error(\"日期位数不对,无法导入,发生在第\"+(index+1)+\"行,\"+(index2+1)+\"列\");\r\n                                                    flg = true;\r\n                                                }\r\n                                                single[item2.dataIndex] = item[item2.title]\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            single[item2.dataIndex] = item[item2.title]\r\n                                        }\r\n\r\n                                    }\r\n                                })\r\n                                \r\n                                single.key = \"key\" + (this.key++)\r\n                                return single\r\n                            })\r\n                            if(flg){\r\n                                return;\r\n                            }\r\n                        }\r\n                        //只读一张表\r\n                        break;\r\n                    }\r\n\r\n                    this.setState({ dataSource: data, uploadState: 1 });\r\n                } catch (e) {\r\n                    message.error(\"请上传Excel文件\");\r\n                    throw e;\r\n                }\r\n            }\r\n            this.setState({ loading: true })\r\n            fileReader.readAsBinaryString(file, this);\r\n            return false;\r\n        }\r\n    }\r\n    //提交整个调度单\r\n    DdExcelUp = async () => {\r\n        if (this.loadExcelUp) {\r\n            message.warn(\"文件上传中,请勿重复提交\");\r\n            return;\r\n        }\r\n        const { dataSource } = this.state;\r\n        if (dataSource.length <= 0) {\r\n            message.warn(\"请先提交Excel\");\r\n            return;\r\n        }\r\n        \r\n        const form = this.formRef.current;\r\n        try {\r\n            await form.validateFields();\r\n        } catch (errorInfo) {\r\n            console.dir(errorInfo);\r\n            message.warn(\"请验证数据完整性\")\r\n            return;\r\n        }\r\n\r\n        //头部数据打包\r\n        const HeadData = { ...form.getFieldsValue(true) };\r\n\r\n        const fomrData = new FormData();\r\n        HeadData.PlanDt = moment(HeadData.PlanDt).format(\"YYYYMM\");\r\n        //\r\n        fomrData.append(\"HeadData\", JSON.stringify(HeadData));\r\n        //明细数据打包\r\n\r\n        const SubmitData = dataSource.map(item => {\r\n            return item;\r\n        })\r\n        let i = 0;\r\n        for (; i < SubmitData.length; i++) {\r\n            delete SubmitData[i].TbIndex;\r\n            //检查投产日期和计划月份是否相同 Datetime1,HeadData.PlanDt\r\n            // if((SubmitData[i].Datetime1+\"\").indexOf(HeadData.PlanDt)===-1){\r\n            //     message.warn('请检查Excel的投产日期，和计划月份不同');\r\n            //     return;\r\n            // }\r\n            fomrData.append(`list[${i}]`, JSON.stringify(SubmitData[i]))\r\n        }\r\n        fomrData.append(\"Count\", i);\r\n        this.loadExcelUp = true;\r\n        this.setState({uploading:true})\r\n        try {\r\n            const result = await submitDdOrder(fomrData);\r\n            if (result.status === 0) {\r\n                confirm({\r\n                    icon: <CheckCircleTwoTone twoToneColor=\"#52c41a\" />,\r\n                    title: 'Excel上传成功，请勿重复上传',\r\n                    okText: '确认',\r\n                })\r\n                this.setState({ dataSource: [] })\r\n                this.loadExcelUp = false;\r\n            } else if (result.status === 2) {\r\n                message.error(\"SAP接口错误\");\r\n                this.loadExcelUp = false;\r\n            } else if (result.status === 3) {\r\n                console.dir(result.msg);\r\n                message.error(\"物料编码错误，请检查:\"+JSON.stringify(result.msg));\r\n                this.loadExcelUp = false;\r\n            } else {\r\n                message.error(\"网络错误\");\r\n                this.loadExcelUp = false;\r\n            }\r\n        } catch {\r\n            this.loadExcelUp = false;\r\n            this.setState({uploading:false})\r\n        } finally {\r\n            this.loadExcelUp = false;\r\n            this.setState({uploading:false})\r\n        }\r\n\r\n    }\r\n    DownLoadDemo = ()=>{\r\n        downloadDemoFile(\"调度单模板.xls\");\r\n    }\r\n    handleBack = () => {\r\n        const { history } = this.props;\r\n        history.goBack();\r\n    }\r\n    render() {\r\n        const { dataSource,uploading} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"toolArea\">\r\n                    <Form ref={this.formRef} layout=\"inline\" initialValues={{ Faline: '南线' }}>\r\n                        <Form.Item>\r\n                            <LinkButton onClick={() => this.handleBack()}>\r\n                                <ArrowLeftOutlined />返回调度单\r\n                            </LinkButton>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            label=\"计划月份:\"\r\n                            name=\"PlanDt\"\r\n                            rules={\r\n                                [\r\n                                    {\r\n                                        required: true,\r\n                                        message: '请选择计划月份'\r\n                                    }\r\n                                ]\r\n                            }\r\n                        >\r\n                            <DatePicker locale={locale} picker=\"month\" />\r\n                        </Form.Item>\r\n                        {/* 只能两位 */}\r\n                        <Form.Item\r\n                            label=\"序号\"\r\n                            name=\"NO\"\r\n                            rules={\r\n                                [\r\n                                    {\r\n                                        required: true,\r\n                                        message: '请输入序号'\r\n                                    }\r\n                                ]\r\n                            }\r\n                        >\r\n                            <Input type=\"number\"></Input>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"产线\"\r\n                            name=\"Faline\"\r\n                            rules={\r\n                                [\r\n                                    {\r\n                                        required: true,\r\n                                        message: '请输入产线'\r\n                                    }\r\n                                ]\r\n                            }\r\n\r\n                        >\r\n                            <Select>\r\n                                <Select.Option value=\"南线\">南线</Select.Option>\r\n                                <Select.Option value=\"北线\">北线</Select.Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Upload {...this.attes}>\r\n                                <Button icon={<UploadOutlined />}>Excel导入</Button>\r\n                            </Upload>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" onClick={() => this.DdExcelUp()}>生单</Button>\r\n                            &nbsp;\r\n                            <Button type=\"primary\" onClick={()=>this.DownLoadDemo()}>模板下载</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <Table\r\n                    dataSource={dataSource}\r\n                    rowKey=\"key\"\r\n                    bordered\r\n                    columns={DdOrder_Det_columns()}\r\n                    pagination={false}\r\n                    size=\"small\"\r\n                >\r\n                </Table>\r\n                <Spin style={{position:'absolute',left:'48%',top:'47%'}} tip=\"数据上传中...\" spinning={uploading}>\r\n                </Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrderDet\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_CgInfo\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_JjInfo\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_BjInfo\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_BjInfo2\\index.jsx",["210"],"import React, { Component } from 'react'\r\n//引入antd\r\nimport { Button, Table,Form,Input,Spin} from 'antd'\r\nimport moment from 'moment'\r\n//自定义组件\r\nimport LinkButton from '../../components/link-button';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\n//引入api\r\nimport { getV_Sum_Num_BjInfo2,getV_BjInfo } from '../../api'\r\n//引入工具类\r\nimport { ConvertFomrData,downloadExcel} from '../../utils'\r\n//引入配置\r\nimport { DdOrder_BjInfo_First,V_BjInfo_columns} from '../../config/table-columns'\r\n//引入样式\r\nimport './index.less'\r\n//引入缓存\r\nimport store from 'store'\r\nexport default class DdOrder_BjInfo2 extends Component {\r\n    formRef = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        var { DIDS, LTOrders } = this.props.location;\r\n        if (DIDS === undefined || LTOrders === undefined) {\r\n            DIDS = store.get(\"DdOrder_BjInfo_DIDS\");\r\n            LTOrders = store.get(\"DdOrder_BjInfo_LTOrders\");\r\n        } else {\r\n            store.set(\"DdOrder_BjInfo_DIDS\", DIDS);\r\n            store.set(\"DdOrder_BjInfo_LTOrders\", LTOrders);\r\n        }\r\n        this.state = {\r\n            DIDS:DIDS,\r\n            LTOrders:LTOrders,\r\n            dataSource: [],\r\n            loading: true,\r\n            SearchContation: {},\r\n            current: 1,\r\n            dataTotal: 0,\r\n            ExcelLoading: false,\r\n            model: 0,\r\n            expandRowKeys: [],\r\n            searchText:'',\r\n            SpinTip:'',\r\n            \r\n        }\r\n    }\r\n    //处理表格查询功能\r\n    handleSearch = (selectedKeys, confirm, dataIndex)=>{\r\n        const {SearchContation} = this.state;\r\n        confirm({ closeDropdown: false })\r\n        var filters = {};\r\n        if(selectedKeys[0]!==undefined){\r\n            filters[dataIndex] = selectedKeys[0];\r\n            this.handleTableChange({},filters,{},0);\r\n        }else{\r\n            SearchContation[dataIndex]=\"\";\r\n            this.handleTableChange({},{},{},0);\r\n        }\r\n    }\r\n    //重置\r\n    handleReset = clearFilters=>{\r\n        clearFilters();\r\n        this.setState({ searchText: '' });\r\n    }\r\n    handleTableChange = async (pagination = {}, filters = {}, sorter = {},model) => {\r\n        let { SearchContation,DIDS } = this.state;\r\n        console.dir(filters);\r\n        if (pagination.current === undefined) {\r\n            SearchContation.page = 1;\r\n            SearchContation.pageSize = 100;\r\n        } else {\r\n            SearchContation.page = pagination.current;\r\n            SearchContation.pageSize = pagination.pageSize;\r\n        }\r\n        //添加条件\r\n        if (filters !== {}) {\r\n            for (let key in filters) {\r\n                SearchContation[key] = filters[key];\r\n            }\r\n        }\r\n        // 添加层级的条件\r\n        // if(this.SearchSelect !==undefined && this.SearchSelect.value!==undefined){\r\n        //     SearchContation[\"level\"] = this.SearchSelect.value;\r\n        // }\r\n        // if(this.SearchSelect2 !==undefined && this.SearchSelect2.value!==undefined){\r\n        //     SearchContation[\"level2\"] = this.SearchSelect2.value;\r\n        // }\r\n        //添加表单的条件b\r\n        const formReftemp = this.formRef.current;\r\n        var tempFormData = formReftemp.getFieldsValue(true);//当前查询条件\r\n        //创建提交后台数据\r\n        SearchContation.DIDS = DIDS;\r\n        //console.dir(tempFormData.Series);\r\n        // if((tempFormData.Series===\"\" || tempFormData.Series===undefined) && model===1){\r\n        //     message.warn(\"请输入系列，再查询\");\r\n        //     return;\r\n        // }\r\n        if(tempFormData.Series!==\"\" && tempFormData.Series!==undefined){\r\n            SearchContation.model=1;\r\n        }\r\n        SearchContation = {...SearchContation,...tempFormData}\r\n        const formData = ConvertFomrData(SearchContation);\r\n        this.setState({ loading: true });\r\n        //Pline\r\n        const result = await getV_Sum_Num_BjInfo2(formData);\r\n        if (result.status === 0) {\r\n            const { V_BjInfo } = result.data;\r\n            console.dir(V_BjInfo);\r\n            //console.dir(V_BjInfo);\r\n            if (V_BjInfo.length === 0) {\r\n                //console.dir(V_BjInfo.length);\r\n                this.setState({ dataSource: [], current: 1, dataTotal: 0, loading: false });\r\n            } else {\r\n                //console.dir(\"index\");\r\n                //val.replace(/\\b(0+)/gi,\"\")\r\n                V_BjInfo.forEach(item => {\r\n                    item.FirstCode = item.FirstCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.SecondCode = item.SecondCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.ThirdCode = item.ThirdCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.FourthCode = item.FourthCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.FifthCode = item.FifthCode.replace(/\\b(0+)/gi, \"\");\r\n                })\r\n                this.Arr = [];\r\n                this.expandRowKeys2 = [];\r\n                this.deepTree(V_BjInfo, 0, {});\r\n                //console.dir(this.expandRowKeys);\r\n                let tempSource = this.Arr.slice(0,9);\r\n                this.setState({ dataSource: tempSource, current:1,dataTotal:this.Arr.length ,loading: false,expandRowKeys: this.expandRowKeys2,SearchContation:SearchContation});\r\n            }\r\n        }\r\n    }\r\n    //回退功能\r\n    handleBack = () => {\r\n        const { history } = this.props;\r\n        history.goBack();\r\n    }\r\n    //Direction Right Down Left\r\n    Codes = [\"FirstCode\", \"SecondCode\", \"ThirdCode\", \"FourthCode\", \"FifthCode\",\"SixthCode\"];\r\n    CodesName = [\"FirstName\", \"SecondName\", \"ThirdName\", \"FourthName\", \"FifthName\",\"SixthName\"];\r\n    Arr = [];\r\n    expandRowKeys2 = [];\r\n    //处理后台钣金的数据\r\n    deepTree(data, index, pre) {\r\n        if (index >= data.length) {\r\n            return;\r\n        }\r\n        let Current = data[index];\r\n        let keyIndex = 0;\r\n        //var preNode = {};\r\n        var nowNode = {};\r\n        var CurrentNode = {};\r\n        var flg = false;//后面是否都是新插入 \r\n        let key;\r\n        let NameKey;\r\n        //let tempNode = {\"Code\":Current[key],\"Num\":Current[\"Num\"+keyIndex],\"children\":childrenNode};\r\n        //处理第一次空的插入\r\n        if (pre === {}) {\r\n            for (; keyIndex < this.Codes.length; keyIndex++) {\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                //\r\n                let tempNode = { Code: Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], Num: Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey],Pline1:Current[\"Pline1\"], children: [] };\r\n                if (keyIndex === 0) {\r\n                    pre = tempNode;\r\n                    nowNode = tempNode;\r\n                    this.Arr.push(nowNode);\r\n                    this.expandRowKeys2.push(nowNode.Code);\r\n                } else {\r\n                    nowNode.children.push(tempNode);\r\n                    nowNode = tempNode;\r\n                }\r\n            }\r\n            keyIndex = 0;\r\n            index += 1;\r\n            Current = data[index];\r\n        }\r\n        //判断是否要新插入\r\n        key = this.Codes[0];\r\n        NameKey = this.CodesName[0];\r\n        if (Current[key] !== pre[\"Code\"]) {//新插入\r\n            let tempNode = { \"Code\": Current[key], Code2: (1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + 1], Name: Current[NameKey], Pline1:Current[\"Pline1\"],\"children\": [] };\r\n            CurrentNode = tempNode;\r\n            this.Arr.push(CurrentNode);\r\n            this.expandRowKeys2.push(CurrentNode.Code);\r\n            flg = true;\r\n        }\r\n        if (flg) {//全是新插入\r\n            for (keyIndex = 1; keyIndex < this.Codes.length; keyIndex++) {\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                if (Current[key] !== \"\") {\r\n                    let tempNode = { \"Code\": Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], Pline1:Current[\"Pline\"+(keyIndex+1)],Pline2:Current[\"Pline2\"], Pline3:Current[\"Pline3\"], Pline4:Current[\"Pline4\"],Pline5:Current[\"Pline5\"], \"children\": [] };\r\n                    CurrentNode.children.push(tempNode);\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    CurrentNode = tempNode;\r\n                }\r\n\r\n            }\r\n        } else {//不是全部都是全新插入 \r\n            //寻找第一个Code不同的点\r\n            for (keyIndex = 1; keyIndex < this.Codes.length; keyIndex++) {\r\n                //undefined\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                if (Current[key] === \"\") {\r\n                    break;\r\n                }\r\n                if (flg) {//后面全是新插入\r\n                    if (Current[key] === \"\") {\r\n                        break;\r\n                    }\r\n                    let tempNode = { \"Code\": Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey],Pline1:Current[\"Pline\"+(keyIndex + 1)],\"children\": [] };\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    pre.children.push(tempNode);\r\n                    pre = tempNode;\r\n                    continue;\r\n                }\r\n                let tempNode = pre.children.find(item => {\r\n                    if (item[\"Code\"] === \"\") {\r\n                        return false;\r\n                    }\r\n                    if (Current[key] === item[\"Code\"]) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                })\r\n                if (tempNode === undefined) {//需要新插入\r\n                    if (Current[key] === \"\") {\r\n                        break;\r\n                    }\r\n                    tempNode = { Code: Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], Pline1:Current[\"Pline\"+(keyIndex + 1)],\"children\": [] };\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    pre.children.push(tempNode);\r\n                    pre = tempNode;\r\n                    flg = true;\r\n                } else {//不需要新插入\r\n                    pre = tempNode;\r\n                }\r\n            }\r\n        }\r\n        this.deepTree(data, index + 1, this.Arr[this.Arr.length - 1]);\r\n    }\r\n\r\n    OpenOrCloseSingle = (record, type) => {\r\n        let { expandRowKeys } = this.state;\r\n        if (type) {\r\n            expandRowKeys.push(record.Code);\r\n        } else {\r\n            expandRowKeys = expandRowKeys.filter(item => {\r\n                if (item === record.Code) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n        }\r\n        this.setState({ expandRowKeys });\r\n    }\r\n    ExpandRow = (type) => {\r\n        const { dataSource } = this.state;\r\n        let expandRowKeys = [];\r\n        for (let i = 0; i < type; i++) {\r\n            if (i === 0) {\r\n                expandRowKeys = [];\r\n            }\r\n            if (i === 1) {\r\n                let tempKeys = dataSource.map(item => item.Code)\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 2) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        tempKeys.push(item2.Code);\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 3) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        item2.children.forEach(item3 => tempKeys.push(item3.Code))\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 4) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        item2.children.forEach(item3 => {\r\n                            item3.children.forEach(item4 => tempKeys.push(item4.Code))\r\n                        })\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n\r\n            if (i === 5) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        item2.children.forEach(item3 => {\r\n                            item3.children.forEach(item4 => {\r\n                                item4.children.forEach(item5=>tempKeys.push(item5.Code))\r\n                            })\r\n                        })\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n        }\r\n        this.setState({ expandRowKeys })\r\n    }\r\n    ExcelOut = async ()=>{\r\n        const {SearchContation} = this.state;\r\n        const ColumsWch = [\r\n            {wch:10},//日期\r\n            {wch:20},//一层编码\r\n            {wch:45},//一层名称\r\n            {wch:10},//一层数量\r\n            {wch:10},//一层工艺\r\n            {wch:20},//二层编码\r\n            {wch:45},//二层名称\r\n            {wch:10},//二层数量\r\n            {wch:10},//二层工艺\r\n            {wch:20},//三层编码\r\n            {wch:45},//三层名称\r\n            {wch:10},//三层数量\r\n            {wch:10},//三层工艺\r\n            {wch:20},//四层编码\r\n            {wch:45},//四层名称\r\n            {wch:10},//四层数量\r\n            {wch:10},//四层工艺\r\n            {wch:20},//五层编码\r\n            {wch:45},//五层名称\r\n            {wch:10},//五层数量\r\n            {wch:10},//五层工艺\r\n            {wch:20},//六层编码\r\n            {wch:45},//六层名称\r\n            {wch:10},//六层数量\r\n            {wch:10},//六层工艺\r\n            {wch:10},//系列\r\n          ]\r\n        this.setState({SpinTip:'Excel导出中，请等待',ExcelLoading:true});\r\n        SearchContation.page = 1;\r\n        SearchContation.pageSize = 999999;\r\n        const formData = ConvertFomrData(SearchContation);\r\n        //\r\n        const result = await getV_BjInfo(formData);\r\n        if(result.status===0){\r\n            const {V_BjInfo} = result.data;\r\n            \r\n            V_BjInfo.forEach(item=>{\r\n                item.Datetime1 = moment(item.Datetime1).format(\"YYYYMMDD\");\r\n            })\r\n            console.dir(V_BjInfo);\r\n            downloadExcel(V_BjInfo,V_BjInfo_columns,ColumsWch,\"钣金需求单\");\r\n            this.setState({SpinTip:'Excel导出中，请等待',ExcelLoading:false});\r\n        }\r\n    }\r\n    componentDidMount = async () => {\r\n        this.handleTableChange();\r\n    }\r\n    render() {\r\n        const { dataSource, loading, expandRowKeys ,SearchContation,current,dataTotal,SpinTip,ExcelLoading,LTOrders} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <div style={{margin:'10px',float:\"left\",width:'80%'}}>\r\n                    <Form layout=\"inline\" ref={this.formRef}>\r\n                        <Form.Item>\r\n                            <LinkButton onClick={() => this.handleBack()}>\r\n                                <ArrowLeftOutlined />返回调度单\r\n                            </LinkButton>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"系列\"\r\n                            name=\"Series\"\r\n                            style={{width:'160px'}}\r\n                        >\r\n                            <Input placeholder=\"默认所有系列\"></Input>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" onClick={()=>this.handleTableChange({},{},{},1)}>查询</Button>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button onClick={() => { this.ExpandRow(1) }}>查看第一层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(2) }}>查看第二层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(3) }}>查看第三层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(4) }}>查看第四层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(5) }}>查看第五层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(6) }}>查看第六层</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div style={{float:'left',textAlign:'right',width:'16%'}}>\r\n                    <Button type=\"primary\" onClick={()=>this.ExcelOut()}>导出Excel</Button>\r\n                </div>\r\n                <div style={{float:\"left\",width:\"100%\"}}>\r\n                    <h2 style={{float:\"left\"}}>调度单:{LTOrders}</h2>\r\n                    {\r\n                    SearchContation.FirstCode===\"\"||SearchContation.FirstCode===undefined?\"\":\r\n                        <h2 style={{float:\"left\"}}>物料编码:{SearchContation.FirstCode}&nbsp;</h2>\r\n                    }\r\n                    {\r\n                        SearchContation.FirstName===\"\"||SearchContation.FirstName===undefined?\"\":\r\n                        <h2 style={{float:\"left\"}}>物料名称:{SearchContation.FirstName}</h2>\r\n                    }\r\n                    {\r\n                        SearchContation.Pline===\"\"||SearchContation.Pline===undefined?\"\":\r\n                        <h2 style={{float:\"left\"}}>状态:{SearchContation.Pline}</h2>\r\n                    }\r\n                </div>\r\n                <Table\r\n                    dataSource={dataSource}\r\n                    bordered\r\n                    rowKey=\"Code\"\r\n                    sticky={true}\r\n                    scroll={{ y: 600 }}\r\n                    size=\"small\"\r\n                    columns={DdOrder_BjInfo_First(this)}\r\n                    loading={loading}\r\n                    indentSize={15}\r\n                    onRow={record => {\r\n                        return {\r\n                            onMouseEnter: event => { },\r\n                            onMouseLeave: event => { }\r\n                        }\r\n                    }}\r\n                    expandable={{\r\n                        expandedRowKeys: expandRowKeys,\r\n                        onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                    }}\r\n                    pagination={{\r\n                        position: ['bottomCenter'],\r\n                        pageSizeOptions:[10],\r\n                        current:current,\r\n                        total:dataTotal,\r\n                        showTotal:(total, range) => `一共 ${total} 条数据`,\r\n                        pageSize:10,\r\n                        onChange:(page,pageSize)=>{\r\n                            let start = (page-1)*pageSize;\r\n                            let end = (page)*pageSize;\r\n                            if(this.Arr.length!==0){\r\n                                if(end>this.Arr.length){\r\n                                    end = this.Arr.length;\r\n                                }\r\n                                let tempArr = this.Arr.slice(start,end-1);\r\n                                this.setState({dataSource:tempArr,current:page});\r\n                            }\r\n                            //this.Arr\r\n                            //this.handleTableChange({page:page,pageSize:pageSize});\r\n                        }\r\n                    }}\r\n                // expandable={{\r\n                //     expandRowByClick: true,\r\n                //     expandedRowRender,\r\n                //     columnWidth: 3,\r\n                //     indentSize: 0,\r\n                //     expandedRowKeys: expandRowKeys1,\r\n                //     onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                // }}\r\n                >\r\n\r\n                </Table>\r\n                <Spin style={{ position: 'absolute', left: '48%', top: '47%' }} tip={SpinTip} spinning={ExcelLoading}></Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report2_1\\index.jsx",["211"],"import React, { Component } from 'react'\r\n//引入antd\r\nimport { Button, Table,Form,Input,Spin} from 'antd'\r\nimport moment from 'moment'\r\n//引入api\r\nimport { getV_Sum_Num_BjInfo2,getV_BjInfo } from '../../api'\r\n//引入工具类\r\nimport { ConvertFomrData,downloadExcel } from '../../utils'\r\n//引入配置\r\nimport { DdOrder_BjInfo_First,V_BjInfo_columns} from '../../config/table-columns'\r\n//引入样式\r\nimport './index.less'\r\n//钣金 该页面只要传用户ID即可 在api内已经嵌入了该用户ID了因此不需要\r\nexport default class Report2_1 extends Component {\r\n    formRef = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataSource: [],\r\n            loading: true,\r\n            SearchContation: {},\r\n            current: 1,\r\n            dataTotal: 0,\r\n            ExcelLoading: false,\r\n            model: 0,\r\n            expandRowKeys: [],\r\n            searchText:'',\r\n            SpinTip:'',\r\n            level:'',\r\n            level2:'',\r\n        }\r\n    }\r\n    //处理表格查询功能\r\n    handleSearch = (selectedKeys, confirm, dataIndex)=>{\r\n        const {SearchContation} = this.state;\r\n        confirm({ closeDropdown: false })\r\n        var filters = {};\r\n        if(selectedKeys[0]!==undefined){\r\n            filters[dataIndex] = selectedKeys[0];\r\n            this.handleTableChange({},filters,{},0);\r\n        }else{\r\n            SearchContation[dataIndex]=\"\";\r\n            this.handleTableChange({},{},{},0);\r\n        }\r\n    }\r\n    //重置\r\n    handleReset = clearFilters=>{\r\n        clearFilters();\r\n        this.setState({ searchText: '' });\r\n    }\r\n    handleTableChange = async (pagination = {}, filters = {}, sorter = {},model) => {\r\n        let { SearchContation } = this.state;\r\n        console.dir(filters);\r\n        if (pagination.current === undefined) {\r\n            SearchContation.page = 1;\r\n            SearchContation.pageSize = 100;\r\n        } else {\r\n            SearchContation.page = pagination.current;\r\n            SearchContation.pageSize = pagination.pageSize;\r\n        }\r\n        //添加条件\r\n        if (filters !== {}) {\r\n            for (let key in filters) {\r\n                SearchContation[key] = filters[key];\r\n            }\r\n        }\r\n        // 添加层级的条件\r\n        if(this.SearchSelect !==undefined && this.SearchSelect.value!==undefined){\r\n            SearchContation[\"level\"] = this.SearchSelect.value;\r\n        }\r\n        if(this.SearchSelect2 !==undefined && this.SearchSelect2.value!==undefined){\r\n            SearchContation[\"level2\"] = this.SearchSelect2.value;\r\n        }\r\n        //添加表单的条件\r\n        const formReftemp = this.formRef.current;\r\n        var tempFormData = formReftemp.getFieldsValue(true);//当前查询条件\r\n        //创建提交后台数据 这个页面不需要通过调度单查询\r\n        //SearchContation.DIDS = DIDS;\r\n        //console.dir(tempFormData.Series);\r\n        // if((tempFormData.Series===\"\" || tempFormData.Series===undefined) && model===1){\r\n        //     message.warn(\"请输入系列，再查询\");\r\n        //     return;\r\n        // }\r\n        if(tempFormData.Series!==\"\" && tempFormData.Series!==undefined){\r\n            SearchContation.model=1;\r\n        }\r\n        SearchContation = {...SearchContation,...tempFormData}\r\n        \r\n        const formData = ConvertFomrData(SearchContation);\r\n        this.setState({ loading: true });\r\n        const result = await getV_Sum_Num_BjInfo2(formData);\r\n        if (result.status === 0) {\r\n            const { V_BjInfo } = result.data;\r\n            //console.dir(V_BjInfo);\r\n            if (V_BjInfo.length === 0) {\r\n                //console.dir(V_BjInfo.length);\r\n                this.setState({ dataSource: [], current: 1, dataTotal: 0, loading: false });\r\n            } else {\r\n                //console.dir(\"index\");\r\n                //val.replace(/\\b(0+)/gi,\"\")\r\n                V_BjInfo.forEach(item => {\r\n                    item.FirstCode = item.FirstCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.SecondCode = item.SecondCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.ThirdCode = item.ThirdCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.FourthCode = item.FourthCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.FifthCode = item.FifthCode.replace(/\\b(0+)/gi, \"\");\r\n                })\r\n                this.Arr = [];\r\n                this.expandRowKeys2 = [];\r\n                this.deepTree(V_BjInfo, 0, {});\r\n                //console.dir(this.expandRowKeys);\r\n                let tempSource = this.Arr.slice(0,9);\r\n                this.setState({ dataSource: tempSource, current:1,dataTotal:this.Arr.length ,loading: false,expandRowKeys: this.expandRowKeys2,level:SearchContation.level,level2:SearchContation.level2,SearchContation:SearchContation});\r\n            }\r\n        }\r\n    }\r\n    Codes = [\"FirstCode\", \"SecondCode\", \"ThirdCode\", \"FourthCode\", \"FifthCode\",\"SixthCode\"];\r\n    CodesName = [\"FirstName\", \"SecondName\", \"ThirdName\", \"FourthName\", \"FifthName\",\"SixthName\"];\r\n    Arr = [];\r\n    expandRowKeys2 = [];\r\n    //处理后台钣金的数据\r\n    deepTree(data, index, pre) {\r\n        if (index >= data.length) {\r\n            return;\r\n        }\r\n        let Current = data[index];\r\n        let keyIndex = 0;\r\n        //var preNode = {};\r\n        var nowNode = {};\r\n        var CurrentNode = {};\r\n        var flg = false;//后面是否都是新插入 \r\n        let key;\r\n        let NameKey;\r\n        //let tempNode = {\"Code\":Current[key],\"Num\":Current[\"Num\"+keyIndex],\"children\":childrenNode};\r\n        //处理第一次空的插入\r\n        if (pre === {}) {\r\n            for (; keyIndex < this.Codes.length; keyIndex++) {\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                //\r\n                let tempNode = { Code: Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], Num: Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey],Pline1:Current[\"Pline1\"], children: [] };\r\n                if (keyIndex === 0) {\r\n                    pre = tempNode;\r\n                    nowNode = tempNode;\r\n                    this.Arr.push(nowNode);\r\n                    this.expandRowKeys2.push(nowNode.Code);\r\n                } else {\r\n                    nowNode.children.push(tempNode);\r\n                    nowNode = tempNode;\r\n                }\r\n            }\r\n            keyIndex = 0;\r\n            index += 1;\r\n            Current = data[index];\r\n        }\r\n        //判断是否要新插入\r\n        key = this.Codes[0];\r\n        NameKey = this.CodesName[0];\r\n        if (Current[key] !== pre[\"Code\"]) {//新插入\r\n            let tempNode = { \"Code\": Current[key], Code2: (1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + 1], Name: Current[NameKey], Pline1:Current[\"Pline1\"],\"children\": [] };\r\n            CurrentNode = tempNode;\r\n            this.Arr.push(CurrentNode);\r\n            this.expandRowKeys2.push(CurrentNode.Code);\r\n            flg = true;\r\n        }\r\n        if (flg) {//全是新插入\r\n            for (keyIndex = 1; keyIndex < this.Codes.length; keyIndex++) {\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                if (Current[key] !== \"\") {\r\n                    let tempNode = { \"Code\": Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], Pline1:Current[\"Pline\"+(keyIndex+1)],Pline2:Current[\"Pline2\"], Pline3:Current[\"Pline3\"], Pline4:Current[\"Pline4\"],Pline5:Current[\"Pline5\"], \"children\": [] };\r\n                    CurrentNode.children.push(tempNode);\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    CurrentNode = tempNode;\r\n                }\r\n\r\n            }\r\n        } else {//不是全部都是全新插入 \r\n            //寻找第一个Code不同的点\r\n            for (keyIndex = 1; keyIndex < this.Codes.length; keyIndex++) {\r\n                //undefined\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                if (Current[key] === \"\") {\r\n                    break;\r\n                }\r\n                if (flg) {//后面全是新插入\r\n                    if (Current[key] === \"\") {\r\n                        break;\r\n                    }\r\n                    let tempNode = { \"Code\": Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey],Pline1:Current[\"Pline\"+(keyIndex + 1)],\"children\": [] };\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    pre.children.push(tempNode);\r\n                    pre = tempNode;\r\n                    continue;\r\n                }\r\n                let tempNode = pre.children.find(item => {\r\n                    if (item[\"Code\"] === \"\") {\r\n                        return false;\r\n                    }\r\n                    if (Current[key] === item[\"Code\"]) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                })\r\n                if (tempNode === undefined) {//需要新插入\r\n                    if (Current[key] === \"\") {\r\n                        break;\r\n                    }\r\n                    tempNode = { Code: Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], Pline1:Current[\"Pline\"+(keyIndex + 1)],\"children\": [] };\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    pre.children.push(tempNode);\r\n                    pre = tempNode;\r\n                    flg = true;\r\n                } else {//不需要新插入\r\n                    pre = tempNode;\r\n                }\r\n            }\r\n        }\r\n        this.deepTree(data, index + 1, this.Arr[this.Arr.length - 1]);\r\n    }\r\n\r\n    OpenOrCloseSingle = (record, type) => {\r\n        let { expandRowKeys } = this.state;\r\n        if (type) {\r\n            expandRowKeys.push(record.Code);\r\n        } else {\r\n            expandRowKeys = expandRowKeys.filter(item => {\r\n                if (item === record.Code) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n        }\r\n        this.setState({ expandRowKeys });\r\n    }\r\n\r\n    ExpandRow = (type) => {\r\n        const { dataSource } = this.state;\r\n        let expandRowKeys = [];\r\n        for (let i = 0; i < type; i++) {\r\n            if (i === 0) {\r\n                expandRowKeys = [];\r\n            }\r\n            if (i === 1) {\r\n                let tempKeys = dataSource.map(item => item.Code)\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 2) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        tempKeys.push(item2.Code);\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 3) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        item2.children.forEach(item3 => tempKeys.push(item3.Code))\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 4) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        item2.children.forEach(item3 => {\r\n                            item3.children.forEach(item4 => tempKeys.push(item4.Code))\r\n                        })\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n\r\n            if (i === 5) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        item2.children.forEach(item3 => {\r\n                            item3.children.forEach(item4 => {\r\n                                item4.children.forEach(item5=>tempKeys.push(item5.Code))\r\n                            })\r\n                        })\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n        }\r\n        this.setState({ expandRowKeys })\r\n    }\r\n\r\n    ExcelOut = async ()=>{\r\n        const {SearchContation} = this.state;\r\n        const ColumsWch = [\r\n            {wch:10},//日期\r\n            {wch:20},//一层编码\r\n            {wch:45},//一层名称\r\n            {wch:10},//一层数量\r\n            {wch:10},//一层工艺\r\n            {wch:20},//二层编码\r\n            {wch:45},//二层名称\r\n            {wch:10},//二层数量\r\n            {wch:10},//二层工艺\r\n            {wch:20},//三层编码\r\n            {wch:45},//三层名称\r\n            {wch:10},//三层数量\r\n            {wch:10},//三层工艺\r\n            {wch:20},//四层编码\r\n            {wch:45},//四层名称\r\n            {wch:10},//四层数量\r\n            {wch:10},//四层工艺\r\n            {wch:20},//五层编码\r\n            {wch:45},//五层名称\r\n            {wch:10},//五层数量\r\n            {wch:10},//五层工艺\r\n            {wch:20},//六层编码\r\n            {wch:45},//六层名称\r\n            {wch:10},//六层数量\r\n            {wch:10},//六层工艺\r\n            {wch:10},//系列\r\n          ]\r\n        this.setState({SpinTip:'Excel导出中，请等待',ExcelLoading:true});\r\n        SearchContation.page = 1;\r\n        SearchContation.pageSize = 999999;\r\n        const formData = ConvertFomrData(SearchContation);\r\n        //\r\n        const result = await getV_BjInfo(formData);\r\n        if(result.status===0){\r\n            const {V_BjInfo} = result.data;\r\n            V_BjInfo.forEach(item=>{\r\n                item.Datetime1 = moment(item.Datetime1).format(\"YYYYMMDD\");\r\n            })\r\n            downloadExcel(V_BjInfo,V_BjInfo_columns,ColumsWch,\"钣金需求单\");\r\n            this.setState({SpinTip:'Excel导出中，请等待',ExcelLoading:false});\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        this.handleTableChange();\r\n    }\r\n\r\n    render() {\r\n        const { dataSource, loading, expandRowKeys ,SearchContation,current,dataTotal,SpinTip,ExcelLoading,level,level2} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <div style={{margin:'10px',float:\"left\",width:'80%'}}>\r\n                <Form layout=\"inline\" ref={this.formRef}>\r\n                        <Form.Item\r\n                            label=\"系列\"\r\n                            name=\"Series\"\r\n                            style={{width:'160px'}}\r\n                        >\r\n                            <Input placeholder=\"默认所有系列\"></Input>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" onClick={()=>this.handleTableChange({},{},{},1)}>查询</Button>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button onClick={() => { this.ExpandRow(1) }}>查看第一层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(2) }}>查看第二层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(3) }}>查看第三层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(4) }}>查看第四层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(5) }}>查看第五层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(6) }}>查看第六层</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div style={{float:'left',textAlign:'right',width:'16%'}}>\r\n                    <Button type=\"primary\" onClick={()=>this.ExcelOut()}>导出Excel</Button>\r\n                </div>\r\n                <div style={{float:\"left\",width:\"100%\"}}>\r\n                    {\r\n                    SearchContation.FirstCode===\"\"||SearchContation.FirstCode===undefined?\"\":\r\n                        <h2 style={{float:\"left\"}}>物料编码:{level===null||level===undefined?'1':level}层,{SearchContation.FirstCode}&nbsp;</h2>\r\n                    }\r\n                    {\r\n                        SearchContation.FirstName===\"\"||SearchContation.FirstName===undefined?\"\":\r\n                        <h2 style={{float:\"left\"}}>物料名称:{level2===null||level2===undefined?'1':level2}层,{SearchContation.FirstName}</h2>\r\n                    }\r\n                </div>\r\n                <Table\r\n                    dataSource={dataSource}\r\n                    bordered\r\n                    rowKey=\"Code\"\r\n                    sticky={true}\r\n                    scroll={{ y: 600 }}\r\n                    size=\"small\"\r\n                    columns={DdOrder_BjInfo_First(this)}\r\n                    loading={loading}\r\n                    indentSize={15}\r\n                    onRow={record => {\r\n                        return {\r\n                            onMouseEnter: event => { },\r\n                            onMouseLeave: event => { }\r\n                        }\r\n                    }}\r\n                    expandable={{\r\n                        expandedRowKeys: expandRowKeys,\r\n                        onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                    }}\r\n                    pagination={{\r\n                        position: ['bottomCenter'],\r\n                        pageSizeOptions:[10],\r\n                        current:current,\r\n                        total:dataTotal,\r\n                        showTotal:(total, range) => `一共 ${total} 条数据`,\r\n                        pageSize:10,\r\n                        onChange:(page,pageSize)=>{\r\n                            let start = (page-1)*pageSize;\r\n                            let end = (page)*pageSize;\r\n                            if(this.Arr.length!==0){\r\n                                if(end>this.Arr.length){\r\n                                    end = this.Arr.length;\r\n                                }\r\n                                let tempArr = this.Arr.slice(start,end-1);\r\n                                this.setState({dataSource:tempArr,current:page});\r\n                            }\r\n                            //this.Arr\r\n                            //this.handleTableChange({page:page,pageSize:pageSize});\r\n                        }\r\n                    }}\r\n                // expandable={{\r\n                //     expandRowByClick: true,\r\n                //     expandedRowRender,\r\n                //     columnWidth: 3,\r\n                //     indentSize: 0,\r\n                //     expandedRowKeys: expandRowKeys1,\r\n                //     onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                // }}\r\n                >\r\n                </Table>\r\n                <Spin style={{ position: 'absolute', left: '48%', top: '47%' }} tip={SpinTip} spinning={ExcelLoading}></Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report3_1\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report4_1\\index.jsx",["212"],"import React, { Component } from 'react'\r\n//导入组件\r\nimport { Button, Input, Form, DatePicker, Table, message, Spin, Checkbox } from 'antd'\r\n//导入方法\r\nimport moment from 'moment'\r\n//引入less\r\nimport './index.less'\r\n//本地化\r\nimport 'moment/locale/zh-cn';\r\nimport locale from 'antd/es/date-picker/locale/zh_CN';\r\n//自定义方法\r\nimport { ConvertFomrData } from '../../utils'\r\n//导入api\r\nimport { getV_Sum_Num_CgInfo,updateCgBaseBum } from '../../api'\r\n//Excel\r\nimport XLSX from 'xlsx'\r\n//导入配置\r\nimport { DdOrder_CgInfo_columns } from '../../config/table-columns'\r\nconst { RangePicker } = DatePicker;\r\n//表格扩展\r\nconst expandedRowRender = (record, index) => {\r\n    //DdOrder_Det_Sum_columns\r\n    //console.dir(record);\r\n    const data = record.Det;\r\n    if (data === undefined || data.length === 0) {\r\n        return \"\";\r\n    }\r\n    // var DetVal = [];\r\n    // var newData = {};\r\n    // for (let i = 0; i < data.length; i++) {\r\n    //     if (newData[data[i].Datetime1] === undefined) {\r\n    //         //console.dir(data[i].Datetime1);\r\n    //         newData[data[i].Datetime1] = 0;\r\n    //     }\r\n    // }\r\n    // for (var key in newData) {\r\n    //     for (let i = 0; i < data.length; i++) {\r\n    //         if (key === data[i].Datetime1) {\r\n    //             newData[key] += (data[i].Menge * 1)\r\n    //         }\r\n    //     }\r\n    // }\r\n    //DetVal.push({ ID: 1, ...newData });\r\n    //根据时间创建多个Table\r\n    //moment(dt).isBetween(dt1,dt2);\r\n    var newColums = [];\r\n    var newData = [];\r\n    //是否创建数组\r\n    var dt1 = null;\r\n    var dt2 = null;\r\n    data.forEach((item, index) => {\r\n        let singleColums = [];\r\n        var dt = new Date(item.Datetime1);\r\n        let dt3 = moment(dt);\r\n        dt3.add(1, 'm');\r\n        if (newColums.length === 0 || !moment(dt3).isBetween(dt1, dt2)) {\r\n            let singleArr = {};\r\n            dt1 = moment(dt).startOf(\"month\");\r\n            dt2 = moment(dt).endOf(\"month\");\r\n            let dt4 = moment(dt).startOf(\"month\");\r\n            //插入表头的第一列\r\n            singleColums.push({\r\n                title: '日期',\r\n                dataIndex: '日期',\r\n            })\r\n            //插入表头第一列的内容为空\r\n            singleArr[moment(dt1).format('YYYYMM')] = 0;\r\n            singleArr.ID = moment(dt1).format('YYYYMM');\r\n            //插入其他列\r\n            dt4.add(1, 's');\r\n            for (let i = 1; i <= 31; i++) {\r\n                var key = i < 10 ? '0' + i : '' + i;\r\n                singleColums.push({\r\n                    title: key,\r\n                    dataIndex: key,\r\n                })\r\n                singleArr[key] = 0;\r\n            }\r\n            singleArr[\"dt\"] = moment(dt3);\r\n            singleArr[\"日期\"] = moment(dt3).format(\"YYYYMM\");\r\n            newColums.push(singleColums);\r\n            newData.push(singleArr);\r\n        }\r\n\r\n        newColums.forEach((item2, index2) => {\r\n            let dt5 = moment(newData[index2][\"dt\"]).startOf(\"month\");\r\n            let dt6 = moment(newData[index2][\"dt\"]).endOf(\"month\");\r\n            if (moment(dt3).isBetween(dt5, dt6)) {\r\n                newData[index2][moment(dt3).format('DD')] += item.Menge * 1;\r\n            }\r\n            //moment(dt3).format('YYYYMM')\r\n\r\n        })\r\n    })\r\n    // return (<div>\r\n    //     {\r\n    //         newColums.map((_,index)=>{\r\n    //             return(\r\n    //                 <Table\r\n    //                     bordered\r\n    //                     size=\"small\"\r\n    //                     rowKey=\"ID\"\r\n    //                     key={'tab'+index}\r\n    //                     columns={newColums[index]}\r\n    //                     dataSource={newData}\r\n    //                     pagination={false}\r\n    //                 >\r\n    //                 </Table>\r\n    //             )\r\n    //         })\r\n    //     }\r\n    // </div>)\r\n    return <Table\r\n        bordered\r\n        size=\"small\"\r\n        rowKey=\"ID\"\r\n        columns={newColums[0]}\r\n        dataSource={newData}\r\n        pagination={false}\r\n    >\r\n    </Table>\r\n\r\n}\r\n//采购\r\nexport default class Report4_1 extends Component {\r\n    formRef = React.createRef();\r\n    state = {\r\n        dataSource: [],\r\n        ViewMode:'V_CgInfo',\r\n        loading: true,\r\n        Btn_CgBaseload:false,\r\n        SearchContation: {},\r\n        current: 1,\r\n        dataTotal: 0,\r\n        ExcelLoading: false,\r\n        SpinTip: '',\r\n        model: 0,\r\n        expandRowKeys: []\r\n    }\r\n    TablerepetClassName = (record, index) => {\r\n        if (record.repeat === true) {\r\n            //console.dir(\"class\");\r\n            return \"Tablerepet\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n    ModalExcelOut = async () => {\r\n        var {ExcelLoading,model,ViewMode} = this.state;//当前的订单\r\n        if (ExcelLoading) {\r\n            message.warn(\"数据打包中，请勿重复点击\");\r\n            return;\r\n        }\r\n        const form = this.formRef.current;\r\n        var tempFormData = form.getFieldsValue(true);//当前查询条件\r\n        var ExcelJson = [];\r\n        tempFormData.page = 1;\r\n        tempFormData.pageSize = 99999;\r\n        if(tempFormData.model!==undefined && tempFormData.model.length!==undefined){\r\n            tempFormData.model = tempFormData.model[0];\r\n        }\r\n        tempFormData.ViewMode = ViewMode;\r\n        console.dir(tempFormData);\r\n        const FormData = ConvertFomrData(tempFormData);\r\n        this.setState({ ExcelLoading: true ,SpinTip:'Excel数据打包中'});\r\n        const result = await getV_Sum_Num_CgInfo(FormData);\r\n        if (result.status === 0) {\r\n            const jo_V_CgInfo = result.jo_V_CgInfo.V_CgInfo;\r\n            var jo_V_CgInfoSum = result.jo_V_CgInfoSum.V_CgInfo;\r\n            let V_CgInfo_Count = result.jo_V_CgInfo.V_CgInfo_Count;\r\n            if(V_CgInfo_Count===0){\r\n                message.warn(\"无数据可导出\");\r\n                this.setState({ ExcelLoading: false});\r\n                return;\r\n            }\r\n            //console.dir(jo_V_CgInfo);\r\n            const colums = DdOrder_CgInfo_columns(tempFormData.model);\r\n            this.setState({ ExcelLoading: false });\r\n            var i = 0;\r\n            for (; i < jo_V_CgInfoSum.length; i++) {\r\n                jo_V_CgInfoSum[i].ID = \"ID\" + i;\r\n                for (var j=0; j < jo_V_CgInfo.length; j++) {\r\n                    if (model === \"1\") {\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Series === jo_V_CgInfo[j].Series) {\r\n                            let dt = new Date(jo_V_CgInfo[j].Datetime1);\r\n                            if (jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] !== undefined) {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] += jo_V_CgInfo[j].Menge * 1;\r\n                            } else {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] = jo_V_CgInfo[j].Menge * 1;\r\n                            }\r\n                        }\r\n                    }else{\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Lifnr === jo_V_CgInfo[j].Lifnr) {\r\n                            let dt = new Date(jo_V_CgInfo[j].Datetime1);\r\n                            if (jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] !== undefined) {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] += jo_V_CgInfo[j].Menge * 1;\r\n                            } else {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] = jo_V_CgInfo[j].Menge * 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var timeCol = [];\r\n            for (let k = 0; k < jo_V_CgInfoSum.length; k++) {\r\n                let single = {}\r\n\r\n                for (let l = 0; l < colums.length; l++) {\r\n                    single[colums[l].title] = jo_V_CgInfoSum[k][colums[l].dataIndex];\r\n                }\r\n                for (let key2 in jo_V_CgInfoSum[k]) {\r\n                    if (!isNaN(Number(key2))) {\r\n                        single[key2 + \" \"] = jo_V_CgInfoSum[k][key2];\r\n                        let temp = timeCol.find(item=>{\r\n                            if(item===Number(key2)){\r\n                                return true;\r\n                            }\r\n                            return false;\r\n                        })\r\n                        if(temp===undefined){\r\n                            timeCol.push(Number(key2));\r\n                        }\r\n                    }\r\n                }\r\n                ExcelJson.push(single);\r\n            }\r\n            //冒泡排序\r\n            for(let k=0;k<timeCol.length;k++){\r\n                for(let l=k;l<timeCol.length;l++){\r\n                    if(timeCol[k]>timeCol[l]){\r\n                        let temp = timeCol[k];\r\n                        timeCol[k] = timeCol[l];\r\n                        timeCol[l] = temp;\r\n                    }\r\n                }\r\n            }\r\n            let book = XLSX.utils.book_new();\r\n            var newRow = {};\r\n            for(let l = 0; l < colums.length; l++){\r\n                newRow[colums[l].title] = jo_V_CgInfoSum[0][colums[l].dataIndex];\r\n            }\r\n\r\n            for(let k=0;k<timeCol.length;k++){\r\n                //newRow[timeCol[k]] =\r\n                newRow[timeCol[k]+\" \"] =  ExcelJson[0][timeCol[k]+\" \"];\r\n            }\r\n            ExcelJson[0] = newRow;\r\n            let sheet = XLSX.utils.json_to_sheet(ExcelJson);\r\n            sheet[\"!cols\"] = [\r\n                { wch: 15 }, { wch: 20 }, { wch: 10 }, { wch: 8 }, { wch: 12 }, { wch: 30 }, { wch: 12 }, { wch: 12 }, { wch: 15 }, { wch: 15 }\r\n            ];\r\n            XLSX.utils.book_append_sheet(book, sheet, 'Sheet1')\r\n            XLSX.writeFile(book, `采购需求单` + moment().format('YYYYMMDD') + '.xlsx')\r\n\r\n        }else{\r\n            this.setState({ ExcelLoading: false });\r\n            message.error(\"网络错误\")\r\n        }\r\n    }\r\n    demantCgBaseTime = async ()=>{\r\n        const {CgBaseTime,dataSource} = this.state;\r\n        console.dir(CgBaseTime);\r\n        if(CgBaseTime===\"\"){\r\n            message.warn(\"请选择采购库存基准日期\");\r\n            return;\r\n        }\r\n        if(dataSource.length===0){\r\n            message.warn(\"没有采购数据,无法更新库存\");\r\n            return;\r\n        }\r\n        let strKcDate =  CgBaseTime.format(\"YYYYMMDD\");\r\n        let BaseTime = CgBaseTime.format(\"YYYY/MM/DD\");\r\n        let formData =  new FormData();\r\n        formData.append(\"strKcDate\",strKcDate);\r\n        this.setState({Btn_CgBaseload:true});\r\n        const result = await updateCgBaseBum(formData);\r\n        if(result.code === \"200\"){\r\n            this.setState({Btn_CgBaseload:false,ViewMode:'V_CgInfo_kc'},()=>{//更改当前的查询条件\r\n                this.SearchData();\r\n            });\r\n            message.success(\"库存更新成功,等待查询数据...\");\r\n        }else{\r\n            this.setState({Btn_CgBaseload:false});\r\n            message.error(\"服务器无响应\");\r\n        }\r\n    }\r\n    componentDidMount = ()=>{\r\n        this.SearchData();\r\n    }\r\n\r\n    SearchData = async  (pagination = {}) => {\r\n        var { SearchContation,ViewMode} = this.state;\r\n        const form = this.formRef.current;\r\n        if (pagination.page === undefined) {\r\n            SearchContation.page = 1;\r\n            SearchContation.pageSize = 100;\r\n        } else {\r\n            SearchContation.page = pagination.page;\r\n            SearchContation.pageSize = pagination.pageSize;\r\n        }\r\n        var tempFormData = form.getFieldsValue(true);\r\n        if (tempFormData.model !== undefined) {\r\n            let tepModel = tempFormData.model[0];\r\n            delete tempFormData.model;\r\n            tempFormData.model = tepModel;\r\n        }\r\n        tempFormData.page = SearchContation.page;\r\n        tempFormData.pageSize = SearchContation.pageSize;\r\n        tempFormData.ViewMode = ViewMode;\r\n        const FormData = ConvertFomrData(tempFormData);\r\n        this.setState({ loading: true })\r\n        const result = await getV_Sum_Num_CgInfo(FormData);\r\n        if (result.status === 0) {\r\n            const jo_V_CgInfo = result.jo_V_CgInfo.V_CgInfo;\r\n            var jo_V_CgInfoSum = result.jo_V_CgInfoSum.V_CgInfo;\r\n            var i = 0;\r\n            var preSum = {};\r\n            for (; i < jo_V_CgInfoSum.length; i++) {\r\n                if (i === 0) {\r\n                    preSum = { ...jo_V_CgInfoSum[0] };\r\n                }\r\n                jo_V_CgInfoSum[i].ID = \"D\" + i;\r\n                for (var j = 0; j < jo_V_CgInfo.length; j++) {\r\n                    //console.dir(jo_V_CgInfoSum[i].Matnr);\r\n                    if (tempFormData.model === \"1\") {\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Series === jo_V_CgInfo[j].Series) {\r\n                            if (jo_V_CgInfoSum[i].Det === undefined) {\r\n                                jo_V_CgInfoSum[i].Det = [];\r\n                            }\r\n                            jo_V_CgInfoSum[i].Det.push(jo_V_CgInfo[j]);\r\n                        }\r\n                    } else {\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Lifnr === jo_V_CgInfo[j].Lifnr) {\r\n                            if (jo_V_CgInfoSum[i].Det === undefined) {\r\n                                jo_V_CgInfoSum[i].Det = [];\r\n                            }\r\n                            jo_V_CgInfoSum[i].Det.push(jo_V_CgInfo[j]);\r\n                        }\r\n\r\n                    }\r\n                }\r\n                if (i !== 0 && preSum.Matnr === jo_V_CgInfoSum[i].Matnr && tempFormData.model !== \"1\") {\r\n                    jo_V_CgInfoSum[i].Det = [];\r\n                    jo_V_CgInfoSum[i].repeat = true;\r\n                } else if (i !== 0 && preSum.Matnr === jo_V_CgInfoSum[i].Matnr && i !== 0 && preSum.Series === jo_V_CgInfoSum[i].Series && tempFormData.model === \"1\") {\r\n                    jo_V_CgInfoSum[i].Det = [];\r\n                    jo_V_CgInfoSum[i].repeat = true;\r\n                }\r\n                else {\r\n                    preSum = jo_V_CgInfoSum[i];\r\n                }\r\n            }\r\n            this.setState({ loading: false, dataSource: jo_V_CgInfoSum, current: tempFormData.page, dataTotal: result.jo_V_CgInfoSum.V_CgInfo_Count, model: tempFormData.model,Btn_CgBaseload:false })\r\n        }else{\r\n            this.setState({ loading: false });\r\n            message.error(\"网络错误\");\r\n        }\r\n    }\r\n    \r\n    OpenOrCloseAll = () => {\r\n        //expandRowKeys\r\n        const { expandRowKeys, dataSource } = this.state;\r\n        if (expandRowKeys.length > 0) {//关闭\r\n            this.setState({ expandRowKeys: [] });\r\n        } else {//展开\r\n            let newArr = [];\r\n            for (let i = 0; i < dataSource.length; i++) {\r\n                newArr.push(dataSource[i].ID);\r\n            }\r\n            this.setState({ expandRowKeys: newArr });\r\n        }\r\n    }\r\n    OpenOrCloseSingle = (record, type) => {\r\n        let { expandRowKeys } = this.state;\r\n        if (type) {\r\n            expandRowKeys.push(record.ID);\r\n        } else {\r\n            expandRowKeys = expandRowKeys.filter(item => {\r\n                if (item === record.ID) {\r\n                    return false;   \r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n        }\r\n        this.setState({ expandRowKeys });\r\n    }\r\n\r\n    render() {\r\n        const { loading,Btn_CgBaseload, dataSource, current, dataTotal, ExcelLoading, model, expandRowKeys ,SpinTip} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"toolArea\" >\r\n                    <Form layout=\"inline\" ref={this.formRef} >\r\n                        <Form.Item\r\n                            name=\"Datetime1\"\r\n                            label=\"时间\"\r\n                        >\r\n                            <RangePicker locale={locale} style={{width:'220px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Series\"\r\n                            label=\"系列\"\r\n                        >\r\n                            <Input style={{width:'50px'}}/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"Matnr\"\r\n                            label=\"物料编码\"\r\n                        >\r\n                            <Input style={{width:'130px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Maktx\"\r\n                            label=\"物料描述\"\r\n                        >\r\n                            <Input style={{width:'100px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"MRP\"\r\n                            label=\"MRP控制者\"\r\n                        >\r\n                            <Input style={{width:'50px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Lifnr\"\r\n                            label=\"供应商代码\"\r\n                        >\r\n                            <Input style={{width:'60px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Name1\"\r\n                            label=\"供应商名称\"\r\n                        >\r\n                            <Input style={{width:'100px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"model\"\r\n                            label=\"区分系列\"\r\n                        >\r\n                            <Checkbox.Group>\r\n                                <Checkbox value=\"1\"></Checkbox>\r\n                            </Checkbox.Group>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" onClick={() => this.SearchData()} >查询</Button>\r\n                            &nbsp;&nbsp;\r\n\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div style={{ width: \"59%\", float: \"left\" }}>\r\n                        <h1 style={{ fontSize: '20px', paddingLeft: '20px', lineHeight: '35px' }}>\r\n                            <Button onClick={() => this.OpenOrCloseAll()}>展开/关闭所有行</Button>\r\n                        </h1>\r\n                    </div>\r\n                    <div style={{ width: \"40%\", float: \"left\", textAlign: 'right' }}>\r\n                    <Button type=\"primary\" loading={Btn_CgBaseload} onClick={() => this.demantCgBaseTime()} >更新库存基准日期</Button>\r\n                        &emsp;\r\n                        <DatePicker locale={locale}  format=\"YYYYMMDD\" onChange={(val)=>this.setState({CgBaseTime:val})}></DatePicker>\r\n                        &emsp;\r\n                        <Button type=\"primary\" onClick={() => this.ModalExcelOut()} >Excel导出</Button>\r\n                    </div>\r\n                </div>\r\n                <Table\r\n                    dataSource={dataSource}\r\n                    bordered\r\n                    rowKey=\"ID\"\r\n                    sticky={true}\r\n                    scroll={{ y: 560 }}\r\n                    size=\"middle\"\r\n                    columns={DdOrder_CgInfo_columns(model)}\r\n                    loading={loading}\r\n                    rowClassName={this.TablerepetClassName}\r\n                    pagination={{\r\n                        position: ['bottomCenter'],\r\n                        pageSizeOptions: [20],\r\n                        current: current,\r\n                        total: dataTotal,\r\n                        showTotal: (total, range) => `一共 ${total} 条数据`,\r\n                        pageSize: 100,\r\n                        onChange: (page, pageSize) => {\r\n                            this.SearchData({ page: page, pageSize: pageSize });\r\n                        }\r\n                    }}\r\n                    expandable={{\r\n                        expandRowByClick: true,\r\n                        expandedRowRender,\r\n                        columnWidth: 8,\r\n                        indentSize: 0,\r\n                        expandedRowKeys: expandRowKeys,\r\n                        onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                    }}\r\n                >\r\n                </Table>\r\n                <Spin style={{ position: 'absolute', left: '48%', top: '47%' }} tip={SpinTip} spinning={ExcelLoading}></Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Mobile_Login\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Mobile_Admin\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Mobile_DdOrder\\index.jsx",["213","214","215"],"import React, { Component } from \"react\";\r\n//获得设置\r\nimport { GetFalineList } from \"../../config/form-Fields\";\r\nimport {\r\n  Icon,\r\n  List,\r\n  Checkbox,\r\n  DatePicker,\r\n  Picker,\r\n  Button,\r\n  ActivityIndicator,\r\n} from \"antd-mobile\";\r\n//api\r\nimport { getDdOrder } from \"../../api\";\r\n//工具\r\nimport moment from \"moment\";\r\n//css\r\nimport \"./index.css\";\r\nconst Item = List.Item;\r\n/**\r\n * 订单查询页面\r\n */\r\nexport default class Mobile_DdOrder extends Component {\r\n  state = {\r\n    dataSource: [],\r\n    Count: 0, //数据条数\r\n    btmHidden: true,\r\n    Faline: [],\r\n    PlantDt: \"\",\r\n    FalineList: [],\r\n    BtmToolsShow: true,\r\n    loading: false, //显示加载器\r\n  };\r\n  //显示隐藏底部工具栏\r\n  showActionSheet = () => {\r\n    this.setState({\r\n      BtmToolsShow: !this.state.BtmToolsShow,\r\n    });\r\n  };\r\n  //查询数据\r\n  SearchData = async () => {\r\n    const { Faline, PlantDt } = this.state;\r\n    let new_Faline, new_PlantDt;\r\n    if (Faline.length === undefined || Faline.length === 0) {\r\n      new_Faline = \"\";\r\n    } else {\r\n      new_Faline = Faline[0];\r\n    }\r\n    if (PlantDt === \"\") {\r\n      new_PlantDt = \"\";\r\n    } else {\r\n      new_PlantDt = moment(PlantDt).format(\"YYYYMM\");\r\n    }\r\n    //\r\n    var formData = new FormData();\r\n    formData.append(\"PlantDt\", new_PlantDt);\r\n    formData.append(\"Faline\", Faline);\r\n    this.setState({ loading: true });\r\n    const result = await getDdOrder(formData);\r\n    if (result.status === 0) {\r\n      let { V_DdOrder, V_DdOrder_Count } = result.data;\r\n      //过滤掉不生效的\r\n      V_DdOrder = V_DdOrder.filter((item) => item.status === \"是\");\r\n      V_DdOrder_Count = V_DdOrder.length === undefined ? 0 : V_DdOrder.length;\r\n      this.setState({\r\n        loading: false,\r\n        dataSource: V_DdOrder,\r\n        Count: V_DdOrder_Count,\r\n      });\r\n    } else {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n  //转向调度单明细界面\r\n  RedirectToDet = (OrderId, LTOrder, TbCount, Faline) => {\r\n    this.props.history.push({pathname:\"/Mobile_Admin/Menu1/Mobile_DdOrderDet\",\r\n    ID: OrderId,LTOrder,TbCount,Faline});\r\n  };\r\n  componentDidMount = () => {\r\n    this.SearchData();\r\n  };\r\n  render() {\r\n    const {\r\n      btmHidden,\r\n      BtmToolsShow,\r\n      PlantDt,\r\n      Faline,\r\n      loading,\r\n      Count,\r\n      dataSource,\r\n    } = this.state;\r\n    let FalineList = GetFalineList();\r\n    const btnToolsEle = (\r\n      <div\r\n        style={{\r\n          borderTop: \"2px solid #ddd\",\r\n          position: \"fixed\",\r\n          bottom: \"0px\",\r\n          backgroundColor: \"#fff\",\r\n          height: \"13rem\",\r\n          paddingTop: \"0.5rem\",\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <List renderHeader={`共找到${Count}条数据`}>\r\n          <DatePicker\r\n            mode=\"month\"\r\n            format=\"YYYY-MM-DD\"\r\n            onChange={(v) => this.setState({ PlantDt: v })}\r\n            value={PlantDt}\r\n          >\r\n            <Item arrow=\"horizontal\">计划月份</Item>\r\n          </DatePicker>\r\n          <Picker\r\n            data={FalineList}\r\n            title=\"产线\"\r\n            value={Faline}\r\n            onChange={(v) => this.setState({ Faline: v })}\r\n            onOk={(v) => this.setState({ Faline: v })}\r\n          >\r\n            <Item arrow=\"horizontal\">产线</Item>\r\n          </Picker>\r\n          <Item>\r\n            <Button type=\"primary\" onClick={() => this.SearchData()}>\r\n              查询\r\n            </Button>\r\n          </Item>\r\n        </List>\r\n      </div>\r\n    );\r\n    return (\r\n      <div>\r\n        <div>\r\n          {dataSource.map((item) => {\r\n            return (\r\n              <Item\r\n                key={item.ID}\r\n                className=\"data-item\"\r\n                onClick={() => {\r\n                  this.RedirectToDet(\r\n                    item.ID,\r\n                    item.LTOrder,\r\n                    item.TbCount,\r\n                    item.Faline\r\n                  );\r\n                }}\r\n                arrow=\"horizontal\"\r\n              >\r\n                <h3>调度单:{item.LTOrder}</h3>\r\n                <p>\r\n                  版本号:\r\n                  {item.TbCount.length === 1\r\n                    ? \"0\" + item.TbCount\r\n                    : item.TbCount}\r\n                  ,产线:{item.Faline}\r\n                </p>\r\n              </Item>\r\n            );\r\n          })}\r\n        </div>\r\n        {BtmToolsShow ? <div style={{ height: \"14rem\" }}></div> : \"\"}\r\n        {BtmToolsShow ? btnToolsEle : \"\"}\r\n        <Icon\r\n          type={BtmToolsShow ? \"down\" : \"up\"}\r\n          size=\"lg\"\r\n          color=\"#fff\"\r\n          onClick={this.showActionSheet}\r\n          style={{\r\n            position: \"fixed\",\r\n            right: \"1.5rem\",\r\n            padding: \"0rem\",\r\n            bottom: BtmToolsShow ? \"12.9rem\" : \"0.2rem\",\r\n            backgroundColor: \"#108ee9\",\r\n            borderRadius: \"0rem\",\r\n          }}\r\n        >\r\n          测试\r\n        </Icon>\r\n        <ActivityIndicator\r\n          toast\r\n          text=\"数据加载中\"\r\n          animating={loading}\r\n        ></ActivityIndicator>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Mobile_DdOrderDet\\index.jsx",["216","217","218"],"import React, { Component } from \"react\";\r\nimport {\r\n  Icon,\r\n  List,\r\n  DatePicker,\r\n  InputItem,\r\n  Button,\r\n  ActivityIndicator,\r\n} from \"antd-mobile\";\r\n//引入api\r\nimport { getV_DdOrder_Det } from \"../../api\";\r\n//引入工具\r\nimport moment from 'moment'\r\n//引入缓存\r\nimport store from \"store\";\r\n//css\r\nimport \"./index.css\";\r\nconst Item = List.Item;\r\nexport default class Mobile_DdOrderDet extends Component {\r\n  state = {\r\n    dataSource: [],\r\n    FilterData:[],//过滤后的数据\r\n    Count: 0,\r\n    BtmToolsShow: true, //底部是否显示\r\n    //调度单信息\r\n    ID: 0,\r\n    LTOrder: \"\",\r\n    TbCount: \"\",\r\n    Faline: \"\",\r\n    //查询的条件\r\n    Datetime1: \"\", //投产日期\r\n    Series: \"\", //系列\r\n    //页面查询loading\r\n    loading: false,\r\n    //页面详细信息\r\n    //LTOrder\r\n    Det_Show: false,\r\n    Det_Index:0,\r\n    Det_ZjNo: \"\", //整机编码\r\n    Det_Matnr: \"\", //物料编码\r\n    Det_Series: \"\", //系列\r\n    Det_Box: \"\", //分动箱\r\n    Det_Num: \"\", //数量\r\n    Det_Datetime1: \"\", //投产日期\r\n    Det_Datetime2: \"\", //交货日期\r\n    Det_Config: \"\", //配置\r\n  };\r\n  //显示隐藏底部工具栏\r\n  showActionSheet = () => {\r\n    const { BtmToolsShow } = this.state;\r\n    this.setState({\r\n      BtmToolsShow: !BtmToolsShow,\r\n    });\r\n  };\r\n  Back = () => {\r\n    this.props.history.replace(\"/Mobile_Admin/Menu1/Mobile_DdOrder\");\r\n  };\r\n  SearchData = async () => {\r\n    const { ID, LTOrder, TbCount, Faline } = this.state;\r\n    const formData = new FormData();\r\n    formData.append(\"IDS\", ID);\r\n    this.setState({ loading: true });\r\n    const result = await getV_DdOrder_Det(formData);\r\n    if (result.status === 0) {\r\n      const { V_DdOrder_Det, V_DdOrder_Det_Count } = result.data;\r\n      this.setState({\r\n        loading: false,\r\n        dataSource: V_DdOrder_Det,\r\n        FilterData:V_DdOrder_Det,\r\n        Count: V_DdOrder_Det_Count,\r\n      });\r\n    } else {\r\n      this.setState({ loading: false });\r\n    }\r\n  };\r\n  //过滤本页面的数据\r\n  filterData = ()=>{\r\n      const {dataSource,Series,Datetime1} = this.state;\r\n      let new_Datetime1 = '';\r\n      let new_Series = '';\r\n      if(Datetime1!==''){\r\n        new_Datetime1 = moment(Datetime1).format(\"YYYYMMDD\")\r\n      }\r\n      if(Series!==''){\r\n        new_Series = Series.toUpperCase();\r\n      }\r\n      let FilterData = dataSource.filter(item=>{\r\n          if( (new_Series==='' || item.Series===new_Series) && (new_Datetime1==='' || new_Datetime1===item.Datetime1) ){\r\n              return true;\r\n          }else{\r\n              return false;\r\n          }\r\n      })\r\n      this.setState({FilterData});\r\n  }\r\n  //重置查询\r\n  resetSearch = ()=>{\r\n      const {dataSource} = this.state;\r\n      console.dir(dataSource);\r\n      this.setState({\r\n          FilterData:dataSource,\r\n          Datetime1:'',\r\n          Series:''\r\n      })\r\n  }\r\n  //显示详情\r\n  showDets = (obj,Det_Index)=>{\r\n      this.setState({\r\n          Det_Show:true,\r\n          Det_Index,\r\n          Det_ZjNo:obj.ZjNo,\r\n          Det_Matnr:obj.Matnr,\r\n          Det_Series:obj.Series,\r\n          Det_Box:obj.Box,\r\n          Det_Num:obj.Num,\r\n          Det_Datetime1:obj.Datetime1,\r\n          Det_Datetime2:obj.Datetime2,\r\n          Det_Config:obj.Config\r\n        })\r\n  }\r\n  //返回数据列表\r\n  backToList = ()=>{\r\n      this.setState({Det_Show:false})\r\n  }\r\n  componentDidMount = () => {\r\n    let { ID, LTOrder, TbCount, Faline } = this.props.location;\r\n    if (ID === undefined || ID === \"\" || ID === 0) {\r\n      ID = store.get(\"Mobile_DdOrderDet_ID\");\r\n      LTOrder = store.get(\"Mobile_DdOrderDet_LTOrder\");\r\n      TbCount = store.get(\"Mobile_DdOrderDet_TbCount\");\r\n      Faline = store.get(\"Mobile_DdOrderDet_Faline\");\r\n    } else {\r\n      store.set(\"Mobile_DdOrderDet_ID\", ID);\r\n      store.set(\"Mobile_DdOrderDet_LTOrder\", LTOrder);\r\n      store.set(\"Mobile_DdOrderDet_TbCount\", TbCount);\r\n      store.set(\"Mobile_DdOrderDet_Faline\", Faline);\r\n    }\r\n    this.setState(\r\n      {\r\n        ID,\r\n        LTOrder,\r\n        TbCount,\r\n        Faline,\r\n      },\r\n      () => {\r\n        this.SearchData();\r\n      }\r\n    );\r\n  };\r\n  render() {\r\n    const {\r\n      BtmToolsShow,\r\n      Datetime1,\r\n      LTOrder,//订单号\r\n      Faline,//产线\r\n      TbCount,//版本号\r\n      Series,//系列\r\n      FilterData,\r\n      Count,\r\n      loading,\r\n      Det_Show,\r\n      Det_Index,\r\n      Det_ZjNo,\r\n      Det_Matnr,\r\n      Det_Series,\r\n      Det_Box,\r\n      Det_Num,\r\n      Det_Config\r\n    } = this.state;\r\n    //工具区\r\n    const btnToolsEle = (\r\n      <div\r\n        style={{\r\n          position: \"fixed\",\r\n          borderBottom: \"2px solid #ddd\",\r\n          backgroundColor: \"#fff\",\r\n          height: \"14rem\",\r\n          paddingTop: \"0.5rem\",\r\n          width: \"100%\",\r\n          zIndex: 9,\r\n        }}\r\n      >\r\n        <List renderHeader={`共找到${Count}条数据`}>\r\n          <h2\r\n            style={{\r\n              position: \"fixed\",\r\n              top: \"4.2rem\",\r\n              left: \"2rem\",\r\n              color: \"#1DA57A\",\r\n            }}\r\n            onClick={this.Back}\r\n          >\r\n            返回\r\n          </h2>\r\n          <Item>\r\n            <span style={{ fontWeight: 600 }}>\r\n              调度单:{LTOrder},产线:{Faline},版本:{TbCount}\r\n            </span>\r\n          </Item>\r\n          <DatePicker\r\n            mode=\"date\"\r\n            format=\"YYYY-MM-DD\"\r\n            value={Datetime1}\r\n            onChange={(v) => this.setState({ Datetime1: v })}\r\n          >\r\n            <Item arrow=\"horizontal\">投产日期</Item>\r\n          </DatePicker>\r\n          <InputItem value={Series} arrow=\"horizontal\" onChange={(v)=>this.setState({Series:v})} placeholder=\"请输入系列\">\r\n            系列\r\n          </InputItem>\r\n          <Item>\r\n            <Button type=\"primary\" size=\"small\" onClick={()=>this.filterData()} >查询</Button>\r\n            <p></p>\r\n            <Button type=\"ghost\" size=\"small\" onClick={()=>this.resetSearch()} >重置</Button>\r\n            <p></p>\r\n          </Item>\r\n        </List>\r\n      </div>\r\n    );\r\n    //详情信息\r\n    const DetEle = (\r\n      <div style={{marginTop:'1rem'}}>\r\n        <h2>明细&nbsp;{Det_Index}</h2>\r\n        <List className=\"my-list\">\r\n          <Item>调度单号:{LTOrder}</Item>\r\n          <Item>整机编码:{Det_ZjNo}</Item>\r\n          <Item>物料编码:{Det_Matnr}</Item>\r\n          <Item>系列:{Det_Series}&emsp;分动箱:{Det_Box}&emsp;数量:{Det_Num}</Item>\r\n          <Item arrow=\"horizontal\" wrap> \r\n            配置:{Det_Config}\r\n          </Item>\r\n        </List>\r\n        <Button type=\"primary\" style={{marginTop:'1rem'}} onClick={()=>this.backToList()} >返回列表</Button>\r\n      </div>\r\n    );\r\n    return (\r\n      <div>\r\n        {/* 显示列表 */}\r\n        {!Det_Show ? (\r\n          <div>\r\n            {BtmToolsShow ? btnToolsEle : \"\"}\r\n            {BtmToolsShow ? <div style={{ height: \"19rem\" }}></div> : \"\"}\r\n            <div style={{ zIndex: 1 }}>\r\n             \r\n              {FilterData.length>0?FilterData.map((item, index) => (\r\n                <Item\r\n                  style={{ margin: \"10px\" }}\r\n                  key={item.ID}\r\n                  arrow=\"horizontal\"\r\n                  onClick={()=>this.showDets(item,index+1)}\r\n                >\r\n                  <p>\r\n                    {index + 1}.投产日期:{item.Datetime1},系列:{item.Series}\r\n                  </p>\r\n                  <p>\r\n                    物料号:{item.Matnr},数量:{item.Num}\r\n                  </p>\r\n                </Item>\r\n              )):<h2>没有查到数据</h2>}\r\n            </div>\r\n            <Icon\r\n              type={BtmToolsShow ? \"down\" : \"up\"}\r\n              size=\"lg\"\r\n              color=\"#fff\"\r\n              onClick={this.showActionSheet}\r\n              style={{\r\n                position: \"fixed\",\r\n                right: \"1.5rem\",\r\n                padding: \"0rem\",\r\n                top: \"23rem\",\r\n                backgroundColor: \"#108ee9\",\r\n                borderRadius: \"0rem\",\r\n              }}\r\n            ></Icon>\r\n            <ActivityIndicator\r\n              toast\r\n              text=\"数据加载中\"\r\n              animating={loading}\r\n            ></ActivityIndicator>\r\n          </div>\r\n        ) : (\r\n          DetEle\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":89,"column":15,"nodeType":"225","endLine":89,"endColumn":87},{"ruleId":"219","replacedBy":"226"},{"ruleId":"221","replacedBy":"227"},{"ruleId":"228","severity":1,"message":"229","line":51,"column":45,"nodeType":"230","messageId":"231","endLine":95,"endColumn":30},{"ruleId":"232","severity":1,"message":"233","line":546,"column":24,"nodeType":"234","messageId":"235","endLine":546,"endColumn":38},{"ruleId":"228","severity":1,"message":"229","line":49,"column":45,"nodeType":"230","messageId":"231","endLine":91,"endColumn":30},{"ruleId":"228","severity":1,"message":"236","line":217,"column":50,"nodeType":"230","messageId":"231","endLine":226,"endColumn":18},{"ruleId":"228","severity":1,"message":"236","line":197,"column":50,"nodeType":"230","messageId":"231","endLine":206,"endColumn":18},{"ruleId":"232","severity":1,"message":"237","line":272,"column":13,"nodeType":"234","messageId":"235","endLine":272,"endColumn":21},{"ruleId":"232","severity":1,"message":"238","line":7,"column":3,"nodeType":"234","messageId":"235","endLine":7,"endColumn":11},{"ruleId":"232","severity":1,"message":"239","line":47,"column":7,"nodeType":"234","messageId":"235","endLine":47,"endColumn":17},{"ruleId":"232","severity":1,"message":"240","line":84,"column":7,"nodeType":"234","messageId":"235","endLine":84,"endColumn":16},{"ruleId":"232","severity":1,"message":"241","line":59,"column":17,"nodeType":"234","messageId":"235","endLine":59,"endColumn":24},{"ruleId":"232","severity":1,"message":"242","line":59,"column":26,"nodeType":"234","messageId":"235","endLine":59,"endColumn":33},{"ruleId":"232","severity":1,"message":"243","line":59,"column":35,"nodeType":"234","messageId":"235","endLine":59,"endColumn":41},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["244"],["245"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'flg'.","ArrowFunctionExpression","unsafeRefs","no-unused-vars","'Btn_CgBaseload' is assigned a value but never used.","Identifier","unusedVar","Function declared in a loop contains unsafe references to variable(s) 'key'.","'BaseTime' is assigned a value but never used.","'Checkbox' is defined but never used.","'new_Faline' is assigned a value but never used.","'btmHidden' is assigned a value but never used.","'LTOrder' is assigned a value but never used.","'TbCount' is assigned a value but never used.","'Faline' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]