[{"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\index.js":"1","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\App.js":"2","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\memoryUtils.js":"3","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\storageUtils.js":"4","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Login\\index.jsx":"5","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Admin\\index.jsx":"6","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\index.js":"7","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\api\\index.js":"8","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Deskop\\index.jsx":"9","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Matrial\\index.jsx":"10","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\AdminOptLog\\index.jsx":"11","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\MRP\\index.jsx":"12","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report1\\index.jsx":"13","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\OptRecord\\index.jsx":"14","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\AdminUserConfig\\index.jsx":"15","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service1\\index.jsx":"16","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report3\\index.jsx":"17","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report2\\index.jsx":"18","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\ExcelUp\\index.jsx":"19","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report4\\index.jsx":"20","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service4\\index.jsx":"21","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service3\\index.jsx":"22","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service2\\index.jsx":"23","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\left-nav\\index.jsx":"24","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\header\\index.jsx":"25","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\StaticSet.js":"26","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\api\\ajax.js":"27","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\form-Fields.js":"28","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\left-menu-list.js":"29","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\table-columns.js":"30","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\link-button\\index.jsx":"31","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\AdvancedSearchForm\\index.jsx":"32","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\anaData\\index.js":"33","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder\\index.jsx":"34","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrderExcel\\index.jsx":"35","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrderDet\\index.jsx":"36","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_CgInfo\\index.jsx":"37","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_JjInfo\\index.jsx":"38","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_BjInfo\\index.jsx":"39","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_BjInfo2\\index.jsx":"40","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report2_1\\index.jsx":"41","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report3_1\\index.jsx":"42","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report4_1\\index.jsx":"43"},{"size":498,"mtime":1616814274150,"results":"44","hashOfConfig":"45"},{"size":587,"mtime":1616807147835,"results":"46","hashOfConfig":"45"},{"size":105,"mtime":1615258349880,"results":"47","hashOfConfig":"45"},{"size":598,"mtime":1615259872910,"results":"48","hashOfConfig":"45"},{"size":4502,"mtime":1616810258024,"results":"49","hashOfConfig":"45"},{"size":6381,"mtime":1619594007022,"results":"50","hashOfConfig":"45"},{"size":8738,"mtime":1620284530358,"results":"51","hashOfConfig":"45"},{"size":9735,"mtime":1620262544770,"results":"52","hashOfConfig":"45"},{"size":4714,"mtime":1616398720994,"results":"53","hashOfConfig":"45"},{"size":11466,"mtime":1616915415406,"results":"54","hashOfConfig":"45"},{"size":246,"mtime":1615265222012,"results":"55","hashOfConfig":"45"},{"size":10717,"mtime":1616739732747,"results":"56","hashOfConfig":"45"},{"size":4700,"mtime":1616401626520,"results":"57","hashOfConfig":"45"},{"size":4923,"mtime":1616913610914,"results":"58","hashOfConfig":"45"},{"size":17277,"mtime":1616913474733,"results":"59","hashOfConfig":"45"},{"size":5729,"mtime":1616561290522,"results":"60","hashOfConfig":"45"},{"size":4156,"mtime":1617601715928,"results":"61","hashOfConfig":"45"},{"size":4170,"mtime":1619573597503,"results":"62","hashOfConfig":"45"},{"size":15573,"mtime":1619250167350,"results":"63","hashOfConfig":"45"},{"size":4298,"mtime":1618469761558,"results":"64","hashOfConfig":"45"},{"size":9652,"mtime":1619153574351,"results":"65","hashOfConfig":"45"},{"size":8009,"mtime":1619153534376,"results":"66","hashOfConfig":"45"},{"size":14142,"mtime":1619682304831,"results":"67","hashOfConfig":"45"},{"size":6385,"mtime":1616810301727,"results":"68","hashOfConfig":"45"},{"size":2970,"mtime":1617781610656,"results":"69","hashOfConfig":"45"},{"size":227,"mtime":1616561007617,"results":"70","hashOfConfig":"45"},{"size":789,"mtime":1616390277634,"results":"71","hashOfConfig":"45"},{"size":16510,"mtime":1617601410857,"results":"72","hashOfConfig":"45"},{"size":5548,"mtime":1615967125736,"results":"73","hashOfConfig":"45"},{"size":43746,"mtime":1620291418492,"results":"74","hashOfConfig":"45"},{"size":216,"mtime":1615258349843,"results":"75","hashOfConfig":"45"},{"size":3151,"mtime":1616220281414,"results":"76","hashOfConfig":"45"},{"size":10434,"mtime":1617677888483,"results":"77","hashOfConfig":"45"},{"size":25040,"mtime":1620355711377,"results":"78","hashOfConfig":"45"},{"size":10716,"mtime":1619673396268,"results":"79","hashOfConfig":"45"},{"size":11231,"mtime":1620352078045,"results":"80","hashOfConfig":"45"},{"size":20453,"mtime":1620290208415,"results":"81","hashOfConfig":"45"},{"size":16461,"mtime":1620290487071,"results":"82","hashOfConfig":"45"},{"size":15692,"mtime":1618619439632,"results":"83","hashOfConfig":"45"},{"size":18784,"mtime":1620284440437,"results":"84","hashOfConfig":"45"},{"size":18018,"mtime":1619589953233,"results":"85","hashOfConfig":"45"},{"size":13944,"mtime":1620290585928,"results":"86","hashOfConfig":"45"},{"size":18917,"mtime":1620290679048,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1vygspr",{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"90"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"90"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"90"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"90"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"90"},"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\index.js",[],["184","185"],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\App.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\memoryUtils.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\storageUtils.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Login\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Admin\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\index.js",["186","187"],"import XLSX from 'xlsx';\r\nimport {Button,Space,Input,Form} from 'antd'\r\nimport FileSaver from \"file-saver\";\r\n\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport Highlighter from 'react-highlight-words';\r\n\r\nimport moment from \"moment\"\r\nimport { getSite_Roles_Opt } from \"../api\"\r\nimport localStore from \"./storageUtils\"\r\nimport {SERVER_ADDRESS_FILEPATH,SERVER_ADDRESS_DEMOPATH} from './StaticSet'\r\n/*\r\n    常用的方法集合\r\n*/\r\n//遍历侧边栏树\r\nexport const depTree = (Roles, parentId) => {\r\n    const items = [];\r\n    let flg = true;//是否结束递归\r\n    for (let i = 0; i < Roles.length; i++) {\r\n        if (Roles[i].parentId * 1 === parentId) {\r\n            if (Roles[i].UrlKey !== undefined) {\r\n                items.push(createMenuObj(Roles[i]));\r\n            } else {\r\n                items.push(Roles[i]);\r\n            }\r\n            flg = false;\r\n        }\r\n    }\r\n    if (flg) {\r\n        return [];\r\n    } else {\r\n        for (let i = 0; i < items.length; i++) {\r\n            items[i].children = depTree(Roles, items[i].id);\r\n        }\r\n        return items;\r\n    }\r\n}\r\n//排序侧边栏树\r\nexport const OrderTree = (items) => {\r\n    for (let i = 0; i < items.length; i++) {\r\n        for (let j = 0; j < items.length; j++) {\r\n            if (items[i].cOrder < items[j].cOrder) {\r\n                let temp = items[i];\r\n                items[i] = items[j];\r\n                items[j] = temp;\r\n            }\r\n        }\r\n    }\r\n    for (let i = 0; i < items.length; i++) {\r\n        if (items[i].children.length !== 0) {\r\n            items[i].children = OrderTree(items[i].children);\r\n        }\r\n    }\r\n    return items;\r\n}\r\nexport const createMenuObj = (obj) => {\r\n    let rtObj = {};\r\n    rtObj.id = obj.ID * 1;\r\n    rtObj.title = obj.title;\r\n    rtObj.key = obj.UrlKey;\r\n    rtObj.isOpt = obj.isOpt === \"True\";\r\n    rtObj.cOrder = obj.cOrder * 1;\r\n    rtObj.isMenu = obj.isMenu === \"True\"\r\n    rtObj.parentId = obj.parentId * 1;\r\n    rtObj.children = [];\r\n    rtObj.isAuth = obj.isAuth === \"True\";\r\n    rtObj.isSubMenu = obj.isSubMenu === \"True\";\r\n    return rtObj;\r\n}\r\n//查找用户 拥有该页面的哪些权限\r\nexport const getPageRoles = async (mapKey) => {\r\n    var formData = new FormData();\r\n    formData.append(\"mapKey\", mapKey);\r\n    formData.append(\"Roles\", localStore.getUser().Roles);\r\n    let result = await getSite_Roles_Opt(formData);\r\n    if (result.status === 0) {\r\n        return result.data.Site_Roles;\r\n    } else {\r\n        return [];\r\n    }\r\n}\r\n//查找用户 是否拥有操作权限\r\nexport const isOpt = (Arr, title) => {\r\n    const flg = Arr.find(item => {\r\n        if (item.title === title) {\r\n            return true;\r\n        } else {\r\n            return false\r\n        }\r\n    })\r\n    return flg !== undefined;\r\n}\r\n//将Json对象转为formData\r\nexport const ConvertFomrData = (jsons) => {\r\n    let formData1 = new FormData();\r\n    Object.keys(jsons).forEach((key) => {\r\n        if(jsons[key]===undefined){\r\n            delete jsons[key];\r\n        }else if (typeof (jsons[key]) == \"object\") {\r\n            if (jsons[key] !== null && jsons[key]!==undefined&&jsons[key]!==\"\") {\r\n                formData1.append(key + \"[0]\", jsons[key][0].format('yyyy-MM-DD'));\r\n                formData1.append(key + \"[1]\", jsons[key][1].format('yyyy-MM-DD'));\r\n            }\r\n        } else {\r\n            formData1.append(key, jsons[key]);\r\n        }\r\n\r\n    })\r\n    return formData1;\r\n}\r\n//将json数据转为EXCEL进行下载\r\n//json 原始的数据\r\n//Colums Table的列List\r\nfunction JsonTOexcelData(datas, Colums) {\r\n    //const type = 'xlsx';\r\n    let ExcelDatas = [];    \r\n    datas.forEach(data => {\r\n        let ExcelData = {};\r\n        Colums.forEach(Colum => {\r\n            ExcelData[Colum.title] = data[Colum.key]\r\n        })\r\n        ExcelDatas.push(ExcelData);\r\n    })\r\n    return ExcelDatas;\r\n}\r\n/**\r\n * json 数据\r\n * Colums 标题\r\n * ColumsWch 每列的宽度\r\n * fileName 文件名\r\n */\r\nexport function downloadExcel(json,Header,ColumsWch,fileName){\r\n    json = JsonTOexcelData(json,Header);\r\n    const workbook = XLSX.utils.book_new();\r\n    let ws = XLSX.utils.json_to_sheet(json);\r\n     ws[\"!cols\"]=ColumsWch;\r\n    XLSX.utils.book_append_sheet(workbook, ws, \"sheet1\");//把sheet添加到workbook里，第三个参数是sheet名\r\n    const wopts = { bookType: \"xlsx\", bookSST: false, type: \"array\" };//写入的样式bookType:输出的文件类型，type：输出的数据类型，bookSST: 是否生成Shared String Table，官方解释是，如果开启生成速度会下降，但在低版本IOS设备上有更好的兼容性\r\n    const wbout = XLSX.write(workbook, wopts);\r\n    FileSaver.saveAs(new Blob([wbout], { type: \"application/octet-stream\" }), `${fileName} ${moment().format(\"YYYYMMDDHHmmss\")}.xlsx`);//保存文件\r\n\r\n}\r\n\r\nexport function downloadUpFile(fileName){\r\n    window.open (SERVER_ADDRESS_FILEPATH+fileName)\r\n}\r\nexport function downloadDemoFile(fileName){\r\n    window.open (SERVER_ADDRESS_DEMOPATH+fileName)\r\n}\r\nexport const getColumnSearchProps = (dataIndex,_this)=>({\r\n    filterDropdown:({setSelectedKeys,selectedKeys,confirm,clearFilters })=>(\r\n        <div style={{padding:8}}>\r\n            <Input\r\n            ref={node => {\r\n                _this.searchInput = node;\r\n            }}\r\n            placeholder={`输入查询条件`}\r\n            value = {selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => _this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n            />\r\n            <Space>\r\n                <Button\r\n                type=\"primary\"\r\n                onClick={() => _this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n                icon={<SearchOutlined />}\r\n                size=\"small\"\r\n                style={{ width: 90 }}\r\n                >查询</Button>\r\n                <Button\r\n                onClick={() => _this.handleReset(clearFilters)}\r\n                size=\"small\"\r\n                style={{ width: 90 }}\r\n                >重置</Button>\r\n            </Space>\r\n        </div>\r\n    ),\r\n    filterIcon:filtered =><SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    \r\n    onFilterDropdownVisibleChange:visible =>{\r\n        if (visible) {\r\n            setTimeout(() => _this.searchInput.select(), 100);\r\n          }\r\n    },\r\n    render:text=>\r\n        _this.state.searchedColumn === dataIndex ?(\r\n            <Highlighter\r\n      highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n      searchWords={[_this.state.searchText]}\r\n      autoEscape\r\n      textToHighlight={text ? text.toString() : ''}\r\n    />\r\n    ):(\r\n        text\r\n    )\r\n})\r\n//带选择框的\r\nexport const getColumnSearchPropsSelect = (dataIndex,_this,key)=>({\r\n    filterDropdown:({setSelectedKeys,selectedKeys,confirm,clearFilters })=>(\r\n        <div style={{padding:8}}>\r\n            <Input\r\n            ref={node => {\r\n                _this.searchInput = node;\r\n            }}\r\n            placeholder={`输入查询条件`}\r\n            value = {selectedKeys[0]}\r\n            onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n            onPressEnter={() => _this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n            />\r\n            <Space>\r\n                <Button\r\n                type=\"primary\"\r\n                onClick={() => _this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n                icon={<SearchOutlined />}\r\n                size=\"small\"\r\n                style={{ width: 90 }}\r\n                >查询</Button>\r\n                <Button\r\n                onClick={() => _this.handleReset(clearFilters)}\r\n                size=\"small\"\r\n                style={{ width: 90 }}\r\n                >重置</Button>\r\n            </Space>\r\n        </div>\r\n    ),\r\n    filterIcon:filtered =><SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    \r\n    onFilterDropdownVisibleChange:visible =>{\r\n        if (visible) {\r\n            setTimeout(() => _this.searchInput.select(), 100);\r\n          }\r\n    },\r\n    render:text=>\r\n        _this.state.searchedColumn === dataIndex ?(\r\n            <Highlighter\r\n      highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n      searchWords={[_this.state.searchText]}\r\n      autoEscape\r\n      textToHighlight={text ? text.toString() : ''}\r\n    />\r\n    ):(\r\n        text\r\n    )\r\n})\r\nexport const YYYYMMDD_To_Datetime = (Str)=>{\r\n    if(typeof(Str) ==='String'){\r\n        return Str.replace(/^(\\d{4})(\\d{2})(\\d{2})$/, \"$1-$2-$3\");\r\n    }else{\r\n        return Str;\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\api\\index.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Deskop\\index.jsx",[],["188","189"],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Matrial\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\AdminOptLog\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\MRP\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report1\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\OptRecord\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\AdminUserConfig\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service1\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report3\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report2\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\ExcelUp\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report4\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service4\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service3\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Service2\\index.jsx",["190"],"import React, { Component } from 'react'\r\nimport XLSX from 'xlsx';\r\nimport { Table, Button, Modal, Form, Input,message} from 'antd'\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\n//引入自定义组件\r\n// import AdvancedSearchForm from '../../components/AdvancedSearchForm'\r\n//引入工具\r\nimport {getPageRoles,isOpt,ConvertFomrData,downloadDemoFile} from '../../utils'\r\n//引入API \r\nimport {addBjInfo,delBjInfo,editBjInfo,getBjImp} from '../../api'\r\n//配置 \r\nimport { BjImp_columns } from '../../config/table-columns'\r\n// import { BjInfoFielsds } from '../../config/form-Fields'\r\n//模拟数据\r\n//import { BjInfo } from '../../anaData'\r\nconst { confirm } = Modal;\r\n\r\nexport default class Service2 extends Component {\r\n    formRef = React.createRef();\r\n    Roles = [];//用户在这个界面的权限\r\n    state = { \r\n        dataSource: [],\r\n        BjImp_columns:[],\r\n        dataTotal: 0,\r\n        loading: true,\r\n        isModalEditShow: false,//控制编辑对话框的显示\r\n        ModalTitle:'',\r\n        Fuc_Add:false,\r\n        Fuc_Exel:false,\r\n        Fuc_Submit:false,\r\n    }\r\n    //搜索数据\r\n    SearchData = async (formData) => {\r\n        if(formData===undefined){\r\n            formData = new FormData();\r\n        }else{\r\n            formData = ConvertFomrData(formData);\r\n        }\r\n        this.setState({loading:true})\r\n        const result = await getBjImp(formData);\r\n        if(result.status===0){\r\n            const {BjImp} = result.data;\r\n            this.setState({ dataSource: BjImp,loading:false,BjImp_columns:BjImp_columns})\r\n        }else{\r\n            message.error(\"服务器无响应\");\r\n        }\r\n        \r\n    }\r\n    componentDidMount = async () => {\r\n        let {Fuc_Add,Fuc_Exel,Fuc_Submit} = this.state;\r\n        this.SearchData();\r\n        const {pathname} = this.props.location;\r\n        this.Roles = await getPageRoles(pathname);\r\n        // BjInfo_columns.push(\r\n        //     {\r\n        //         title: '操作',\r\n        //         width: 50,\r\n        //         fixed: 'right',\r\n        //         dataIndex: 'operation',\r\n        //         render: (_, record) => {\r\n        //             return (\r\n        //                 <div style={{textAlign:'center'}}>\r\n        //                     <Button size=\"small\" type=\"primary\" onClick={()=>this.ModalDel(record)} danger>删除</Button>&emsp;\r\n        //                     <Button size=\"small\" type=\"primary\" onClick={() => this.ModalEdit(record)} >编辑</Button>\r\n        //                 </div>\r\n        //             )\r\n        //         }\r\n        //     }\r\n        // )\r\n        if(isOpt(this.Roles,\"新建\")){\r\n            Fuc_Add = true;\r\n        }\r\n        if(isOpt(this.Roles,\"Excel导入\")){\r\n            Fuc_Exel = true;\r\n        }\r\n        //执行提交\r\n        if(isOpt(this.Roles,\"执行提交\")){\r\n            Fuc_Submit = true;\r\n        }//Fuc_ExcelOut\r\n        this.setState({Fuc_Add,Fuc_Exel,Fuc_Submit})\r\n    }\r\n    componentWillUnmount = ()=>{\r\n        //BjInfo_columns.pop();\r\n    }\r\n    //编辑按钮 显示编辑对话框\r\n    ModalEdit = (record) => { \r\n        this.setState({ isModalEditShow: true,ModalTitle:'编辑'},()=>{\r\n            this.formRef.current.setFieldsValue(record)\r\n        }) \r\n    }\r\n    //新建按钮 显示新建对话框\r\n    ModalAdd = ()=>{\r\n        this.setState({ isModalEditShow: true,ModalTitle:'新建'},()=>{\r\n            this.formRef.current.resetFields()\r\n        })\r\n    }\r\n    //删除按钮\r\n    ModalDel = (record)=>{\r\n        confirm({\r\n            title:'是否删除数据?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            okText: '是',\r\n            okType: 'danger',\r\n            cancelText: '否',\r\n            onOk() {\r\n                //record.ID\r\n                const formData = new FormData();\r\n                formData.append(\"ID\",record.ID);\r\n                const result = delBjInfo(formData);\r\n                if(result.status===0){\r\n                    message.success(\"编辑成功\");\r\n                }else{\r\n                    message.error(\"编辑失败\");\r\n                }\r\n\r\n            },\r\n            onCancel() {\r\n            },\r\n        })\r\n    }\r\n    //提交所有更新到SAP\r\n    ModalSubmit = ()=>{\r\n        //submitBjInfo\r\n        confirm({\r\n            title:'是否提交数据?',\r\n            icon: <ExclamationCircleOutlined />,\r\n            okText: '是',\r\n            okType: 'danger',\r\n            cancelText: '否',\r\n            onOk() {\r\n                //record.ID\r\n                //const formData = new FormData();\r\n                //const result = submitBjInfo(formData);\r\n                // if(result.status===0){\r\n                //     message.success(\"更新成功\");\r\n                // }else{\r\n                //     message.error(\"更新失败失败\");\r\n                // }\r\n\r\n            },\r\n            onCancel() {\r\n            },\r\n        })\r\n    }\r\n    //Excel导入对话框\r\n    ModalExcel = () => {\r\n        const { history } = this.props;\r\n        //对应的url需要填写\r\n        history.push({pathname:\"/Admin/Upload/ExcelUp\",columns:BjImp_columns,type:1,submitUrl:\"BjImp\",subTitle:\"钣金需求分解\"});\r\n    }\r\n     //点击 编辑/新建 对话框OK\r\n    ModalEditOk = async () => {\r\n        const form = this.formRef.current;\r\n        try {\r\n            await form.validateFields();\r\n        } catch (errorInfo) {\r\n            message.warn('请检查数据的正确性')\r\n            return;\r\n        }\r\n        //获取数据发送给服务端\r\n        const json = form.getFieldsValue(true);\r\n        const formData = ConvertFomrData(json); \r\n        const {ModalTitle} = this.state;\r\n        if(ModalTitle==='编辑'){\r\n            //发送编辑的请求 ID已经\r\n            const result = editBjInfo(formData);\r\n            if(result.status===0){\r\n                message.success(\"编辑成功\");\r\n            }else{\r\n                message.error(\"编辑失败\");\r\n            }\r\n        }else if(ModalTitle==='新建'){\r\n            //发送新建的请求\r\n            const result = addBjInfo(formData);\r\n            if(result.status===0){\r\n                message.success(\"添加成功\");\r\n            }else{\r\n                message.error(\"添加失败\");\r\n            }\r\n        }\r\n        this.setState({ isModalEditShow: false })\r\n    }\r\n    //点击编辑/新建 对话框 取消\r\n    ModalEditCancel = () => {\r\n        this.setState({ isModalEditShow: false })\r\n    }\r\n    ModalExcelOut = ()=>{\r\n        const {dataSource} = this.state;\r\n        //let obj = [];\r\n        const range = XLSX.utils.decode_range(dataSource);\r\n    }\r\n    DownLoadDemo = ()=>{\r\n        downloadDemoFile(\"钣金需求分解模板.xls\");\r\n    }\r\n    //downloadDemoFile(\"机加需求分解模板.xlsx\");\r\n    render() {\r\n        const { dataSource, loading, isModalEditShow,ModalTitle,Fuc_Add,Fuc_Exel} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"toolArea\">\r\n                    {Fuc_Add?\r\n                    <Button type=\"primary\" onClick={()=>this.ModalAdd()}>新建</Button>:\"\"\r\n                    }\r\n                    &emsp;\r\n                    {Fuc_Exel?\r\n                    <Button type=\"primary\" onClick={() => this.ModalExcel()}>Excel导入</Button>:\"\"\r\n                    }\r\n                    &emsp;\r\n                    <Button type=\"primary\" onClick={()=>this.DownLoadDemo()} >模板下载</Button>\r\n                </div>\r\n                <Table\r\n                dataSource={dataSource}\r\n                bordered\r\n                rowKey=\"ID\"\r\n                sticky={true}\r\n                //scroll={{ x: 2600}} \r\n                columns={BjImp_columns}\r\n                size=\"middle\"\r\n                loading={loading}\r\n                pagination={false}\r\n                > \r\n                </Table>\r\n                <Modal title={ModalTitle} visible={isModalEditShow} onOk={() => this.ModalEditOk()} onCancel={() => this.ModalEditCancel()} >\r\n                    <Form ref={this.formRef} >\r\n                        <Form.Item\r\n                            name=\"FirstCode\"\r\n                            label=\"一层编码\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入一层编码'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"FirstName\"\r\n                            label=\"一层名称\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入一层名称'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"SecondCode\"\r\n                            label=\"二层编码\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入二层编码'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"SecondName\"\r\n                            label=\"二层名称\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入二层名称'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"ThirdCode\"\r\n                            label=\"三层编码\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入三层编码'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"ThirdName\"\r\n                            label=\"三层名称\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入三层名称'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"FourthCode\"\r\n                            label=\"四层编码\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入四层编码'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"FourthName\"\r\n                            label=\"四层名称\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入四层名称'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"FifthCode\"\r\n                            label=\"五层编码\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入五层编码'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"FifthName\"\r\n                            label=\"五层名称\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入五层名称'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Prooerty\"\r\n                            label=\"属性\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入属性'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Menge\"\r\n                            label=\"需求数量\"\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message:'请输入需求数量'\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Input type=\"number\" />\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\left-nav\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\header\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\utils\\StaticSet.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\api\\ajax.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\form-Fields.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\left-menu-list.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\config\\table-columns.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\link-button\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\components\\AdvancedSearchForm\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\anaData\\index.js",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrderExcel\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrderDet\\index.jsx",["191"],"import React, { Component } from 'react'\r\n//引入组件\r\nimport {Table,message,Button,Modal,Input,Form,DatePicker,Test} from 'antd'\r\nimport moment from 'moment'\r\n//自定义组件\r\nimport LinkButton from '../../components/link-button';\r\n//引入api\r\nimport {getV_DdOrder_Det,editDdOrderDet} from '../../api'\r\n//\r\nimport {YYYYMMDD_To_Datetime,ConvertFomrData} from '../../utils'\r\n//引入配置\r\nimport { DdOrder_Sum_columns,DdOrder_Det_Sum_columns} from '../../config/table-columns'\r\nimport {ArrowLeftOutlined} from '@ant-design/icons';\r\n//引入缓存\r\nimport store from 'store'\r\nimport XLSX from 'xlsx'\r\nimport './index.less'\r\n//扩展表格\r\n\r\nexport default class DdOrderDet extends Component {\r\n    formRef = React.createRef();\r\n    state = {\r\n        dataSource:[],\r\n        loading:true,\r\n        isModalEditShow:false\r\n    }\r\n    componentDidMount = ()=>{\r\n        this.SearchData();\r\n    }\r\n    SearchData = async ()=>{\r\n        var {IDS} = this.props.location;\r\n        if(IDS===undefined){\r\n            IDS = store.get(\"DdOrderDet_IDS\");\r\n        }else{\r\n            store.set(\"DdOrderDet_IDS\",IDS);\r\n        }\r\n        //this.setState({loading:true})\r\n        const formData = new FormData();\r\n        formData.append(\"IDS\",IDS);\r\n        const result = await getV_DdOrder_Det(formData);\r\n        if(result.status === 0){\r\n            const {V_DdOrder_Det} = result.data;\r\n            let DdOrder = [];\r\n            var DdOrderObj = {};\r\n            var LTOrder = \"\";\r\n            var NO = \"\";\r\n            var TbCount = \"\";\r\n            V_DdOrder_Det.forEach((item,index)=>{\r\n                if(index===0 || LTOrder!==item.LTOrder || NO!==item.NO || TbCount!==item.TbCount){\r\n                    DdOrderObj = {\r\n                        ID:item.ID,\r\n                        LTOrder:item.LTOrder,\r\n                        TbCount:item.TbCount,\r\n                        NO:item.NO,\r\n                        status:item.status,\r\n                        Faline:item.Faline,\r\n                        PlanDt:item.PlanDt,\r\n                        DetCount:0,\r\n                        Det:[]\r\n                    }\r\n                    \r\n                    DdOrder.push(DdOrderObj);\r\n                    LTOrder = item.LTOrder;\r\n                    NO = item.NO;\r\n                    TbCount = item.TbCount;\r\n                }\r\n                DdOrderObj.Det.push({\r\n                    ID:\"Det\"+item.ID,\r\n                    ZjNo:item.ZjNo,\r\n                    Matnr:item.Matnr,\r\n                    Series:item.Series,\r\n                    Model:item.Model,\r\n                    Box:item.Box,\r\n                    Num:item.Num,\r\n                    Config:item.Config,\r\n                    Datetime1:item.Datetime1,\r\n                    Datetime2:item.Datetime2,\r\n                    Bz:item.Bz,\r\n                    //Det_status:item.Det_status,\r\n                    \r\n                });\r\n                DdOrderObj.DetCount++;\r\n            })\r\n            //重新组建数据\r\n            this.setState({loading:false,dataSource:DdOrder});\r\n\r\n        }else{\r\n            message.error(\"网络错误\");\r\n            this.setState({loading:false})\r\n        }\r\n    }\r\n    handleBack = ()=>{\r\n        const { history } = this.props;\r\n        history.goBack();\r\n    }\r\n    //导出Excel\r\n    ModalExcelOut = ()=>{\r\n        //dataSource\r\n        //1.读取Excel文件\r\n        //2.用 XLSX.utils.sheet_to_json(); 查看数据\r\n        //3.模仿2的数据创建excel\r\n        //XLSX.utils.sheet_to_json();\r\n        const {dataSource} = this.state;\r\n        const keys1 = DdOrder_Sum_columns(this);\r\n        const keys2 = DdOrder_Det_Sum_columns();\r\n        var sheetArray = [];\r\n        const HeadTitle = [];\r\n        const SubHeadTitle = [];\r\n        keys1.forEach(item=>{\r\n            HeadTitle.push(item.title);\r\n        })\r\n        keys2.forEach(item=>{\r\n            SubHeadTitle.push(item.title);\r\n        })\r\n        SubHeadTitle.unshift(\"\");\r\n        sheetArray.push(HeadTitle);\r\n        dataSource.forEach(item=>{\r\n            let singleArray = [];\r\n            let subsingleArray = [];\r\n            for(var key in item){\r\n                if(key!==\"Det\" && key!==\"ID\"){\r\n                    singleArray.push(item[key]);\r\n                }else if(key===\"Det\"){\r\n                    item.Det.forEach(item2=>{\r\n                        let singleArray2 = [];\r\n                        for(var key2 in item2){\r\n                            if(key2!==\"ID\"){\r\n                                singleArray2.push(item2[key2]);\r\n                            }\r\n                        }\r\n                        singleArray2.unshift(\"\");\r\n                        subsingleArray.push(singleArray2);\r\n                    })\r\n                }\r\n            }\r\n            sheetArray.push(singleArray);\r\n            if(subsingleArray.length>0){\r\n                sheetArray.push(SubHeadTitle);\r\n                //console.dir(subsingleArray);\r\n                sheetArray = sheetArray.concat(subsingleArray);\r\n            }\r\n        })\r\n        //console.dir(dataSource);\r\n        //console.dir(sheetJson);\r\n        let book = XLSX.utils.book_new();\r\n        // XLSX.utils.cell_add_comment\r\n        // let sheet = XLSX.utils.json_to_sheet(json, {\r\n        //     header: ['姓名', '性别', '年龄']\r\n        // })\r\n        let sheet = XLSX.utils.aoa_to_sheet(\r\n            sheetArray\r\n        );\r\n        sheet[\"!cols\"]=[\r\n            {wch:15},{wch:18},{wch:18},{wch:12},{wch:15},{wch:12},{wch:12},{wch:80},{wch:15},{wch:15},{wch:25}\r\n        ];\r\n        XLSX.utils.book_append_sheet(book, sheet, 'Sheet1')\r\n        XLSX.writeFile(book, '调度单'+moment().format('YYYYMMDD')+'.xlsx')\r\n    }\r\n    ModalEdit = async ()=>{\r\n        const record = {...this.formRef.current.getFieldsValue(true)};\r\n        if(record.Datetime2!==undefined && record.Datetime2!==\"\"){\r\n            record.Datetime2 = moment(record.Datetime2).format(\"YYYYMMDD\");\r\n        }else{\r\n            record.Datetime2 = moment().format(\"YYYYMMDD\");\r\n        }\r\n        \r\n        var formData = ConvertFomrData(record);\r\n        const result = await editDdOrderDet(formData); \r\n        if(result.status===0){\r\n            this.SearchData();\r\n            message.success('编辑成功');\r\n        }else{\r\n            message.error('网络错误');\r\n        }\r\n        this.setState({isModalEditShow:false});\r\n    }\r\n    ModalCancel = ()=>{\r\n        this.setState({isModalEditShow:false});\r\n    }\r\n    ModalEditShow = (record)=>{\r\n        //record.Datetime1 = moment(YYYYMMDD_To_Datetime(record.Datetime1));\r\n        if(record.Datetime2!==undefined && record.Datetime2!==\"\"){\r\n            record.Datetime2 = moment(YYYYMMDD_To_Datetime(record.Datetime2));\r\n        }else{\r\n            record.Datetime2 = moment();\r\n        }\r\n        console.dir(record);\r\n        this.setState({isModalEditShow:true},()=>{\r\n            console.dir(\"1\");\r\n            this.formRef.current.setFieldsValue(record);\r\n            console.dir(\"2\");\r\n        });\r\n    }\r\n    expandedRowRender = (record,index)=>{\r\n            //DdOrder_Det_Sum_columns\r\n    //console.dir(record);\r\n    const data = record.Det;\r\n    const columns = DdOrder_Det_Sum_columns();\r\n    const App = this;\r\n    columns.push({\r\n        title:'编辑',\r\n        dataIndex:'edit',\r\n        key:'edit',\r\n        width:10,\r\n        render:function(_,record){\r\n            return <Button type=\"primary\" onClick={()=>App.ModalEditShow(record)} >编辑</Button>\r\n        }\r\n    })\r\n    //isModalEditShow\r\n    return <Table bordered size=\"small\" rowKey=\"ID\" columns={columns} dataSource={data} pagination={false}></Table>\r\n    }\r\n    render() {\r\n        const {dataSource,loading,isModalEditShow} = this.state;\r\n        const expandedRowRender = this.expandedRowRender;\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"toolArea\">\r\n                    <div style={{float:'left'}}>\r\n                        <LinkButton onClick={() => this.handleBack()}>\r\n                            <ArrowLeftOutlined />返回调度单\r\n                        </LinkButton>\r\n                    </div>\r\n                    <Button type=\"primary\" onClick={() => this.ModalExcelOut()}>Excel导出</Button>\r\n                </div>\r\n                <Table\r\n                dataSource={dataSource}\r\n                bordered\r\n                rowKey=\"ID\"\r\n                sticky={true}\r\n                size = \"middle\"\r\n                columns = {DdOrder_Sum_columns(this)}\r\n                loading = {loading}\r\n                pagination={false}\r\n                expandable={{expandedRowRender,columnWidth:10}}\r\n                >\r\n\r\n                </Table>\r\n                <Modal title=\"调度单明细编辑\" visible={isModalEditShow} onOk={()=>this.ModalEdit()} onCancel={()=>this.ModalCancel()} >\r\n                    <Form ref={this.formRef} layout=\"horizontal\">\r\n                        <Form.Item\r\n                            name=\"ZjNo\"\r\n                            label=\"整机编码\"\r\n                        >\r\n                            <Input></Input>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Matnr\"\r\n                            label=\"物料编码\"\r\n                            \r\n                        >\r\n                            <Input readOnly></Input>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Series\"\r\n                            label=\"系  列\"\r\n                        >\r\n                            <Input readOnly disabled></Input>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Box\"\r\n                            label=\"分 动 箱\"\r\n                        >\r\n                            <Input></Input>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Num\"\r\n                            label=\"数  量\"\r\n                        >\r\n                            <Input readOnly></Input>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Config\"\r\n                            label=\"配置\"\r\n                        >\r\n                            <Input.TextArea></Input.TextArea>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Datetime1\"\r\n                            label=\"投产日期\"\r\n                        >\r\n                            <Input readOnly></Input>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Datetime2\"\r\n                            label=\"交库日期\"\r\n                        >\r\n                            <DatePicker format=\"YYYYMMDD\"></DatePicker>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Bz\"\r\n                            label=\"备注\"\r\n                        >\r\n                            <Input></Input>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Modal>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_CgInfo\\index.jsx",["192","193"],"import React, { Component } from 'react'\r\n//导入组件\r\nimport { Button, Input, Form, DatePicker, Table, message, Spin, Checkbox } from 'antd'\r\n//导入方法\r\nimport moment from 'moment'\r\n//自定义组件\r\nimport LinkButton from '../../components/link-button';\r\n//引入less\r\nimport './index.less'\r\n//本地化\r\nimport 'moment/locale/zh-cn';\r\nimport locale from 'antd/es/date-picker/locale/zh_CN';\r\n//自定义方法\r\nimport { ConvertFomrData } from '../../utils'\r\n//导入api\r\nimport { getV_Sum_Num_CgInfo } from '../../api'\r\n//Excel\r\nimport XLSX from 'xlsx'\r\n//导入配置\r\nimport { DdOrder_CgInfo_columns} from '../../config/table-columns'\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\n//引入缓存\r\nimport store from 'store'\r\nconst { RangePicker } = DatePicker;\r\n//表格扩展\r\nconst expandedRowRender = (record, index) => {\r\n    //DdOrder_Det_Sum_columns\r\n    //console.dir(record);\r\n    const data = record.Det;\r\n    if (data === undefined || data.length === 0) {\r\n        return \"\";\r\n    }\r\n    // var DetVal = [];\r\n    // var newData = {};\r\n    // for (let i = 0; i < data.length; i++) {\r\n    //     if (newData[data[i].Datetime1] === undefined) {\r\n    //         //console.dir(data[i].Datetime1);\r\n    //         newData[data[i].Datetime1] = 0;\r\n    //     }\r\n    // }\r\n    // for (var key in newData) {\r\n    //     for (let i = 0; i < data.length; i++) {\r\n    //         if (key === data[i].Datetime1) {\r\n    //             newData[key] += (data[i].Menge * 1)\r\n    //         }\r\n    //     }\r\n    // }\r\n    //DetVal.push({ ID: 1, ...newData });\r\n    //根据时间创建多个Table\r\n    //moment(dt).isBetween(dt1,dt2);\r\n    var newColums = [];\r\n    var newData = [];\r\n    //是否创建数组\r\n    var dt1 = null;\r\n    var dt2 = null;\r\n    data.forEach((item,index) => {\r\n        let singleColums = [];\r\n        var dt = new Date(item.Datetime1);\r\n        let dt3 = moment(dt);\r\n        dt3.add(1,'m');\r\n        if(newColums.length===0||!moment(dt3).isBetween(dt1,dt2)){\r\n            let singleArr = {};\r\n            dt1 = moment(dt).startOf(\"month\");\r\n            dt2 = moment(dt).endOf(\"month\");\r\n            let dt4 = moment(dt).startOf(\"month\");\r\n            //插入表头的第一列\r\n            singleColums.push({\r\n                title: '日期',\r\n                dataIndex: '日期',\r\n            })\r\n            //插入表头第一列的内容为空\r\n            singleArr[moment(dt1).format('YYYYMM')] = 0;\r\n            singleArr.ID = moment(dt1).format('YYYYMM');\r\n            //插入其他列\r\n            dt4.add(1, 's');\r\n            for(let i=1;i<=31;i++){\r\n                var key = i<10?'0'+i:''+i;\r\n                singleColums.push({\r\n                    title:key,\r\n                    dataIndex:key,\r\n                })\r\n                singleArr[key] = 0;\r\n            }\r\n            singleArr[\"dt\"]=moment(dt3);\r\n            singleArr[\"日期\"]=moment(dt3).format(\"YYYYMM\");\r\n            newColums.push(singleColums);\r\n            newData.push(singleArr);\r\n        }\r\n        \r\n        newColums.forEach((item2,index2)=>{\r\n            let dt5 = moment(newData[index2][\"dt\"]).startOf(\"month\");\r\n            let dt6 = moment(newData[index2][\"dt\"]).endOf(\"month\");\r\n            if(moment(dt3).isBetween(dt5,dt6)){\r\n                newData[index2][moment(dt3).format('DD')] = item.Menge*1;\r\n            }\r\n            //moment(dt3).format('YYYYMM')\r\n            \r\n        })\r\n    })\r\n    // return (<div>\r\n    //     {\r\n    //         newColums.map((_,index)=>{\r\n    //             return(\r\n    //                 <Table\r\n    //                     bordered\r\n    //                     size=\"small\"\r\n    //                     rowKey=\"ID\"\r\n    //                     key={'tab'+index}\r\n    //                     columns={newColums[index]}\r\n    //                     dataSource={newData}\r\n    //                     pagination={false}\r\n    //                 >\r\n    //                 </Table>\r\n    //             )\r\n    //         })\r\n    //     }\r\n    // </div>)\r\n    return <Table\r\n                bordered\r\n                size=\"small\"\r\n                rowKey=\"ID\"\r\n                columns={newColums[0]}\r\n                dataSource={newData}\r\n                pagination={false}\r\n            >\r\n    </Table>\r\n\r\n}\r\n//调度单 采购明细查看\r\nexport default class DdOrder_CgInfo extends Component {\r\n    formRef = React.createRef();\r\n    state = {\r\n        dataSource: [],\r\n        loading: true,\r\n        DIDS: \"\",\r\n        SearchContation: {},\r\n        current: 1,\r\n        dataTotal: 0,\r\n        LTOrders: \"\",\r\n        ExcelLoading: false,\r\n        SpinTip:'',\r\n        model: 0,\r\n        expandRowKeys: []\r\n    }\r\n    TablerepetClassName = (record, index) => {\r\n\r\n        if (record.repeat === true) {\r\n            //console.dir(\"class\");\r\n            return \"Tablerepet\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n    ModalExcelOut = async () => {\r\n        var { DIDS, ExcelLoading, LTOrders ,model} = this.state;//当前的订单\r\n        if (ExcelLoading) {\r\n            message.warn(\"数据打包中，请勿重复点击\");\r\n            return;\r\n        }\r\n        const form = this.formRef.current;\r\n        var tempFormData = form.getFieldsValue(true);//当前查询条件\r\n        var ExcelJson = [];\r\n        tempFormData.DIDS = DIDS;\r\n        tempFormData.page = 1;\r\n        tempFormData.pageSize = 99999;\r\n        if(tempFormData.model!==undefined && tempFormData.model.length!==undefined){\r\n            tempFormData.model = tempFormData.model[0];\r\n        }\r\n        const FormData = ConvertFomrData(tempFormData);\r\n        //添加loading效果\r\n        this.setState({ ExcelLoading: true ,SpinTip:'Excel数据打包中'});\r\n        const result = await getV_Sum_Num_CgInfo(FormData);\r\n        if (result.status === 0) {\r\n            const jo_V_CgInfo = result.jo_V_CgInfo.V_CgInfo;\r\n            var jo_V_CgInfoSum = result.jo_V_CgInfoSum.V_CgInfo;\r\n            //console.dir(jo_V_CgInfo);\r\n            const colums = DdOrder_CgInfo_columns(tempFormData.model);\r\n            this.setState({ ExcelLoading: false });\r\n            var i = 0;\r\n            for (; i < jo_V_CgInfoSum.length; i++) {\r\n                jo_V_CgInfoSum[i].ID = \"ID\" + i;\r\n                let TimeColum = [];\r\n                for (var j=0; j < jo_V_CgInfo.length; j++) {\r\n                    if (model === \"1\") {\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Series === jo_V_CgInfo[j].Series) {\r\n                            let dt = new Date(jo_V_CgInfo[j].Datetime1);\r\n                            if (jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] !== undefined) {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] += jo_V_CgInfo[j].Menge * 1;\r\n                            } else {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] = jo_V_CgInfo[j].Menge * 1;\r\n                            }\r\n                        }\r\n                    }else{\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Lifnr === jo_V_CgInfo[j].Lifnr) {\r\n                            let dt = new Date(jo_V_CgInfo[j].Datetime1);\r\n                            if (jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] !== undefined) {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] += jo_V_CgInfo[j].Menge * 1;\r\n                            } else {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] = jo_V_CgInfo[j].Menge * 1;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n            var timeCol = [];\r\n            for (let k = 0; k < jo_V_CgInfoSum.length; k++) {\r\n                let single = {}\r\n                for (let l = 0; l < colums.length; l++) {\r\n                    single[colums[l].title] = jo_V_CgInfoSum[k][colums[l].dataIndex];\r\n                }\r\n                \r\n                for(let key2 in jo_V_CgInfoSum[k]){\r\n                    if(!isNaN(Number(key2))){\r\n                        single[key2+\" \"] = jo_V_CgInfoSum[k][key2];\r\n                        let temp = timeCol.find(item=>{\r\n                            if(item===Number(key2)){\r\n                                return true;\r\n                            }\r\n                        })\r\n                        if(temp===undefined){\r\n                            timeCol.push(Number(key2));\r\n                        }\r\n                    }\r\n                }\r\n                ExcelJson.push(single);\r\n            }\r\n            //冒泡排序\r\n            for(let k=0;k<timeCol.length;k++){\r\n                for(let l=k;l<timeCol.length;l++){\r\n                    if(timeCol[k]>timeCol[l]){\r\n                        let temp = timeCol[k];\r\n                        timeCol[k] = timeCol[l];\r\n                        timeCol[l] = temp;\r\n                    }\r\n                }\r\n            }\r\n            //将json第一个改变位置\r\n            let book = XLSX.utils.book_new();\r\n            var newRow = {};\r\n            for(let l = 0; l < colums.length; l++){\r\n                newRow[colums[l].title] = jo_V_CgInfoSum[0][colums[l].dataIndex];\r\n            }\r\n\r\n            for(let k=0;k<timeCol.length;k++){\r\n                //newRow[timeCol[k]] =\r\n                newRow[timeCol[k]+\" \"] =  ExcelJson[0][timeCol[k]+\" \"];\r\n            }\r\n            ExcelJson[0] = newRow;\r\n            let sheet = XLSX.utils.json_to_sheet(ExcelJson);\r\n            sheet[\"!cols\"] = [\r\n                { wch: 15 }, { wch: 20 }, { wch: 10 }, { wch: 8 }, { wch: 12 }, { wch: 30 }, { wch: 12 }, { wch: 12 }, { wch: 15 }, { wch: 15 }\r\n            ];\r\n            XLSX.utils.book_append_sheet(book, sheet, 'Sheet1')\r\n            XLSX.writeFile(book, `采购需求单 ${LTOrders} ` + moment().format('YYYYMMDD') + '.xlsx')\r\n        } else {\r\n            this.setState({ ExcelLoading: false });\r\n            message.error(\"网络错误\")\r\n        }\r\n    }\r\n    handleBack = () => {\r\n        const { history } = this.props;\r\n        history.goBack();\r\n    }\r\n    componentDidMount = () => {\r\n        //DIDS 和LTOrdders 必须对应\r\n        var { DIDS, LTOrders } = this.props.location;\r\n        //用于测试后期删掉\r\n        //DIDS = \"76,77,78\";\r\n        //LTOrders = \"LT20210201,LT20210301,LT20210401\";\r\n        if (DIDS === undefined || LTOrders === undefined) {\r\n            DIDS = store.get(\"DdOrder_JjInfo_DIDS\");\r\n            LTOrders = store.get(\"DdOrder_JjInfo_LTOrders\");\r\n        } else {\r\n            store.set(\"DdOrder_JjInfo_DIDS\", DIDS);\r\n            store.set(\"DdOrder_JjInfo_LTOrders\", LTOrders);\r\n        }\r\n        this.setState({ DIDS: DIDS, LTOrders }, () => {\r\n            this.SearchData();\r\n        })\r\n    }\r\n    SearchData = async (pagination = {}) => {\r\n        var { DIDS, SearchContation } = this.state;\r\n        const form = this.formRef.current;\r\n        if (pagination.page === undefined) {\r\n            SearchContation.page = 1;\r\n            SearchContation.pageSize = 100;\r\n        } else {\r\n            SearchContation.page = pagination.page;\r\n            SearchContation.pageSize = pagination.pageSize;\r\n        }\r\n        if (DIDS === \"\" || DIDS === undefined) {\r\n            DIDS = \"0\";\r\n        }\r\n        var tempFormData = form.getFieldsValue(true);\r\n        tempFormData.DIDS = DIDS;\r\n\r\n        if (tempFormData.model !== undefined) {\r\n            let tepModel = tempFormData.model[0];\r\n            delete tempFormData.model;\r\n            tempFormData.model = tepModel;\r\n        }\r\n\r\n        tempFormData.page = SearchContation.page;\r\n        tempFormData.pageSize = SearchContation.pageSize;\r\n\r\n        const FormData = ConvertFomrData(tempFormData);\r\n        this.setState({ loading: true })\r\n        const result = await getV_Sum_Num_CgInfo(FormData);\r\n        if (result.status === 0) {\r\n            const jo_V_CgInfo = result.jo_V_CgInfo.V_CgInfo;\r\n            var jo_V_CgInfoSum = result.jo_V_CgInfoSum.V_CgInfo;\r\n            var i = 0;\r\n            //var j = 0;\r\n            var preSum = {};\r\n            for (; i < jo_V_CgInfoSum.length; i++) {\r\n                if (i === 0) {\r\n                    preSum = { ...jo_V_CgInfoSum[0] };\r\n                }\r\n                jo_V_CgInfoSum[i].ID = \"D\" + i;\r\n                for (var j = 0; j < jo_V_CgInfo.length; j++) {\r\n                    //console.dir(jo_V_CgInfoSum[i].Matnr);\r\n                    if (tempFormData.model === \"1\") {\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Series === jo_V_CgInfo[j].Series) {\r\n                            if (jo_V_CgInfoSum[i].Det === undefined) {\r\n                                jo_V_CgInfoSum[i].Det = [];\r\n                            }\r\n                            jo_V_CgInfoSum[i].Det.push(jo_V_CgInfo[j]);\r\n                        }\r\n                    } else {\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Lifnr === jo_V_CgInfo[j].Lifnr) {\r\n                            if (jo_V_CgInfoSum[i].Det === undefined) {\r\n                                jo_V_CgInfoSum[i].Det = [];\r\n                            }\r\n                            jo_V_CgInfoSum[i].Det.push(jo_V_CgInfo[j]);\r\n                        }\r\n\r\n                    }\r\n                }\r\n                if (i !== 0 && preSum.Matnr === jo_V_CgInfoSum[i].Matnr && tempFormData.model !== \"1\") {\r\n                    jo_V_CgInfoSum[i].Det = [];\r\n                    jo_V_CgInfoSum[i].repeat = true;\r\n                } else if (i !== 0 && preSum.Matnr === jo_V_CgInfoSum[i].Matnr && i !== 0 && preSum.Series === jo_V_CgInfoSum[i].Series && tempFormData.model === \"1\") {\r\n                    jo_V_CgInfoSum[i].Det = [];\r\n                    jo_V_CgInfoSum[i].repeat = true;\r\n                }\r\n                else {\r\n                    preSum = jo_V_CgInfoSum[i];\r\n                }\r\n            }\r\n            this.setState({ loading: false, dataSource: jo_V_CgInfoSum, current: tempFormData.page, dataTotal: result.jo_V_CgInfoSum.V_CgInfo_Count, model: tempFormData.model })\r\n        } else {\r\n            this.setState({ loading: false });\r\n            message.error(\"网络错误\");\r\n        }\r\n    }\r\n    //打开或关闭所有展开项\r\n    OpenOrCloseAll = () => {\r\n        //expandRowKeys\r\n        const { expandRowKeys, dataSource } = this.state;\r\n        if (expandRowKeys.length > 0) {//关闭\r\n            this.setState({ expandRowKeys: [] });\r\n        } else {//展开\r\n            let newArr = [];\r\n            for (let i = 0; i < dataSource.length; i++) {\r\n                newArr.push(dataSource[i].ID);\r\n            }\r\n            this.setState({ expandRowKeys: newArr });\r\n        }\r\n    }\r\n    OpenOrCloseSingle = (record, type) => {\r\n        let { expandRowKeys } = this.state;\r\n        if (type) {\r\n            expandRowKeys.push(record.ID);\r\n        } else {\r\n            expandRowKeys = expandRowKeys.filter(item => {\r\n                if (item === record.ID) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n        }\r\n        this.setState({ expandRowKeys });\r\n    }\r\n    render() {\r\n        const { loading, dataSource, LTOrders, current, dataTotal, ExcelLoading, model, expandRowKeys ,SpinTip} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"toolArea\">\r\n                    <Form layout=\"inline\" ref={this.formRef} >\r\n                        <Form.Item>\r\n                            <LinkButton onClick={() => this.handleBack()}>\r\n                                <ArrowLeftOutlined />返回调度单\r\n                            </LinkButton>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Datetime1\"\r\n                            label=\"时间\"\r\n                        >\r\n                            <RangePicker locale={locale} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Series\"\r\n                            label=\"系列\"\r\n                        >\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Matnr\"\r\n                            label=\"物料编码\"\r\n                        >\r\n                            <Input style={{width:'130px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Maktx\"\r\n                            label=\"物料描述\"\r\n                        >\r\n                            <Input style={{width:'100px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"MRP\"\r\n                            label=\"MRP控制者\"\r\n                        >\r\n                            <Input style={{width:'50px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Lifnr\"\r\n                            label=\"供应商代码\"\r\n                        >\r\n                            <Input style={{width:'60px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Name1\"\r\n                            label=\"供应商名称\"\r\n                        >\r\n                            <Input style={{width:'100px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"model\"\r\n                            label=\"区分系列\"\r\n                        >\r\n                            <Checkbox.Group>\r\n                                <Checkbox value=\"1\"></Checkbox>\r\n                            </Checkbox.Group>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" onClick={() => this.SearchData()} >查询</Button>\r\n                            &nbsp;&nbsp;\r\n\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div style={{ width: \"75%\", float: \"left\" }}>\r\n                        <h1 style={{ fontSize: '20px', paddingLeft: '20px', lineHeight: '35px' }}>\r\n                            <Button onClick={() => this.OpenOrCloseAll()}>展开/关闭所有行</Button>\r\n                            &nbsp;单号:{LTOrders}\r\n                        </h1>\r\n                    </div>\r\n                    <div style={{ width: \"24%\", float: \"left\", textAlign: 'right' }}>\r\n                        <Button type=\"primary\" onClick={() => this.ModalExcelOut()} >Excel导出</Button>\r\n                    </div>\r\n                </div>\r\n                <Table\r\n                    dataSource={dataSource}\r\n                    bordered\r\n                    rowKey=\"ID\"\r\n                    sticky={true}\r\n                    scroll={{ y: 560 }}\r\n                    size=\"middle\"\r\n                    columns={DdOrder_CgInfo_columns(model)}\r\n                    loading={loading}\r\n                    rowClassName={this.TablerepetClassName}\r\n                    pagination={{\r\n                        position: ['bottomCenter'],\r\n                        pageSizeOptions: [20],\r\n                        current: current,\r\n                        total: dataTotal,\r\n                        showTotal: (total, range) => `一共 ${total} 条数据`,\r\n                        pageSize: 100,\r\n                        onChange: (page, pageSize) => {\r\n                            this.SearchData({ page: page, pageSize: pageSize });\r\n                        }\r\n                    }}\r\n                    expandable={{\r\n                        expandRowByClick: true,\r\n                        expandedRowRender,\r\n                        columnWidth: 8,\r\n                        indentSize: 0,\r\n                        expandedRowKeys: expandRowKeys,\r\n                        onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                    }}\r\n                >\r\n                </Table>\r\n                <Spin style={{ position: 'absolute', left: '48%', top: '47%' }} tip={SpinTip} spinning={ExcelLoading}></Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_JjInfo\\index.jsx",["194"],"\r\nimport React, { Component } from 'react'\r\n//导入组件\r\nimport {Button,Input,Form,DatePicker, Table,message,Spin,Checkbox} from 'antd'\r\n//导入方法\r\nimport moment from 'moment'\r\n//自定义组件\r\nimport LinkButton from '../../components/link-button';\r\n//本地化\r\nimport 'moment/locale/zh-cn';\r\nimport locale from 'antd/es/date-picker/locale/zh_CN';\r\n//自定义方法\r\nimport {ConvertFomrData} from '../../utils'\r\n//导入api\r\nimport {getV_Sum_Num_JiInfo} from '../../api'\r\n//Excel\r\nimport XLSX from 'xlsx'\r\n//导入配置\r\nimport {DdOrder_JjInfo_columns} from '../../config/table-columns'\r\n//导入图标\r\nimport {ArrowLeftOutlined} from '@ant-design/icons';\r\n//引入缓存\r\nimport store from 'store'\r\n\r\nconst {RangePicker} = DatePicker;\r\n//表格扩展\r\nconst expandedRowRender = (record,index)=>{\r\n        //DdOrder_Det_Sum_columns\r\n    //console.dir(record);\r\n    const data = record.Det;\r\n    if (data === undefined || data.length === 0) {\r\n        return \"\";\r\n    }\r\n    // var DetVal = [];\r\n    // var newData = {};\r\n    // for (let i = 0; i < data.length; i++) {\r\n    //     if (newData[data[i].Datetime1] === undefined) {\r\n    //         //console.dir(data[i].Datetime1);\r\n    //         newData[data[i].Datetime1] = 0;\r\n    //     }\r\n    // }\r\n    // for (var key in newData) {\r\n    //     for (let i = 0; i < data.length; i++) {\r\n    //         if (key === data[i].Datetime1) {\r\n    //             newData[key] += (data[i].Menge * 1)\r\n    //         }\r\n    //     }\r\n    // }\r\n    //DetVal.push({ ID: 1, ...newData });\r\n    //根据时间创建多个Table\r\n    //moment(dt).isBetween(dt1,dt2);\r\n    var newColums = [];\r\n    var newData = [];\r\n    //是否创建数组\r\n    var dt1 = null;\r\n    var dt2 = null;\r\n    data.forEach((item,index) => {\r\n        let singleColums = [];\r\n        var dt = new Date(item.Datetime1);\r\n        let dt3 = moment(dt);\r\n        dt3.add(1,'m');\r\n        if(newColums.length===0||!moment(dt3).isBetween(dt1,dt2)){\r\n            let singleArr = {};\r\n            dt1 = moment(dt).startOf(\"month\");\r\n            dt2 = moment(dt).endOf(\"month\");\r\n            let dt4 = moment(dt).startOf(\"month\");\r\n            //插入表头的第一列\r\n            singleColums.push({\r\n                title: '日期',\r\n                dataIndex: '日期',\r\n            })\r\n            //插入表头第一列的内容为空\r\n            singleArr[moment(dt1).format('YYYYMM')] = 0;\r\n            singleArr.ID = moment(dt1).format('YYYYMM');\r\n            //插入其他列\r\n            dt4.add(1, 's');\r\n            for(let i=1;i<=31;i++){\r\n                var key = i<10?'0'+i:''+i;\r\n                singleColums.push({\r\n                    title:key,\r\n                    dataIndex:key,\r\n                })\r\n                singleArr[key] = 0;\r\n            }\r\n            singleArr[\"dt\"]=moment(dt3);\r\n            singleArr[\"日期\"]=moment(dt3).format(\"YYYYMM\");\r\n            newColums.push(singleColums);\r\n            newData.push(singleArr);\r\n        }\r\n        \r\n        newColums.forEach((item2,index2)=>{\r\n            let dt5 = moment(newData[index2][\"dt\"]).startOf(\"month\");\r\n            let dt6 = moment(newData[index2][\"dt\"]).endOf(\"month\");\r\n            if(moment(dt3).isBetween(dt5,dt6)){\r\n                newData[index2][moment(dt3).format('DD')] = item.Menge*1;\r\n            }\r\n            //moment(dt3).format('YYYYMM')\r\n            \r\n        })\r\n    })\r\n    // return (<div>\r\n    //     {\r\n    //         newColums.map((_,index)=>{\r\n    //             return(\r\n    //                 <Table\r\n    //                     bordered\r\n    //                     size=\"small\"\r\n    //                     rowKey=\"ID\"\r\n    //                     key={'tab'+index}\r\n    //                     columns={newColums[index]}\r\n    //                     dataSource={newData}\r\n    //                     pagination={false}\r\n    //                 >\r\n    //                 </Table>\r\n    //             )\r\n    //         })\r\n    //     }\r\n    // </div>)\r\n    return <Table\r\n                bordered\r\n                size=\"small\"\r\n                rowKey=\"ID\"\r\n                columns={newColums[0]}\r\n                dataSource={newData}\r\n                pagination={false}\r\n            >\r\n    </Table>\r\n}\r\n//调度单 机加明细查看\r\nexport default class DdOrder_JjInfo extends Component {\r\n    formRef = React.createRef();\r\n    state = {\r\n        dataSource:[],\r\n        loading:true,\r\n        DIDS:\"\",\r\n        LTOrders:\"\",\r\n        ExcelLoading:false,\r\n        //1 显示系列 0 不显示系列\r\n        model:0,\r\n        expandRowKeys:[]\r\n    }\r\n    ModalExcelOut = async ()=>{\r\n        var { DIDS,ExcelLoading,LTOrders,model} = this.state;//当前的订单\r\n        if(ExcelLoading){\r\n            message.warn(\"数据打包中，请勿重复点击\");\r\n            return;\r\n        }\r\n        const form = this.formRef.current;\r\n        var tempFormData = form.getFieldsValue(true);//当前查询条件\r\n        var ExcelJson = [];\r\n        tempFormData.DIDS = DIDS;\r\n        tempFormData.page = 1;\r\n        tempFormData.pageSize = 99999;\r\n        const FormData = ConvertFomrData(tempFormData);\r\n        //添加loading效果\r\n        this.setState({ExcelLoading:true});\r\n        const result = await getV_Sum_Num_JiInfo(FormData);\r\n        if(result.status === 0){\r\n            const jo_V_JjInfo = result.jo_V_JjInfo.V_JjInfo;\r\n            var jo_V_JiInfoSum = result.jo_V_JiInfoSum.V_JjInfo;\r\n            const colums = DdOrder_JjInfo_columns(model);\r\n            var i = 0;\r\n            var j = 0;\r\n            this.setState({ExcelLoading:false})\r\n            for(;i<jo_V_JiInfoSum.length;i++){\r\n                jo_V_JiInfoSum[i].ID = \"ID\"+i;\r\n                for(;j<jo_V_JjInfo.length;j++){\r\n                    if(jo_V_JiInfoSum[i].Matnr===jo_V_JjInfo[j].Matnr){\r\n                        var dt = new Date(jo_V_JjInfo[j].Datetime1);\r\n                        if(jo_V_JiInfoSum[i][moment(dt).format(\"YYYYMMDD\")]!==undefined){\r\n                            jo_V_JiInfoSum[i][moment(dt).format(\"YYYYMMDD\")] += jo_V_JjInfo[j].Menge*1;\r\n                        }else{\r\n                            jo_V_JiInfoSum[i][moment(dt).format(\"YYYYMMDD\")] = jo_V_JjInfo[j].Menge*1;\r\n                        }\r\n                        \r\n                    }else{\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            var timeCol = [];\r\n            for(let k=0;k<jo_V_JiInfoSum.length;k++){\r\n                let single = {}\r\n                \r\n                for(let l=0;l<colums.length;l++){\r\n                    single[colums[l].title] = jo_V_JiInfoSum[k][colums[l].dataIndex];\r\n                }\r\n                for(let key2 in jo_V_JiInfoSum[k]){\r\n                    if(!isNaN(Number(key2))){\r\n                        single[key2+\" \"] = jo_V_JiInfoSum[k][key2];\r\n                        let temp = timeCol.find(item=>{\r\n                            if(item===Number(key2)){\r\n                                return true;\r\n                            }\r\n                        })\r\n                        if(temp===undefined){\r\n                            timeCol.push(Number(key2));\r\n                        }\r\n                    }\r\n                }\r\n                ExcelJson.push(single);\r\n            }\r\n            //冒泡排序\r\n            for(let k=0;k<timeCol.length;k++){\r\n                for(let l=k;l<timeCol.length;l++){\r\n                    if(timeCol[k]>timeCol[l]){\r\n                        let temp = timeCol[k];\r\n                        timeCol[k] = timeCol[l];\r\n                        timeCol[l] = temp;\r\n                    }\r\n                }\r\n            }\r\n\r\n            let book = XLSX.utils.book_new();\r\n            var newRow = {};\r\n            for(let l = 0; l < colums.length; l++){\r\n                newRow[colums[l].title] = jo_V_JiInfoSum[0][colums[l].dataIndex];\r\n            }\r\n\r\n            for(let k=0;k<timeCol.length;k++){\r\n                //newRow[timeCol[k]] =\r\n                newRow[timeCol[k]+\" \"] =  ExcelJson[0][timeCol[k]+\" \"];\r\n            }\r\n            ExcelJson[0] = newRow;\r\n            let sheet = XLSX.utils.json_to_sheet(ExcelJson);\r\n            sheet[\"!cols\"]=[\r\n                {wch:15},{wch:30},{wch:10},{wch:10},{wch:10},{wch:10}\r\n            ];\r\n            XLSX.utils.book_append_sheet(book, sheet, 'Sheet1')\r\n            XLSX.writeFile(book, `机加需求单 ${LTOrders} `+moment().format('YYYYMMDD')+'.xlsx')\r\n        }else{\r\n            message.error(\"网络错误\");\r\n            this.setState({ExcelLoading:false})\r\n        }\r\n        \r\n    }\r\n    handleBack = ()=>{\r\n        const { history } = this.props;\r\n        history.goBack();\r\n    }\r\n    componentDidMount = ()=>{\r\n        //DIDS 和LTOrdders 必须对应\r\n        var {DIDS,LTOrders} = this.props.location;\r\n        //用于测试后期删掉\r\n        //DIDS = \"76,77,78\";\r\n        //LTOrders = \"LT20210201,LT20210301,LT20210401\";\r\n        if(DIDS===undefined || LTOrders===undefined){\r\n            DIDS = store.get(\"DdOrder_JjInfo_DIDS\");\r\n            LTOrders = store.get(\"DdOrder_JjInfo_LTOrders\");\r\n        }else{\r\n            store.set(\"DdOrder_JjInfo_DIDS\",DIDS);\r\n            store.set(\"DdOrder_JjInfo_LTOrders\",LTOrders);\r\n        }\r\n        this.setState({DIDS:DIDS,LTOrders},()=>{\r\n            this.SearchData();\r\n        })\r\n    }\r\n    SearchData = async ()=>{\r\n        var { DIDS} = this.state;\r\n        const form = this.formRef.current;\r\n        if(DIDS===\"\" || DIDS===undefined){\r\n            DIDS=\"0\";\r\n        }\r\n        \r\n        var tempFormData = form.getFieldsValue(true);\r\n        tempFormData.DIDS = DIDS;\r\n        \r\n        if(tempFormData.model!==undefined){\r\n            let tepModel = tempFormData.model[0];\r\n            delete  tempFormData.model;\r\n            tempFormData.model = tepModel;\r\n        }\r\n        const FormData = ConvertFomrData(tempFormData);\r\n        \r\n        this.setState({loading:true})\r\n        const result = await getV_Sum_Num_JiInfo(FormData);\r\n        if(result.status===0){\r\n            const jo_V_JjInfo = result.jo_V_JjInfo.V_JjInfo;\r\n            var jo_V_JiInfoSum = result.jo_V_JiInfoSum.V_JjInfo;\r\n            var i = 0;\r\n            var j = 0;\r\n            for(;i<jo_V_JiInfoSum.length;i++){\r\n                jo_V_JiInfoSum[i].ID = \"ID\"+i;\r\n                for(;j<jo_V_JjInfo.length;j++){\r\n                    if(tempFormData.model===\"1\"){\r\n                        if(jo_V_JiInfoSum[i].Matnr===jo_V_JjInfo[j].Matnr && jo_V_JiInfoSum[i].Series === jo_V_JjInfo[j].Series){\r\n                        \r\n                            if(jo_V_JiInfoSum[i].Det===undefined){\r\n                                jo_V_JiInfoSum[i].Det = [];\r\n                            }\r\n                            jo_V_JiInfoSum[i].Det.push(jo_V_JjInfo[j]);\r\n                        }else{\r\n                            break;\r\n                        }\r\n                    }else{\r\n                        if(jo_V_JiInfoSum[i].Matnr===jo_V_JjInfo[j].Matnr){\r\n                            if(jo_V_JiInfoSum[i].Det===undefined){\r\n                                jo_V_JiInfoSum[i].Det = [];\r\n                            }\r\n                            jo_V_JiInfoSum[i].Det.push(jo_V_JjInfo[j]);\r\n                        }else{\r\n                            break;\r\n                        }\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            //var NewSum = [];\r\n            this.setState({loading:false,dataSource:jo_V_JiInfoSum,model:tempFormData.model})\r\n        }else{\r\n            this.setState({loading:false});\r\n            message.error(\"网络错误\");\r\n        }\r\n    }\r\n    OpenOrCloseAll = () => {\r\n        //expandRowKeys\r\n        const { expandRowKeys, dataSource } = this.state;\r\n        if (expandRowKeys.length > 0) {//关闭\r\n            this.setState({ expandRowKeys: [] });\r\n        } else {//展开\r\n            let newArr = [];\r\n            for (let i = 0; i < dataSource.length; i++) {\r\n                newArr.push(dataSource[i].ID);\r\n            }\r\n            this.setState({ expandRowKeys: newArr });\r\n        }\r\n    }\r\n    OpenOrCloseSingle = (record, type) => {\r\n        let { expandRowKeys } = this.state;\r\n        if (type) {\r\n            expandRowKeys.push(record.ID);\r\n        } else {\r\n            expandRowKeys = expandRowKeys.filter(item => {\r\n                if (item === record.ID) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n        }\r\n        this.setState({ expandRowKeys });\r\n    }\r\n    render() {\r\n        const {loading,dataSource,LTOrders,ExcelLoading,model,expandRowKeys} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"toolArea\">\r\n                    <Form layout=\"inline\" ref={this.formRef} >\r\n                        <Form.Item>\r\n                            <LinkButton onClick={() => this.handleBack()}>\r\n                                <ArrowLeftOutlined />返回调度单\r\n                            </LinkButton>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Datetime1\"\r\n                            label=\"时间\"\r\n                        >\r\n                            <RangePicker locale={locale}/>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Series\"\r\n                            label=\"系列\"\r\n                        >\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Matnr\"\r\n                            label=\"物料编码\"\r\n                        >\r\n                            <Input></Input>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Maktx\"\r\n                            label=\"物料描述\"\r\n                        >\r\n                            <Input></Input>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"bz\"\r\n                            label=\"班组\"\r\n                        >\r\n                            <Input></Input>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"model\"\r\n                            label=\"区分系列\"\r\n                        >\r\n                            <Checkbox.Group>\r\n                                <Checkbox value=\"1\"></Checkbox>\r\n                            </Checkbox.Group>\r\n                            \r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" onClick={()=>this.SearchData()} >查询</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div style={{width:\"75%\",float:\"left\"}}>\r\n                        <h1 style={{fontSize:'20px',paddingLeft:'20px',lineHeight:'35px'}}>\r\n                        <Button onClick={() => this.OpenOrCloseAll()}>展开/关闭所有行</Button>\r\n                            单号:{LTOrders}\r\n                            </h1>\r\n                    </div>\r\n                    <div style={{width:\"24%\",float:\"left\",textAlign:'right'}}>\r\n                        <Button type=\"primary\" onClick={()=>this.ModalExcelOut()} >Excel导出</Button>\r\n                    </div>\r\n                </div>\r\n                \r\n                <Table\r\n                dataSource = {dataSource}\r\n                bordered\r\n                rowKey=\"ID\"\r\n                sticky={true}\r\n                size = \"middle\"\r\n                columns = {DdOrder_JjInfo_columns(model)}\r\n                loading = {loading}\r\n                pagination={false}\r\n                expandable={{\r\n                    expandRowByClick: true,\r\n                    expandedRowRender,\r\n                    columnWidth:4,\r\n                    indentSize: 0,\r\n                    expandedRowKeys: expandRowKeys,\r\n                    onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                }}\r\n                >\r\n\r\n                </Table>\r\n                <Spin style={{position:'absolute',left:'48%',top:'47%'}} tip=\"数据打包Excel...\" spinning={ExcelLoading}></Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_BjInfo\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\DdOrder_BjInfo2\\index.jsx",["195"],"import React, { Component } from 'react'\r\n//引入antd\r\nimport { Button, Table,Form,Input,Spin} from 'antd'\r\nimport moment from 'moment'\r\n//自定义组件\r\nimport LinkButton from '../../components/link-button';\r\nimport { ArrowLeftOutlined } from '@ant-design/icons';\r\n//引入api\r\nimport { getV_Sum_Num_BjInfo2,getV_BjInfo } from '../../api'\r\n//引入工具类\r\nimport { ConvertFomrData,downloadExcel } from '../../utils'\r\n//引入配置\r\nimport { DdOrder_BjInfo_First,V_BjInfo_columns} from '../../config/table-columns'\r\n//引入样式\r\nimport './index.less'\r\n//引入缓存\r\nimport store from 'store'\r\nexport default class DdOrder_BjInfo2 extends Component {\r\n    formRef = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        var { DIDS, LTOrders } = this.props.location;\r\n        if (DIDS === undefined || LTOrders === undefined) {\r\n            DIDS = store.get(\"DdOrder_BjInfo_DIDS\");\r\n            LTOrders = store.get(\"DdOrder_BjInfo_LTOrders\");\r\n        } else {\r\n            store.set(\"DdOrder_BjInfo_DIDS\", DIDS);\r\n            store.set(\"DdOrder_BjInfo_LTOrders\", LTOrders);\r\n        }\r\n        this.state = {\r\n            DIDS:DIDS,\r\n            LTOrders:LTOrders,\r\n            dataSource: [],\r\n            loading: true,\r\n            SearchContation: {},\r\n            current: 1,\r\n            dataTotal: 0,\r\n            ExcelLoading: false,\r\n            model: 0,\r\n            expandRowKeys: [],\r\n            searchText:'',\r\n            SpinTip:'',\r\n        }\r\n    }\r\n    //处理表格查询功能\r\n    handleSearch = (selectedKeys, confirm, dataIndex)=>{\r\n        const {SearchContation} = this.state;\r\n        confirm({ closeDropdown: false })\r\n        var filters = {};\r\n        if(selectedKeys[0]!==undefined){\r\n            filters[dataIndex] = selectedKeys[0];\r\n            this.handleTableChange({},filters,{},0);\r\n        }else{\r\n            SearchContation[dataIndex]=\"\";\r\n            this.handleTableChange({},{},{},0);\r\n        }\r\n    }\r\n    //重置\r\n    handleReset = clearFilters=>{\r\n        clearFilters();\r\n        this.setState({ searchText: '' });\r\n    }\r\n    handleTableChange = async (pagination = {}, filters = {}, sorter = {},model) => {\r\n        let { SearchContation,DIDS } = this.state;\r\n        console.dir(filters);\r\n        if (pagination.current === undefined) {\r\n            SearchContation.page = 1;\r\n            SearchContation.pageSize = 100;\r\n        } else {\r\n            SearchContation.page = pagination.current;\r\n            SearchContation.pageSize = pagination.pageSize;\r\n        }\r\n        //添加条件\r\n        if (filters !== {}) {\r\n            for (let key in filters) {\r\n                SearchContation[key] = filters[key];\r\n            }\r\n        }\r\n        // 添加层级的条件\r\n        // if(this.SearchSelect !==undefined && this.SearchSelect.value!==undefined){\r\n        //     SearchContation[\"level\"] = this.SearchSelect.value;\r\n        // }\r\n        // if(this.SearchSelect2 !==undefined && this.SearchSelect2.value!==undefined){\r\n        //     SearchContation[\"level2\"] = this.SearchSelect2.value;\r\n        // }\r\n        //添加表单的条件\r\n        const formReftemp = this.formRef.current;\r\n        var tempFormData = formReftemp.getFieldsValue(true);//当前查询条件\r\n        //创建提交后台数据\r\n        SearchContation.DIDS = DIDS;\r\n        //console.dir(tempFormData.Series);\r\n        // if((tempFormData.Series===\"\" || tempFormData.Series===undefined) && model===1){\r\n        //     message.warn(\"请输入系列，再查询\");\r\n        //     return;\r\n        // }\r\n        if(tempFormData.Series!==\"\" && tempFormData.Series!==undefined){\r\n            SearchContation.model=1;\r\n        }\r\n        SearchContation = {...SearchContation,...tempFormData}\r\n        const formData = ConvertFomrData(SearchContation);\r\n        this.setState({ loading: true });\r\n        const result = await getV_Sum_Num_BjInfo2(formData);\r\n        if (result.status === 0) {\r\n            const { V_BjInfo } = result.data;\r\n            //console.dir(V_BjInfo);\r\n            if (V_BjInfo.length === 0) {\r\n                //console.dir(V_BjInfo.length);\r\n                this.setState({ dataSource: [], current: 1, dataTotal: 0, loading: false });\r\n            } else {\r\n                //console.dir(\"index\");\r\n                //val.replace(/\\b(0+)/gi,\"\")\r\n                V_BjInfo.forEach(item => {\r\n                    item.FirstCode = item.FirstCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.SecondCode = item.SecondCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.ThirdCode = item.ThirdCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.FourthCode = item.FourthCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.FifthCode = item.FifthCode.replace(/\\b(0+)/gi, \"\");\r\n                })\r\n                this.Arr = [];\r\n                this.expandRowKeys2 = [];\r\n                this.deepTree(V_BjInfo, 0, {});\r\n                //console.dir(this.expandRowKeys);\r\n                let tempSource = this.Arr.slice(0,9);\r\n                this.setState({ dataSource: tempSource, current:1,dataTotal:this.Arr.length ,loading: false,expandRowKeys: this.expandRowKeys2,SearchContation:SearchContation});\r\n            }\r\n        }\r\n    }\r\n    //回退功能\r\n    handleBack = () => {\r\n        const { history } = this.props;\r\n        history.goBack();\r\n    }\r\n    //Direction Right Down Left\r\n    Codes = [\"FirstCode\", \"SecondCode\", \"ThirdCode\", \"FourthCode\", \"FifthCode\"];\r\n    CodesName = [\"FirstName\", \"SecondName\", \"ThirdName\", \"FourthName\", \"FifthName\"];\r\n    Arr = [];\r\n    expandRowKeys2 = [];\r\n    //处理后台钣金的数据\r\n    deepTree(data, index, pre) {\r\n        if (index >= data.length) {\r\n            return;\r\n        }\r\n        let Current = data[index];\r\n        let keyIndex = 0;\r\n        //var preNode = {};\r\n        var nowNode = {};\r\n        var CurrentNode = {};\r\n        var flg = false;//后面是否都是新插入 \r\n        let key;\r\n        let NameKey;\r\n        //let tempNode = {\"Code\":Current[key],\"Num\":Current[\"Num\"+keyIndex],\"children\":childrenNode};\r\n        //处理第一次空的插入\r\n        if (pre === {}) {\r\n            for (; keyIndex < this.Codes.length; keyIndex++) {\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                //\r\n\r\n                let tempNode = { Code: Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], Num: Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], children: [] };\r\n                if (keyIndex === 0) {\r\n                    pre = tempNode;\r\n                    nowNode = tempNode;\r\n                    this.Arr.push(nowNode);\r\n                    this.expandRowKeys2.push(nowNode.Code);\r\n                } else {\r\n                    nowNode.children.push(tempNode);\r\n                    nowNode = tempNode;\r\n                }\r\n            }\r\n            keyIndex = 0;\r\n            index += 1;\r\n            Current = data[index];\r\n        }\r\n        //判断是否要新插入\r\n        key = this.Codes[0];\r\n        NameKey = this.CodesName[0];\r\n        if (Current[key] !== pre[\"Code\"]) {//新插入\r\n            let tempNode = { \"Code\": Current[key], Code2: (1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + 1], Name: Current[NameKey], \"children\": [] };\r\n            CurrentNode = tempNode;\r\n            this.Arr.push(CurrentNode);\r\n            this.expandRowKeys2.push(CurrentNode.Code);\r\n            flg = true;\r\n        }\r\n        if (flg) {//全是新插入\r\n            for (keyIndex = 1; keyIndex < this.Codes.length; keyIndex++) {\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                if (Current[key] !== \"\") {\r\n                    let tempNode = { \"Code\": Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], \"children\": [] };\r\n                    CurrentNode.children.push(tempNode);\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    CurrentNode = tempNode;\r\n                }\r\n\r\n            }\r\n        } else {//不是全部都是全新插入 \r\n            //寻找第一个Code不同的点\r\n            for (keyIndex = 1; keyIndex < this.Codes.length; keyIndex++) {\r\n                //undefined\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                if (Current[key] === \"\") {\r\n                    break;\r\n                }\r\n                if (flg) {//后面全是新插入\r\n                    if (Current[key] === \"\") {\r\n                        break;\r\n                    }\r\n                    let tempNode = { \"Code\": Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], \"children\": [] };\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    pre.children.push(tempNode);\r\n                    pre = tempNode;\r\n                    continue;\r\n                }\r\n                let tempNode = pre.children.find(item => {\r\n                    if (item[\"Code\"] === \"\") {\r\n                        return false;\r\n                    }\r\n                    if (Current[key] === item[\"Code\"]) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                })\r\n                if (tempNode === undefined) {//需要新插入\r\n                    if (Current[key] === \"\") {\r\n                        break;\r\n                    }\r\n\r\n                    tempNode = { Code: Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], \"children\": [] };\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    pre.children.push(tempNode);\r\n                    pre = tempNode;\r\n                    flg = true;\r\n                } else {//不需要新插入\r\n                    pre = tempNode;\r\n                }\r\n            }\r\n        }\r\n        this.deepTree(data, index + 1, this.Arr[this.Arr.length - 1]);\r\n    }\r\n\r\n    OpenOrCloseSingle = (record, type) => {\r\n        let { expandRowKeys } = this.state;\r\n        if (type) {\r\n            expandRowKeys.push(record.Code);\r\n        } else {\r\n            expandRowKeys = expandRowKeys.filter(item => {\r\n                if (item === record.Code) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n        }\r\n        this.setState({ expandRowKeys });\r\n    }\r\n    ExpandRow = (type) => {\r\n        const { dataSource } = this.state;\r\n        let expandRowKeys = [];\r\n        for (let i = 0; i < type; i++) {\r\n            if (i === 0) {\r\n                expandRowKeys = [];\r\n            }\r\n            if (i === 1) {\r\n                let tempKeys = dataSource.map(item => item.Code)\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 2) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        tempKeys.push(item2.Code);\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 3) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        item2.children.forEach(item3 => tempKeys.push(item3.Code))\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 3) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        item2.children.forEach(item3 => {\r\n                            item3.children.forEach(item4 => tempKeys.push(item4.Code))\r\n                        })\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n        }\r\n        this.setState({ expandRowKeys })\r\n    }\r\n    ExcelOut = async ()=>{\r\n        const {SearchContation} = this.state;\r\n        const ColumsWch = [\r\n            {wch:10},\r\n            {wch:20},\r\n            {wch:45},\r\n            {wch:20},\r\n            {wch:45},\r\n            {wch:20},\r\n            {wch:45},\r\n            {wch:20},\r\n            {wch:45},\r\n            {wch:20},\r\n            {wch:45},\r\n            {wch:10},\r\n            {wch:10}\r\n          ]\r\n        this.setState({SpinTip:'Excel导出中，请等待',ExcelLoading:true});\r\n        SearchContation.page = 1;\r\n        SearchContation.pageSize = 999999;\r\n        const formData = ConvertFomrData(SearchContation);\r\n        //\r\n        const result = await getV_BjInfo(formData);\r\n        if(result.status===0){\r\n            const {V_BjInfo} = result.data;\r\n            V_BjInfo.forEach(item=>{\r\n                item.Datetime1 = moment(item.Datetime1).format(\"YYYYMMDD\");\r\n            })\r\n            downloadExcel(V_BjInfo,V_BjInfo_columns,ColumsWch,\"钣金需求单\");\r\n            this.setState({SpinTip:'Excel导出中，请等待',ExcelLoading:false});\r\n        }\r\n    }\r\n    componentDidMount = async () => {\r\n        this.handleTableChange();\r\n    }\r\n    render() {\r\n        const { dataSource, loading, expandRowKeys ,SearchContation,current,dataTotal,SpinTip,ExcelLoading,LTOrders} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <div style={{margin:'10px',float:\"left\",width:'80%'}}>\r\n                    <Form layout=\"inline\" ref={this.formRef}>\r\n                        <Form.Item>\r\n                            <LinkButton onClick={() => this.handleBack()}>\r\n                                <ArrowLeftOutlined />返回调度单\r\n                            </LinkButton>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            label=\"系列\"\r\n                            name=\"Series\"\r\n                            style={{width:'160px'}}\r\n                        >\r\n                            <Input placeholder=\"默认所有系列\"></Input>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" onClick={()=>this.handleTableChange({},{},{},1)}>查询</Button>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button onClick={() => { this.ExpandRow(1) }}>查看第一层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(2) }}>查看第二层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(3) }}>查看第三层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(4) }}>查看第四层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(5) }}>查看第五层</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div style={{float:'left',textAlign:'right',width:'16%'}}>\r\n                    <Button type=\"primary\" onClick={()=>this.ExcelOut()}>导出Excel</Button>\r\n                </div>\r\n                <div style={{float:\"left\",width:\"100%\"}}>\r\n                    <h2 style={{float:\"left\"}}>调度单:{LTOrders}</h2>\r\n                    {\r\n                    SearchContation.FirstCode===\"\"||SearchContation.FirstCode===undefined?\"\":\r\n                        <h2 style={{float:\"left\"}}>物料编码:{SearchContation.FirstCode}&nbsp;</h2>\r\n                    }\r\n                    {\r\n                        SearchContation.FirstName===\"\"||SearchContation.FirstName===undefined?\"\":\r\n                        <h2 style={{float:\"left\"}}>物料名称:{SearchContation.FirstName}</h2>\r\n                    }\r\n                </div>\r\n                <Table\r\n                    dataSource={dataSource}\r\n                    bordered\r\n                    rowKey=\"Code\"\r\n                    sticky={true}\r\n                    scroll={{ y: 600 }}\r\n                    size=\"small\"\r\n                    columns={DdOrder_BjInfo_First(this)}\r\n                    loading={loading}\r\n                    indentSize={15}\r\n                    onRow={record => {\r\n                        return {\r\n                            onMouseEnter: event => { },\r\n                            onMouseLeave: event => { }\r\n                        }\r\n                    }}\r\n                    expandable={{\r\n                        expandedRowKeys: expandRowKeys,\r\n                        onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                    }}\r\n                    pagination={{\r\n                        position: ['bottomCenter'],\r\n                        pageSizeOptions:[10],\r\n                        current:current,\r\n                        total:dataTotal,\r\n                        showTotal:(total, range) => `一共 ${total} 条数据`,\r\n                        pageSize:10,\r\n                        onChange:(page,pageSize)=>{\r\n                            let start = (page-1)*pageSize;\r\n                            let end = (page)*pageSize;\r\n                            if(this.Arr.length!==0){\r\n                                if(end>this.Arr.length){\r\n                                    end = this.Arr.length;\r\n                                }\r\n                                let tempArr = this.Arr.slice(start,end-1);\r\n                                this.setState({dataSource:tempArr,current:page});\r\n                            }\r\n                            //this.Arr\r\n                            //this.handleTableChange({page:page,pageSize:pageSize});\r\n                        }\r\n                    }}\r\n                // expandable={{\r\n                //     expandRowByClick: true,\r\n                //     expandedRowRender,\r\n                //     columnWidth: 3,\r\n                //     indentSize: 0,\r\n                //     expandedRowKeys: expandRowKeys1,\r\n                //     onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                // }}\r\n                >\r\n\r\n                </Table>\r\n                <Spin style={{ position: 'absolute', left: '48%', top: '47%' }} tip={SpinTip} spinning={ExcelLoading}></Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report2_1\\index.jsx",["196"],"import React, { Component } from 'react'\r\n//引入antd\r\nimport { Button, Table,Form,Input,Spin} from 'antd'\r\nimport moment from 'moment'\r\n//引入api\r\nimport { getV_Sum_Num_BjInfo2,getV_BjInfo } from '../../api'\r\n//引入工具类\r\nimport { ConvertFomrData,downloadExcel } from '../../utils'\r\n//引入配置\r\nimport { DdOrder_BjInfo_First,V_BjInfo_columns} from '../../config/table-columns'\r\n//引入样式\r\nimport './index.less'\r\n//钣金 该页面只要传用户ID即可 在api内已经嵌入了该用户ID了因此不需要\r\nexport default class Report2_1 extends Component {\r\n    formRef = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dataSource: [],\r\n            loading: true,\r\n            SearchContation: {},\r\n            current: 1,\r\n            dataTotal: 0,\r\n            ExcelLoading: false,\r\n            model: 0,\r\n            expandRowKeys: [],\r\n            searchText:'',\r\n            SpinTip:'',\r\n            level:'',\r\n            level2:'',\r\n        }\r\n    }\r\n    //处理表格查询功能\r\n    handleSearch = (selectedKeys, confirm, dataIndex)=>{\r\n        const {SearchContation} = this.state;\r\n        confirm({ closeDropdown: false })\r\n        var filters = {};\r\n        if(selectedKeys[0]!==undefined){\r\n            filters[dataIndex] = selectedKeys[0];\r\n            this.handleTableChange({},filters,{},0);\r\n        }else{\r\n            SearchContation[dataIndex]=\"\";\r\n            this.handleTableChange({},{},{},0);\r\n        }\r\n    }\r\n    //重置\r\n    handleReset = clearFilters=>{\r\n        clearFilters();\r\n        this.setState({ searchText: '' });\r\n    }\r\n    handleTableChange = async (pagination = {}, filters = {}, sorter = {},model) => {\r\n        let { SearchContation } = this.state;\r\n        console.dir(filters);\r\n        if (pagination.current === undefined) {\r\n            SearchContation.page = 1;\r\n            SearchContation.pageSize = 100;\r\n        } else {\r\n            SearchContation.page = pagination.current;\r\n            SearchContation.pageSize = pagination.pageSize;\r\n        }\r\n        //添加条件\r\n        if (filters !== {}) {\r\n            for (let key in filters) {\r\n                SearchContation[key] = filters[key];\r\n            }\r\n        }\r\n        // 添加层级的条件\r\n        if(this.SearchSelect !==undefined && this.SearchSelect.value!==undefined){\r\n            SearchContation[\"level\"] = this.SearchSelect.value;\r\n        }\r\n        if(this.SearchSelect2 !==undefined && this.SearchSelect2.value!==undefined){\r\n            SearchContation[\"level2\"] = this.SearchSelect2.value;\r\n        }\r\n        //添加表单的条件\r\n        const formReftemp = this.formRef.current;\r\n        var tempFormData = formReftemp.getFieldsValue(true);//当前查询条件\r\n        //创建提交后台数据 这个页面不需要通过调度单查询\r\n        //SearchContation.DIDS = DIDS;\r\n        //console.dir(tempFormData.Series);\r\n        // if((tempFormData.Series===\"\" || tempFormData.Series===undefined) && model===1){\r\n        //     message.warn(\"请输入系列，再查询\");\r\n        //     return;\r\n        // }\r\n        if(tempFormData.Series!==\"\" && tempFormData.Series!==undefined){\r\n            SearchContation.model=1;\r\n        }\r\n        SearchContation = {...SearchContation,...tempFormData}\r\n        \r\n        const formData = ConvertFomrData(SearchContation);\r\n        this.setState({ loading: true });\r\n        const result = await getV_Sum_Num_BjInfo2(formData);\r\n        if (result.status === 0) {\r\n            const { V_BjInfo } = result.data;\r\n            //console.dir(V_BjInfo);\r\n            if (V_BjInfo.length === 0) {\r\n                //console.dir(V_BjInfo.length);\r\n                this.setState({ dataSource: [], current: 1, dataTotal: 0, loading: false });\r\n            } else {\r\n                //console.dir(\"index\");\r\n                //val.replace(/\\b(0+)/gi,\"\")\r\n                V_BjInfo.forEach(item => {\r\n                    item.FirstCode = item.FirstCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.SecondCode = item.SecondCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.ThirdCode = item.ThirdCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.FourthCode = item.FourthCode.replace(/\\b(0+)/gi, \"\");\r\n                    item.FifthCode = item.FifthCode.replace(/\\b(0+)/gi, \"\");\r\n                })\r\n                this.Arr = [];\r\n                this.expandRowKeys2 = [];\r\n                this.deepTree(V_BjInfo, 0, {});\r\n                //console.dir(this.expandRowKeys);\r\n                let tempSource = this.Arr.slice(0,9);\r\n                this.setState({ dataSource: tempSource, current:1,dataTotal:this.Arr.length ,loading: false,expandRowKeys: this.expandRowKeys2,level:SearchContation.level,level2:SearchContation.level2,SearchContation:SearchContation});\r\n            }\r\n        }\r\n    }\r\n    Codes = [\"FirstCode\", \"SecondCode\", \"ThirdCode\", \"FourthCode\", \"FifthCode\"];\r\n    CodesName = [\"FirstName\", \"SecondName\", \"ThirdName\", \"FourthName\", \"FifthName\"];\r\n    Arr = [];\r\n    expandRowKeys2 = [];\r\n    //处理后台钣金的数据\r\n    deepTree(data, index, pre) {\r\n        if (index >= data.length) {\r\n            return;\r\n        }\r\n        let Current = data[index];\r\n        let keyIndex = 0;\r\n        //var preNode = {};\r\n        var nowNode = {};\r\n        var CurrentNode = {};\r\n        var flg = false;//后面是否都是新插入 \r\n        let key;\r\n        let NameKey;\r\n        //let tempNode = {\"Code\":Current[key],\"Num\":Current[\"Num\"+keyIndex],\"children\":childrenNode};\r\n        //处理第一次空的插入\r\n        if (pre === {}) {\r\n            for (; keyIndex < this.Codes.length; keyIndex++) {\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                //\r\n\r\n                let tempNode = { Code: Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], Num: Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], children: [] };\r\n                if (keyIndex === 0) {\r\n                    pre = tempNode;\r\n                    nowNode = tempNode;\r\n                    this.Arr.push(nowNode);\r\n                    this.expandRowKeys2.push(nowNode.Code);\r\n                } else {\r\n                    nowNode.children.push(tempNode);\r\n                    nowNode = tempNode;\r\n                }\r\n            }\r\n            keyIndex = 0;\r\n            index += 1;\r\n            Current = data[index];\r\n        }\r\n        //判断是否要新插入\r\n        key = this.Codes[0];\r\n        NameKey = this.CodesName[0];\r\n        if (Current[key] !== pre[\"Code\"]) {//新插入\r\n            let tempNode = { \"Code\": Current[key], Code2: (1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + 1], Name: Current[NameKey], \"children\": [] };\r\n            CurrentNode = tempNode;\r\n            this.Arr.push(CurrentNode);\r\n            this.expandRowKeys2.push(CurrentNode.Code);\r\n            flg = true;\r\n        }\r\n        if (flg) {//全是新插入\r\n            for (keyIndex = 1; keyIndex < this.Codes.length; keyIndex++) {\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                if (Current[key] !== \"\") {\r\n                    let tempNode = { \"Code\": Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], \"children\": [] };\r\n                    CurrentNode.children.push(tempNode);\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    CurrentNode = tempNode;\r\n                }\r\n\r\n            }\r\n        } else {//不是全部都是全新插入 \r\n            //寻找第一个Code不同的点\r\n            for (keyIndex = 1; keyIndex < this.Codes.length; keyIndex++) {\r\n                //undefined\r\n                key = this.Codes[keyIndex];\r\n                NameKey = this.CodesName[keyIndex];\r\n                if (Current[key] === \"\") {\r\n                    break;\r\n                }\r\n                if (flg) {//后面全是新插入\r\n                    if (Current[key] === \"\") {\r\n                        break;\r\n                    }\r\n                    let tempNode = { \"Code\": Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], \"children\": [] };\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    pre.children.push(tempNode);\r\n                    pre = tempNode;\r\n                    continue;\r\n                }\r\n                let tempNode = pre.children.find(item => {\r\n                    if (item[\"Code\"] === \"\") {\r\n                        return false;\r\n                    }\r\n                    if (Current[key] === item[\"Code\"]) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                })\r\n                if (tempNode === undefined) {//需要新插入\r\n                    if (Current[key] === \"\") {\r\n                        break;\r\n                    }\r\n\r\n                    tempNode = { Code: Current[key], Code2: (keyIndex + 1) + \"层物料编码:\" + Current[key], \"Num\": Current[\"Num\" + (keyIndex + 1)], Name: Current[NameKey], \"children\": [] };\r\n                    this.expandRowKeys2.push(tempNode.Code);\r\n                    pre.children.push(tempNode);\r\n                    pre = tempNode;\r\n                    flg = true;\r\n                } else {//不需要新插入\r\n                    pre = tempNode;\r\n                }\r\n            }\r\n        }\r\n        this.deepTree(data, index + 1, this.Arr[this.Arr.length - 1]);\r\n    }\r\n\r\n    OpenOrCloseSingle = (record, type) => {\r\n        let { expandRowKeys } = this.state;\r\n        if (type) {\r\n            expandRowKeys.push(record.Code);\r\n        } else {\r\n            expandRowKeys = expandRowKeys.filter(item => {\r\n                if (item === record.Code) {\r\n                    return false;\r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n        }\r\n        this.setState({ expandRowKeys });\r\n    }\r\n\r\n    ExpandRow = (type) => {\r\n        const { dataSource } = this.state;\r\n        let expandRowKeys = [];\r\n        for (let i = 0; i < type; i++) {\r\n            if (i === 0) {\r\n                expandRowKeys = [];\r\n            }\r\n            if (i === 1) {\r\n                let tempKeys = dataSource.map(item => item.Code)\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 2) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        tempKeys.push(item2.Code);\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 3) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        item2.children.forEach(item3 => tempKeys.push(item3.Code))\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n            if (i === 3) {\r\n                let tempKeys = [];\r\n                dataSource.forEach(item => {\r\n                    item.children.forEach(item2 => {\r\n                        item2.children.forEach(item3 => {\r\n                            item3.children.forEach(item4 => tempKeys.push(item4.Code))\r\n                        })\r\n                    })\r\n                })\r\n                expandRowKeys = [...expandRowKeys, ...tempKeys]\r\n            }\r\n        }\r\n        this.setState({ expandRowKeys })\r\n    }\r\n\r\n    ExcelOut = async ()=>{\r\n        const {SearchContation} = this.state;\r\n        const ColumsWch = [\r\n            {wch:10},\r\n            {wch:20},\r\n            {wch:45},\r\n            {wch:20},\r\n            {wch:45},\r\n            {wch:20},\r\n            {wch:45},\r\n            {wch:20},\r\n            {wch:45},\r\n            {wch:20},\r\n            {wch:45},\r\n            {wch:10},\r\n            {wch:10}\r\n          ]\r\n        this.setState({SpinTip:'Excel导出中，请等待',ExcelLoading:true});\r\n        SearchContation.page = 1;\r\n        SearchContation.pageSize = 999999;\r\n        const formData = ConvertFomrData(SearchContation);\r\n        //\r\n        const result = await getV_BjInfo(formData);\r\n        if(result.status===0){\r\n            const {V_BjInfo} = result.data;\r\n            V_BjInfo.forEach(item=>{\r\n                item.Datetime1 = moment(item.Datetime1).format(\"YYYYMMDD\");\r\n            })\r\n            downloadExcel(V_BjInfo,V_BjInfo_columns,ColumsWch,\"钣金需求单\");\r\n            this.setState({SpinTip:'Excel导出中，请等待',ExcelLoading:false});\r\n        }\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        this.handleTableChange();\r\n    }\r\n\r\n    render() {\r\n        const { dataSource, loading, expandRowKeys ,SearchContation,current,dataTotal,SpinTip,ExcelLoading,level,level2} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <div style={{margin:'10px',float:\"left\",width:'80%'}}>\r\n                <Form layout=\"inline\" ref={this.formRef}>\r\n                        <Form.Item\r\n                            label=\"系列\"\r\n                            name=\"Series\"\r\n                            style={{width:'160px'}}\r\n                        >\r\n                            <Input placeholder=\"默认所有系列\"></Input>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" onClick={()=>this.handleTableChange({},{},{},1)}>查询</Button>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button onClick={() => { this.ExpandRow(1) }}>查看第一层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(2) }}>查看第二层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(3) }}>查看第三层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(4) }}>查看第四层</Button>\r\n                            &ensp;\r\n                            <Button onClick={() => { this.ExpandRow(5) }}>查看第五层</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div style={{float:'left',textAlign:'right',width:'16%'}}>\r\n                    <Button type=\"primary\" onClick={()=>this.ExcelOut()}>导出Excel</Button>\r\n                </div>\r\n                <div style={{float:\"left\",width:\"100%\"}}>\r\n                    {\r\n                    SearchContation.FirstCode===\"\"||SearchContation.FirstCode===undefined?\"\":\r\n                        <h2 style={{float:\"left\"}}>物料编码:{level===null||level===undefined?'1':level}层,{SearchContation.FirstCode}&nbsp;</h2>\r\n                    }\r\n                    {\r\n                        SearchContation.FirstName===\"\"||SearchContation.FirstName===undefined?\"\":\r\n                        <h2 style={{float:\"left\"}}>物料名称:{level2===null||level2===undefined?'1':level2}层,{SearchContation.FirstName}</h2>\r\n                    }\r\n                </div>\r\n                <Table\r\n                    dataSource={dataSource}\r\n                    bordered\r\n                    rowKey=\"Code\"\r\n                    sticky={true}\r\n                    scroll={{ y: 600 }}\r\n                    size=\"small\"\r\n                    columns={DdOrder_BjInfo_First(this)}\r\n                    loading={loading}\r\n                    indentSize={15}\r\n                    onRow={record => {\r\n                        return {\r\n                            onMouseEnter: event => { },\r\n                            onMouseLeave: event => { }\r\n                        }\r\n                    }}\r\n                    expandable={{\r\n                        expandedRowKeys: expandRowKeys,\r\n                        onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                    }}\r\n                    pagination={{\r\n                        position: ['bottomCenter'],\r\n                        pageSizeOptions:[10],\r\n                        current:current,\r\n                        total:dataTotal,\r\n                        showTotal:(total, range) => `一共 ${total} 条数据`,\r\n                        pageSize:10,\r\n                        onChange:(page,pageSize)=>{\r\n                            let start = (page-1)*pageSize;\r\n                            let end = (page)*pageSize;\r\n                            if(this.Arr.length!==0){\r\n                                if(end>this.Arr.length){\r\n                                    end = this.Arr.length;\r\n                                }\r\n                                let tempArr = this.Arr.slice(start,end-1);\r\n                                this.setState({dataSource:tempArr,current:page});\r\n                            }\r\n                            //this.Arr\r\n                            //this.handleTableChange({page:page,pageSize:pageSize});\r\n                        }\r\n                    }}\r\n                // expandable={{\r\n                //     expandRowByClick: true,\r\n                //     expandedRowRender,\r\n                //     columnWidth: 3,\r\n                //     indentSize: 0,\r\n                //     expandedRowKeys: expandRowKeys1,\r\n                //     onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                // }}\r\n                >\r\n                </Table>\r\n                <Spin style={{ position: 'absolute', left: '48%', top: '47%' }} tip={SpinTip} spinning={ExcelLoading}></Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report3_1\\index.jsx",[],"D:\\WorkSpace\\luntuo\\luntuoFront\\src\\pages\\Report4_1\\index.jsx",["197","198","199"],"import React, { Component } from 'react'\r\n//导入组件\r\nimport { Button, Input, Form, DatePicker, Table, message, Spin, Checkbox } from 'antd'\r\n//导入方法\r\nimport moment from 'moment'\r\n//自定义组件\r\nimport LinkButton from '../../components/link-button';\r\n//引入less\r\nimport './index.less'\r\n//本地化\r\nimport 'moment/locale/zh-cn';\r\nimport locale from 'antd/es/date-picker/locale/zh_CN';\r\n//自定义方法\r\nimport { ConvertFomrData } from '../../utils'\r\n//导入api\r\nimport { getV_Sum_Num_CgInfo } from '../../api'\r\n//Excel\r\nimport XLSX from 'xlsx'\r\n//导入配置\r\nimport { DdOrder_CgInfo_columns } from '../../config/table-columns'\r\n//引入缓存\r\nimport store from 'store'\r\nconst { RangePicker } = DatePicker;\r\n//表格扩展\r\nconst expandedRowRender = (record, index) => {\r\n    //DdOrder_Det_Sum_columns\r\n    //console.dir(record);\r\n    const data = record.Det;\r\n    if (data === undefined || data.length === 0) {\r\n        return \"\";\r\n    }\r\n    // var DetVal = [];\r\n    // var newData = {};\r\n    // for (let i = 0; i < data.length; i++) {\r\n    //     if (newData[data[i].Datetime1] === undefined) {\r\n    //         //console.dir(data[i].Datetime1);\r\n    //         newData[data[i].Datetime1] = 0;\r\n    //     }\r\n    // }\r\n    // for (var key in newData) {\r\n    //     for (let i = 0; i < data.length; i++) {\r\n    //         if (key === data[i].Datetime1) {\r\n    //             newData[key] += (data[i].Menge * 1)\r\n    //         }\r\n    //     }\r\n    // }\r\n    //DetVal.push({ ID: 1, ...newData });\r\n    //根据时间创建多个Table\r\n    //moment(dt).isBetween(dt1,dt2);\r\n    var newColums = [];\r\n    var newData = [];\r\n    //是否创建数组\r\n    var dt1 = null;\r\n    var dt2 = null;\r\n    data.forEach((item, index) => {\r\n        let singleColums = [];\r\n        var dt = new Date(item.Datetime1);\r\n        let dt3 = moment(dt);\r\n        dt3.add(1, 'm');\r\n        if (newColums.length === 0 || !moment(dt3).isBetween(dt1, dt2)) {\r\n            let singleArr = {};\r\n            dt1 = moment(dt).startOf(\"month\");\r\n            dt2 = moment(dt).endOf(\"month\");\r\n            let dt4 = moment(dt).startOf(\"month\");\r\n            //插入表头的第一列\r\n            singleColums.push({\r\n                title: '日期',\r\n                dataIndex: '日期',\r\n            })\r\n            //插入表头第一列的内容为空\r\n            singleArr[moment(dt1).format('YYYYMM')] = 0;\r\n            singleArr.ID = moment(dt1).format('YYYYMM');\r\n            //插入其他列\r\n            dt4.add(1, 's');\r\n            for (let i = 1; i <= 31; i++) {\r\n                var key = i < 10 ? '0' + i : '' + i;\r\n                singleColums.push({\r\n                    title: key,\r\n                    dataIndex: key,\r\n                })\r\n                singleArr[key] = 0;\r\n            }\r\n            singleArr[\"dt\"] = moment(dt3);\r\n            singleArr[\"日期\"] = moment(dt3).format(\"YYYYMM\");\r\n            newColums.push(singleColums);\r\n            newData.push(singleArr);\r\n        }\r\n\r\n        newColums.forEach((item2, index2) => {\r\n            let dt5 = moment(newData[index2][\"dt\"]).startOf(\"month\");\r\n            let dt6 = moment(newData[index2][\"dt\"]).endOf(\"month\");\r\n            if (moment(dt3).isBetween(dt5, dt6)) {\r\n                newData[index2][moment(dt3).format('DD')] = item.Menge * 1;\r\n            }\r\n            //moment(dt3).format('YYYYMM')\r\n\r\n        })\r\n    })\r\n    // return (<div>\r\n    //     {\r\n    //         newColums.map((_,index)=>{\r\n    //             return(\r\n    //                 <Table\r\n    //                     bordered\r\n    //                     size=\"small\"\r\n    //                     rowKey=\"ID\"\r\n    //                     key={'tab'+index}\r\n    //                     columns={newColums[index]}\r\n    //                     dataSource={newData}\r\n    //                     pagination={false}\r\n    //                 >\r\n    //                 </Table>\r\n    //             )\r\n    //         })\r\n    //     }\r\n    // </div>)\r\n    return <Table\r\n        bordered\r\n        size=\"small\"\r\n        rowKey=\"ID\"\r\n        columns={newColums[0]}\r\n        dataSource={newData}\r\n        pagination={false}\r\n    >\r\n    </Table>\r\n\r\n}\r\n//采购\r\nexport default class Report4_1 extends Component {\r\n    formRef = React.createRef();\r\n    state = {\r\n        dataSource: [],\r\n        loading: true,\r\n        SearchContation: {},\r\n        current: 1,\r\n        dataTotal: 0,\r\n        ExcelLoading: false,\r\n        SpinTip: '',\r\n        model: 0,\r\n        expandRowKeys: []\r\n    }\r\n    TablerepetClassName = (record, index) => {\r\n        if (record.repeat === true) {\r\n            //console.dir(\"class\");\r\n            return \"Tablerepet\";\r\n        } else {\r\n            return \"\";\r\n        }\r\n    }\r\n    ModalExcelOut = async () => {\r\n        var {ExcelLoading,model} = this.state;//当前的订单\r\n        if (ExcelLoading) {\r\n            message.warn(\"数据打包中，请勿重复点击\");\r\n            return;\r\n        }\r\n        const form = this.formRef.current;\r\n        var tempFormData = form.getFieldsValue(true);//当前查询条件\r\n        var ExcelJson = [];\r\n        tempFormData.page = 1;\r\n        tempFormData.pageSize = 99999;\r\n        if(tempFormData.model!==undefined && tempFormData.model.length!==undefined){\r\n            tempFormData.model = tempFormData.model[0];\r\n        }\r\n        const FormData = ConvertFomrData(tempFormData);\r\n        this.setState({ ExcelLoading: true ,SpinTip:'Excel数据打包中'});\r\n        const result = await getV_Sum_Num_CgInfo(FormData);\r\n        if (result.status === 0) {\r\n            const jo_V_CgInfo = result.jo_V_CgInfo.V_CgInfo;\r\n            var jo_V_CgInfoSum = result.jo_V_CgInfoSum.V_CgInfo;\r\n            //console.dir(jo_V_CgInfo);\r\n            const colums = DdOrder_CgInfo_columns(tempFormData.model);\r\n            this.setState({ ExcelLoading: false });\r\n            var i = 0;\r\n            for (; i < jo_V_CgInfoSum.length; i++) {\r\n                jo_V_CgInfoSum[i].ID = \"ID\" + i;\r\n                for (var j=0; j < jo_V_CgInfo.length; j++) {\r\n                    if (model === \"1\") {\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Series === jo_V_CgInfo[j].Series) {\r\n                            let dt = new Date(jo_V_CgInfo[j].Datetime1);\r\n                            if (jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] !== undefined) {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] += jo_V_CgInfo[j].Menge * 1;\r\n                            } else {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] = jo_V_CgInfo[j].Menge * 1;\r\n                            }\r\n                        }\r\n                    }else{\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Lifnr === jo_V_CgInfo[j].Lifnr) {\r\n                            let dt = new Date(jo_V_CgInfo[j].Datetime1);\r\n                            if (jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] !== undefined) {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] += jo_V_CgInfo[j].Menge * 1;\r\n                            } else {\r\n                                jo_V_CgInfoSum[i][moment(dt).format(\"YYYYMMDD\")] = jo_V_CgInfo[j].Menge * 1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            var timeCol = [];\r\n            for (let k = 0; k < jo_V_CgInfoSum.length; k++) {\r\n                let single = {}\r\n\r\n                for (let l = 0; l < colums.length; l++) {\r\n                    single[colums[l].title] = jo_V_CgInfoSum[k][colums[l].dataIndex];\r\n                }\r\n                for (let key2 in jo_V_CgInfoSum[k]) {\r\n                    if (!isNaN(Number(key2))) {\r\n                        single[key2 + \" \"] = jo_V_CgInfoSum[k][key2];\r\n                        let temp = timeCol.find(item=>{\r\n                            if(item===Number(key2)){\r\n                                return true;\r\n                            }\r\n                        })\r\n                        if(temp===undefined){\r\n                            timeCol.push(Number(key2));\r\n                        }\r\n                    }\r\n                }\r\n                ExcelJson.push(single);\r\n            }\r\n            //冒泡排序\r\n            for(let k=0;k<timeCol.length;k++){\r\n                for(let l=k;l<timeCol.length;l++){\r\n                    if(timeCol[k]>timeCol[l]){\r\n                        let temp = timeCol[k];\r\n                        timeCol[k] = timeCol[l];\r\n                        timeCol[l] = temp;\r\n                    }\r\n                }\r\n            }\r\n            let book = XLSX.utils.book_new();\r\n            var newRow = {};\r\n            for(let l = 0; l < colums.length; l++){\r\n                newRow[colums[l].title] = jo_V_CgInfoSum[0][colums[l].dataIndex];\r\n            }\r\n\r\n            for(let k=0;k<timeCol.length;k++){\r\n                //newRow[timeCol[k]] =\r\n                newRow[timeCol[k]+\" \"] =  ExcelJson[0][timeCol[k]+\" \"];\r\n            }\r\n            ExcelJson[0] = newRow;\r\n            let sheet = XLSX.utils.json_to_sheet(ExcelJson);\r\n            sheet[\"!cols\"] = [\r\n                { wch: 15 }, { wch: 20 }, { wch: 10 }, { wch: 8 }, { wch: 12 }, { wch: 30 }, { wch: 12 }, { wch: 12 }, { wch: 15 }, { wch: 15 }\r\n            ];\r\n            XLSX.utils.book_append_sheet(book, sheet, 'Sheet1')\r\n            XLSX.writeFile(book, `采购需求单` + moment().format('YYYYMMDD') + '.xlsx')\r\n\r\n        }else{\r\n            this.setState({ ExcelLoading: false });\r\n            message.error(\"网络错误\")\r\n        }\r\n    }\r\n\r\n    componentDidMount = ()=>{\r\n        this.SearchData();\r\n    }\r\n\r\n    SearchData = async  (pagination = {}) => {\r\n        var { SearchContation } = this.state;\r\n        const form = this.formRef.current;\r\n        if (pagination.page === undefined) {\r\n            SearchContation.page = 1;\r\n            SearchContation.pageSize = 100;\r\n        } else {\r\n            SearchContation.page = pagination.page;\r\n            SearchContation.pageSize = pagination.pageSize;\r\n        }\r\n        var tempFormData = form.getFieldsValue(true);\r\n        if (tempFormData.model !== undefined) {\r\n            let tepModel = tempFormData.model[0];\r\n            delete tempFormData.model;\r\n            tempFormData.model = tepModel;\r\n        }\r\n        tempFormData.page = SearchContation.page;\r\n        tempFormData.pageSize = SearchContation.pageSize;\r\n        const FormData = ConvertFomrData(tempFormData);\r\n        this.setState({ loading: true })\r\n        const result = await getV_Sum_Num_CgInfo(FormData);\r\n        if (result.status === 0) {\r\n            const jo_V_CgInfo = result.jo_V_CgInfo.V_CgInfo;\r\n            var jo_V_CgInfoSum = result.jo_V_CgInfoSum.V_CgInfo;\r\n            var i = 0;\r\n            var preSum = {};\r\n            for (; i < jo_V_CgInfoSum.length; i++) {\r\n                if (i === 0) {\r\n                    preSum = { ...jo_V_CgInfoSum[0] };\r\n                }\r\n                jo_V_CgInfoSum[i].ID = \"D\" + i;\r\n                for (var j = 0; j < jo_V_CgInfo.length; j++) {\r\n                    //console.dir(jo_V_CgInfoSum[i].Matnr);\r\n                    if (tempFormData.model === \"1\") {\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Series === jo_V_CgInfo[j].Series) {\r\n                            if (jo_V_CgInfoSum[i].Det === undefined) {\r\n                                jo_V_CgInfoSum[i].Det = [];\r\n                            }\r\n                            jo_V_CgInfoSum[i].Det.push(jo_V_CgInfo[j]);\r\n                        }\r\n                    } else {\r\n                        if (jo_V_CgInfoSum[i].Matnr === jo_V_CgInfo[j].Matnr && jo_V_CgInfoSum[i].Lifnr === jo_V_CgInfo[j].Lifnr) {\r\n                            if (jo_V_CgInfoSum[i].Det === undefined) {\r\n                                jo_V_CgInfoSum[i].Det = [];\r\n                            }\r\n                            jo_V_CgInfoSum[i].Det.push(jo_V_CgInfo[j]);\r\n                        }\r\n\r\n                    }\r\n                }\r\n                if (i !== 0 && preSum.Matnr === jo_V_CgInfoSum[i].Matnr && tempFormData.model !== \"1\") {\r\n                    jo_V_CgInfoSum[i].Det = [];\r\n                    jo_V_CgInfoSum[i].repeat = true;\r\n                } else if (i !== 0 && preSum.Matnr === jo_V_CgInfoSum[i].Matnr && i !== 0 && preSum.Series === jo_V_CgInfoSum[i].Series && tempFormData.model === \"1\") {\r\n                    jo_V_CgInfoSum[i].Det = [];\r\n                    jo_V_CgInfoSum[i].repeat = true;\r\n                }\r\n                else {\r\n                    preSum = jo_V_CgInfoSum[i];\r\n                }\r\n            }\r\n            this.setState({ loading: false, dataSource: jo_V_CgInfoSum, current: tempFormData.page, dataTotal: result.jo_V_CgInfoSum.V_CgInfo_Count, model: tempFormData.model })\r\n        }else{\r\n            this.setState({ loading: false });\r\n            message.error(\"网络错误\");\r\n        }\r\n    }\r\n    OpenOrCloseAll = () => {\r\n        //expandRowKeys\r\n        const { expandRowKeys, dataSource } = this.state;\r\n        if (expandRowKeys.length > 0) {//关闭\r\n            this.setState({ expandRowKeys: [] });\r\n        } else {//展开\r\n            let newArr = [];\r\n            for (let i = 0; i < dataSource.length; i++) {\r\n                newArr.push(dataSource[i].ID);\r\n            }\r\n            this.setState({ expandRowKeys: newArr });\r\n        }\r\n    }\r\n    OpenOrCloseSingle = (record, type) => {\r\n        let { expandRowKeys } = this.state;\r\n        if (type) {\r\n            expandRowKeys.push(record.ID);\r\n        } else {\r\n            expandRowKeys = expandRowKeys.filter(item => {\r\n                if (item === record.ID) {\r\n                    return false;   \r\n                } else {\r\n                    return true;\r\n                }\r\n            })\r\n        }\r\n        this.setState({ expandRowKeys });\r\n    }\r\n\r\n    render() {\r\n        const { loading, dataSource, current, dataTotal, ExcelLoading, model, expandRowKeys ,SpinTip} = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"toolArea\" >\r\n                    <Form layout=\"inline\" ref={this.formRef} >\r\n                        <Form.Item\r\n                            name=\"Datetime1\"\r\n                            label=\"时间\"\r\n                        >\r\n                            <RangePicker locale={locale} style={{width:'220px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Series\"\r\n                            label=\"系列\"\r\n                        >\r\n                            <Input style={{width:'50px'}}/>\r\n                        </Form.Item>\r\n\r\n                        <Form.Item\r\n                            name=\"Matnr\"\r\n                            label=\"物料编码\"\r\n                        >\r\n                            <Input style={{width:'130px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Maktx\"\r\n                            label=\"物料描述\"\r\n                        >\r\n                            <Input style={{width:'100px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"MRP\"\r\n                            label=\"MRP控制者\"\r\n                        >\r\n                            <Input style={{width:'50px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Lifnr\"\r\n                            label=\"供应商代码\"\r\n                        >\r\n                            <Input style={{width:'60px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"Name1\"\r\n                            label=\"供应商名称\"\r\n                        >\r\n                            <Input style={{width:'100px'}} />\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"model\"\r\n                            label=\"区分系列\"\r\n                        >\r\n                            <Checkbox.Group>\r\n                                <Checkbox value=\"1\"></Checkbox>\r\n                            </Checkbox.Group>\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" onClick={() => this.SearchData()} >查询</Button>\r\n                            &nbsp;&nbsp;\r\n\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n                <div>\r\n                    <div style={{ width: \"75%\", float: \"left\" }}>\r\n                        <h1 style={{ fontSize: '20px', paddingLeft: '20px', lineHeight: '35px' }}>\r\n                            <Button onClick={() => this.OpenOrCloseAll()}>展开/关闭所有行</Button>\r\n                        </h1>\r\n                    </div>\r\n                    <div style={{ width: \"24%\", float: \"left\", textAlign: 'right' }}>\r\n                        <Button type=\"primary\" onClick={() => this.ModalExcelOut()} >Excel导出</Button>\r\n                    </div>\r\n                </div>\r\n                <Table\r\n                    dataSource={dataSource}\r\n                    bordered\r\n                    rowKey=\"ID\"\r\n                    sticky={true}\r\n                    scroll={{ y: 560 }}\r\n                    size=\"middle\"\r\n                    columns={DdOrder_CgInfo_columns(model)}\r\n                    loading={loading}\r\n                    rowClassName={this.TablerepetClassName}\r\n                    pagination={{\r\n                        position: ['bottomCenter'],\r\n                        pageSizeOptions: [20],\r\n                        current: current,\r\n                        total: dataTotal,\r\n                        showTotal: (total, range) => `一共 ${total} 条数据`,\r\n                        pageSize: 100,\r\n                        onChange: (page, pageSize) => {\r\n                            this.SearchData({ page: page, pageSize: pageSize });\r\n                        }\r\n                    }}\r\n                    expandable={{\r\n                        expandRowByClick: true,\r\n                        expandedRowRender,\r\n                        columnWidth: 8,\r\n                        indentSize: 0,\r\n                        expandedRowKeys: expandRowKeys,\r\n                        onExpand: (expanded, record) => { this.OpenOrCloseSingle(record, expanded) }\r\n                    }}\r\n                >\r\n                </Table>\r\n                <Spin style={{ position: 'absolute', left: '48%', top: '47%' }} tip={SpinTip} spinning={ExcelLoading}></Spin>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n",{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","replacedBy":"203"},{"ruleId":"204","severity":1,"message":"205","line":2,"column":28,"nodeType":"206","messageId":"207","endLine":2,"endColumn":32},{"ruleId":"208","severity":1,"message":"209","line":248,"column":23,"nodeType":"210","messageId":"211","endLine":248,"endColumn":31},{"ruleId":"200","replacedBy":"212"},{"ruleId":"202","replacedBy":"213"},{"ruleId":"204","severity":1,"message":"214","line":190,"column":15,"nodeType":"206","messageId":"207","endLine":190,"endColumn":20},{"ruleId":"204","severity":1,"message":"215","line":3,"column":58,"nodeType":"206","messageId":"207","endLine":3,"endColumn":62},{"ruleId":"204","severity":1,"message":"216","line":182,"column":21,"nodeType":"206","messageId":"207","endLine":182,"endColumn":30},{"ruleId":"217","severity":1,"message":"218","line":217,"column":53,"nodeType":"219","messageId":"220","endLine":217,"endColumn":55},{"ruleId":"217","severity":1,"message":"218","line":191,"column":53,"nodeType":"219","messageId":"220","endLine":191,"endColumn":55},{"ruleId":"221","severity":1,"message":"222","line":215,"column":50,"nodeType":"219","messageId":"223","endLine":224,"endColumn":18},{"ruleId":"221","severity":1,"message":"222","line":198,"column":50,"nodeType":"219","messageId":"223","endLine":207,"endColumn":18},{"ruleId":"204","severity":1,"message":"224","line":7,"column":8,"nodeType":"206","messageId":"207","endLine":7,"endColumn":18},{"ruleId":"204","severity":1,"message":"225","line":22,"column":8,"nodeType":"206","messageId":"207","endLine":22,"endColumn":13},{"ruleId":"217","severity":1,"message":"218","line":208,"column":53,"nodeType":"219","messageId":"220","endLine":208,"endColumn":55},"no-native-reassign",["226"],"no-negated-in-lhs",["227"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","valid-typeof","Invalid typeof comparison value.","Literal","invalidValue",["226"],["227"],"'range' is assigned a value but never used.","'Test' is defined but never used.","'TimeColum' is assigned a value but never used.","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'key'.","unsafeRefs","'LinkButton' is defined but never used.","'store' is defined but never used.","no-global-assign","no-unsafe-negation"]